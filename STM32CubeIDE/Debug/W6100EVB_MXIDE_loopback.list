
W6100EVB_MXIDE_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f94  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800658c  0800658c  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800658c  0800658c  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800658c  0800658c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08006594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000110  080066a4  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  080066a4  00020a10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015244  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fbc  00000000  00000000  0003537d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  00038340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  00038f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001906f  00000000  00000000  00039a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1b3  00000000  00000000  00052aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fbee  00000000  00000000  0005fc5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  000df8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	08006160 	.word	0x08006160

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	08006160 	.word	0x08006160

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f941 	bl	80004bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f002 fb26 	bl	8002890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f959 	bl	8000526 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f921 	bl	80004d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000070 	.word	0x20000070
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000016c 	.word	0x2000016c

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000016c 	.word	0x2000016c

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	f003 021f 	and.w	r2, r3, #31
 80003a0:	4906      	ldr	r1, [pc, #24]	; (80003bc <NVIC_EnableIRQ+0x2c>)
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	095b      	lsrs	r3, r3, #5
 80003a8:	2001      	movs	r0, #1
 80003aa:	fa00 f202 	lsl.w	r2, r0, r2
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	490c      	ldr	r1, [pc, #48]	; (800040c <NVIC_SetPriority+0x4c>)
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	f003 030f 	and.w	r3, r3, #15
 80003e0:	3b04      	subs	r3, #4
 80003e2:	0112      	lsls	r2, r2, #4
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ea:	e009      	b.n	8000400 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <NVIC_SetPriority+0x50>)
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	e000e100 	.word	0xe000e100

08000414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	f1c3 0307 	rsb	r3, r3, #7
 800042e:	2b04      	cmp	r3, #4
 8000430:	bf28      	it	cs
 8000432:	2304      	movcs	r3, #4
 8000434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	3304      	adds	r3, #4
 800043a:	2b06      	cmp	r3, #6
 800043c:	d902      	bls.n	8000444 <NVIC_EncodePriority+0x30>
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3b03      	subs	r3, #3
 8000442:	e000      	b.n	8000446 <NVIC_EncodePriority+0x32>
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000448:	f04f 32ff 	mov.w	r2, #4294967295
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	43da      	mvns	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	401a      	ands	r2, r3
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800045c:	f04f 31ff 	mov.w	r1, #4294967295
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	43d9      	mvns	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	4313      	orrs	r3, r2
         );
}
 800046e:	4618      	mov	r0, r3
 8000470:	3724      	adds	r7, #36	; 0x24
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000488:	d301      	bcc.n	800048e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800048a:	2301      	movs	r3, #1
 800048c:	e00f      	b.n	80004ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <SysTick_Config+0x40>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000496:	210f      	movs	r1, #15
 8000498:	f04f 30ff 	mov.w	r0, #4294967295
 800049c:	f7ff ff90 	bl	80003c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <SysTick_Config+0x40>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <SysTick_Config+0x40>)
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	e000e010 	.word	0xe000e010

080004bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ff31 	bl	800032c <NVIC_SetPriorityGrouping>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004e4:	f7ff ff46 	bl	8000374 <NVIC_GetPriorityGrouping>
 80004e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	68b9      	ldr	r1, [r7, #8]
 80004ee:	6978      	ldr	r0, [r7, #20]
 80004f0:	f7ff ff90 	bl	8000414 <NVIC_EncodePriority>
 80004f4:	4602      	mov	r2, r0
 80004f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff5f 	bl	80003c0 <NVIC_SetPriority>
}
 8000502:	bf00      	nop
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff39 	bl	8000390 <NVIC_EnableIRQ>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ffa2 	bl	8000478 <SysTick_Config>
 8000534:	4603      	mov	r3, r0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000552:	2b02      	cmp	r3, #2
 8000554:	d005      	beq.n	8000562 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2204      	movs	r2, #4
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e0d6      	b.n	8000710 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f022 020e 	bic.w	r2, r2, #14
 8000570:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f022 0201 	bic.w	r2, r2, #1
 8000580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b64      	ldr	r3, [pc, #400]	; (800071c <HAL_DMA_Abort_IT+0x1dc>)
 800058a:	429a      	cmp	r2, r3
 800058c:	d958      	bls.n	8000640 <HAL_DMA_Abort_IT+0x100>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a63      	ldr	r2, [pc, #396]	; (8000720 <HAL_DMA_Abort_IT+0x1e0>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d04f      	beq.n	8000638 <HAL_DMA_Abort_IT+0xf8>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a61      	ldr	r2, [pc, #388]	; (8000724 <HAL_DMA_Abort_IT+0x1e4>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d048      	beq.n	8000634 <HAL_DMA_Abort_IT+0xf4>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a60      	ldr	r2, [pc, #384]	; (8000728 <HAL_DMA_Abort_IT+0x1e8>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d040      	beq.n	800062e <HAL_DMA_Abort_IT+0xee>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a5e      	ldr	r2, [pc, #376]	; (800072c <HAL_DMA_Abort_IT+0x1ec>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d038      	beq.n	8000628 <HAL_DMA_Abort_IT+0xe8>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a5d      	ldr	r2, [pc, #372]	; (8000730 <HAL_DMA_Abort_IT+0x1f0>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d030      	beq.n	8000622 <HAL_DMA_Abort_IT+0xe2>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a5b      	ldr	r2, [pc, #364]	; (8000734 <HAL_DMA_Abort_IT+0x1f4>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d028      	beq.n	800061c <HAL_DMA_Abort_IT+0xdc>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a53      	ldr	r2, [pc, #332]	; (800071c <HAL_DMA_Abort_IT+0x1dc>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d020      	beq.n	8000616 <HAL_DMA_Abort_IT+0xd6>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a57      	ldr	r2, [pc, #348]	; (8000738 <HAL_DMA_Abort_IT+0x1f8>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d019      	beq.n	8000612 <HAL_DMA_Abort_IT+0xd2>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a56      	ldr	r2, [pc, #344]	; (800073c <HAL_DMA_Abort_IT+0x1fc>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d012      	beq.n	800060e <HAL_DMA_Abort_IT+0xce>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a54      	ldr	r2, [pc, #336]	; (8000740 <HAL_DMA_Abort_IT+0x200>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d00a      	beq.n	8000608 <HAL_DMA_Abort_IT+0xc8>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a53      	ldr	r2, [pc, #332]	; (8000744 <HAL_DMA_Abort_IT+0x204>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d102      	bne.n	8000602 <HAL_DMA_Abort_IT+0xc2>
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	e01b      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000606:	e018      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	e015      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 800060e:	2310      	movs	r3, #16
 8000610:	e013      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000612:	2301      	movs	r3, #1
 8000614:	e011      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800061a:	e00e      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 800061c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000620:	e00b      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	e008      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	e005      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	e002      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000634:	2310      	movs	r3, #16
 8000636:	e000      	b.n	800063a <HAL_DMA_Abort_IT+0xfa>
 8000638:	2301      	movs	r3, #1
 800063a:	4a43      	ldr	r2, [pc, #268]	; (8000748 <HAL_DMA_Abort_IT+0x208>)
 800063c:	6053      	str	r3, [r2, #4]
 800063e:	e057      	b.n	80006f0 <HAL_DMA_Abort_IT+0x1b0>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a36      	ldr	r2, [pc, #216]	; (8000720 <HAL_DMA_Abort_IT+0x1e0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d04f      	beq.n	80006ea <HAL_DMA_Abort_IT+0x1aa>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a35      	ldr	r2, [pc, #212]	; (8000724 <HAL_DMA_Abort_IT+0x1e4>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d048      	beq.n	80006e6 <HAL_DMA_Abort_IT+0x1a6>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a33      	ldr	r2, [pc, #204]	; (8000728 <HAL_DMA_Abort_IT+0x1e8>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d040      	beq.n	80006e0 <HAL_DMA_Abort_IT+0x1a0>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a32      	ldr	r2, [pc, #200]	; (800072c <HAL_DMA_Abort_IT+0x1ec>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d038      	beq.n	80006da <HAL_DMA_Abort_IT+0x19a>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a30      	ldr	r2, [pc, #192]	; (8000730 <HAL_DMA_Abort_IT+0x1f0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d030      	beq.n	80006d4 <HAL_DMA_Abort_IT+0x194>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <HAL_DMA_Abort_IT+0x1f4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d028      	beq.n	80006ce <HAL_DMA_Abort_IT+0x18e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <HAL_DMA_Abort_IT+0x1dc>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d020      	beq.n	80006c8 <HAL_DMA_Abort_IT+0x188>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a2b      	ldr	r2, [pc, #172]	; (8000738 <HAL_DMA_Abort_IT+0x1f8>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d019      	beq.n	80006c4 <HAL_DMA_Abort_IT+0x184>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a29      	ldr	r2, [pc, #164]	; (800073c <HAL_DMA_Abort_IT+0x1fc>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d012      	beq.n	80006c0 <HAL_DMA_Abort_IT+0x180>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a28      	ldr	r2, [pc, #160]	; (8000740 <HAL_DMA_Abort_IT+0x200>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d00a      	beq.n	80006ba <HAL_DMA_Abort_IT+0x17a>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a26      	ldr	r2, [pc, #152]	; (8000744 <HAL_DMA_Abort_IT+0x204>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d102      	bne.n	80006b4 <HAL_DMA_Abort_IT+0x174>
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	e01b      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	e018      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006be:	e015      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006c0:	2310      	movs	r3, #16
 80006c2:	e013      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e011      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006cc:	e00e      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006d2:	e00b      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	e008      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	e005      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e4:	e002      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006e6:	2310      	movs	r3, #16
 80006e8:	e000      	b.n	80006ec <HAL_DMA_Abort_IT+0x1ac>
 80006ea:	2301      	movs	r3, #1
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <HAL_DMA_Abort_IT+0x20c>)
 80006ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2201      	movs	r2, #1
 80006f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	4798      	blx	r3
    } 
  }
  return status;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40020080 	.word	0x40020080
 8000720:	40020008 	.word	0x40020008
 8000724:	4002001c 	.word	0x4002001c
 8000728:	40020030 	.word	0x40020030
 800072c:	40020044 	.word	0x40020044
 8000730:	40020058 	.word	0x40020058
 8000734:	4002006c 	.word	0x4002006c
 8000738:	40020408 	.word	0x40020408
 800073c:	4002041c 	.word	0x4002041c
 8000740:	40020430 	.word	0x40020430
 8000744:	40020444 	.word	0x40020444
 8000748:	40020400 	.word	0x40020400
 800074c:	40020000 	.word	0x40020000

08000750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000750:	b480      	push	{r7}
 8000752:	b08b      	sub	sp, #44	; 0x2c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
 8000772:	e133      	b.n	80009dc <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000774:	2201      	movs	r2, #1
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	69fa      	ldr	r2, [r7, #28]
 8000784:	4013      	ands	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	429a      	cmp	r2, r3
 800078e:	f040 8122 	bne.w	80009d6 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b12      	cmp	r3, #18
 8000798:	d034      	beq.n	8000804 <HAL_GPIO_Init+0xb4>
 800079a:	2b12      	cmp	r3, #18
 800079c:	d80d      	bhi.n	80007ba <HAL_GPIO_Init+0x6a>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d02b      	beq.n	80007fa <HAL_GPIO_Init+0xaa>
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d804      	bhi.n	80007b0 <HAL_GPIO_Init+0x60>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d031      	beq.n	800080e <HAL_GPIO_Init+0xbe>
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d01c      	beq.n	80007e8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007ae:	e048      	b.n	8000842 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d043      	beq.n	800083c <HAL_GPIO_Init+0xec>
 80007b4:	2b11      	cmp	r3, #17
 80007b6:	d01b      	beq.n	80007f0 <HAL_GPIO_Init+0xa0>
          break;
 80007b8:	e043      	b.n	8000842 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007ba:	4a8d      	ldr	r2, [pc, #564]	; (80009f0 <HAL_GPIO_Init+0x2a0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d026      	beq.n	800080e <HAL_GPIO_Init+0xbe>
 80007c0:	4a8b      	ldr	r2, [pc, #556]	; (80009f0 <HAL_GPIO_Init+0x2a0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d806      	bhi.n	80007d4 <HAL_GPIO_Init+0x84>
 80007c6:	4a8b      	ldr	r2, [pc, #556]	; (80009f4 <HAL_GPIO_Init+0x2a4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d020      	beq.n	800080e <HAL_GPIO_Init+0xbe>
 80007cc:	4a8a      	ldr	r2, [pc, #552]	; (80009f8 <HAL_GPIO_Init+0x2a8>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d01d      	beq.n	800080e <HAL_GPIO_Init+0xbe>
          break;
 80007d2:	e036      	b.n	8000842 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007d4:	4a89      	ldr	r2, [pc, #548]	; (80009fc <HAL_GPIO_Init+0x2ac>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d019      	beq.n	800080e <HAL_GPIO_Init+0xbe>
 80007da:	4a89      	ldr	r2, [pc, #548]	; (8000a00 <HAL_GPIO_Init+0x2b0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d016      	beq.n	800080e <HAL_GPIO_Init+0xbe>
 80007e0:	4a88      	ldr	r2, [pc, #544]	; (8000a04 <HAL_GPIO_Init+0x2b4>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d013      	beq.n	800080e <HAL_GPIO_Init+0xbe>
          break;
 80007e6:	e02c      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	623b      	str	r3, [r7, #32]
          break;
 80007ee:	e028      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	3304      	adds	r3, #4
 80007f6:	623b      	str	r3, [r7, #32]
          break;
 80007f8:	e023      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	3308      	adds	r3, #8
 8000800:	623b      	str	r3, [r7, #32]
          break;
 8000802:	e01e      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	330c      	adds	r3, #12
 800080a:	623b      	str	r3, [r7, #32]
          break;
 800080c:	e019      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d102      	bne.n	800081c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000816:	2304      	movs	r3, #4
 8000818:	623b      	str	r3, [r7, #32]
          break;
 800081a:	e012      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d105      	bne.n	8000830 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000824:	2308      	movs	r3, #8
 8000826:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	611a      	str	r2, [r3, #16]
          break;
 800082e:	e008      	b.n	8000842 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000830:	2308      	movs	r3, #8
 8000832:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69fa      	ldr	r2, [r7, #28]
 8000838:	615a      	str	r2, [r3, #20]
          break;
 800083a:	e002      	b.n	8000842 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
          break;
 8000840:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	2bff      	cmp	r3, #255	; 0xff
 8000846:	d801      	bhi.n	800084c <HAL_GPIO_Init+0xfc>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	e001      	b.n	8000850 <HAL_GPIO_Init+0x100>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3304      	adds	r3, #4
 8000850:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	2bff      	cmp	r3, #255	; 0xff
 8000856:	d802      	bhi.n	800085e <HAL_GPIO_Init+0x10e>
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	e002      	b.n	8000864 <HAL_GPIO_Init+0x114>
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	3b08      	subs	r3, #8
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	210f      	movs	r1, #15
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	401a      	ands	r2, r3
 8000876:	6a39      	ldr	r1, [r7, #32]
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	431a      	orrs	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	2b00      	cmp	r3, #0
 800088e:	f000 80a2 	beq.w	80009d6 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000892:	4b5d      	ldr	r3, [pc, #372]	; (8000a08 <HAL_GPIO_Init+0x2b8>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a5c      	ldr	r2, [pc, #368]	; (8000a08 <HAL_GPIO_Init+0x2b8>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b5a      	ldr	r3, [pc, #360]	; (8000a08 <HAL_GPIO_Init+0x2b8>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80008aa:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <HAL_GPIO_Init+0x2bc>)
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	3302      	adds	r3, #2
 80008b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	220f      	movs	r2, #15
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	4013      	ands	r3, r2
 80008cc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a4f      	ldr	r2, [pc, #316]	; (8000a10 <HAL_GPIO_Init+0x2c0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d01f      	beq.n	8000916 <HAL_GPIO_Init+0x1c6>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a4e      	ldr	r2, [pc, #312]	; (8000a14 <HAL_GPIO_Init+0x2c4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d019      	beq.n	8000912 <HAL_GPIO_Init+0x1c2>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a4d      	ldr	r2, [pc, #308]	; (8000a18 <HAL_GPIO_Init+0x2c8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d013      	beq.n	800090e <HAL_GPIO_Init+0x1be>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a4c      	ldr	r2, [pc, #304]	; (8000a1c <HAL_GPIO_Init+0x2cc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d00d      	beq.n	800090a <HAL_GPIO_Init+0x1ba>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a4b      	ldr	r2, [pc, #300]	; (8000a20 <HAL_GPIO_Init+0x2d0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d007      	beq.n	8000906 <HAL_GPIO_Init+0x1b6>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a4a      	ldr	r2, [pc, #296]	; (8000a24 <HAL_GPIO_Init+0x2d4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_GPIO_Init+0x1b2>
 80008fe:	2305      	movs	r3, #5
 8000900:	e00a      	b.n	8000918 <HAL_GPIO_Init+0x1c8>
 8000902:	2306      	movs	r3, #6
 8000904:	e008      	b.n	8000918 <HAL_GPIO_Init+0x1c8>
 8000906:	2304      	movs	r3, #4
 8000908:	e006      	b.n	8000918 <HAL_GPIO_Init+0x1c8>
 800090a:	2303      	movs	r3, #3
 800090c:	e004      	b.n	8000918 <HAL_GPIO_Init+0x1c8>
 800090e:	2302      	movs	r3, #2
 8000910:	e002      	b.n	8000918 <HAL_GPIO_Init+0x1c8>
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <HAL_GPIO_Init+0x1c8>
 8000916:	2300      	movs	r3, #0
 8000918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800091a:	f002 0203 	and.w	r2, r2, #3
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	4093      	lsls	r3, r2
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4313      	orrs	r3, r2
 8000926:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000928:	4938      	ldr	r1, [pc, #224]	; (8000a0c <HAL_GPIO_Init+0x2bc>)
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4938      	ldr	r1, [pc, #224]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	600b      	str	r3, [r1, #0]
 800094e:	e006      	b.n	800095e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	43db      	mvns	r3, r3
 8000958:	4933      	ldr	r1, [pc, #204]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 800095a:	4013      	ands	r3, r2
 800095c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d006      	beq.n	8000978 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	492e      	ldr	r1, [pc, #184]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	604b      	str	r3, [r1, #4]
 8000976:	e006      	b.n	8000986 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	43db      	mvns	r3, r3
 8000980:	4929      	ldr	r1, [pc, #164]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000982:	4013      	ands	r3, r2
 8000984:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	4924      	ldr	r1, [pc, #144]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	608b      	str	r3, [r1, #8]
 800099e:	e006      	b.n	80009ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	43db      	mvns	r3, r3
 80009a8:	491f      	ldr	r1, [pc, #124]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d006      	beq.n	80009c8 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 80009bc:	68da      	ldr	r2, [r3, #12]
 80009be:	491a      	ldr	r1, [pc, #104]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	60cb      	str	r3, [r1, #12]
 80009c6:	e006      	b.n	80009d6 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	4915      	ldr	r1, [pc, #84]	; (8000a28 <HAL_GPIO_Init+0x2d8>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	3301      	adds	r3, #1
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	f67f aec8 	bls.w	8000774 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80009e4:	bf00      	nop
 80009e6:	372c      	adds	r7, #44	; 0x2c
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	10210000 	.word	0x10210000
 80009f4:	10110000 	.word	0x10110000
 80009f8:	10120000 	.word	0x10120000
 80009fc:	10310000 	.word	0x10310000
 8000a00:	10320000 	.word	0x10320000
 8000a04:	10220000 	.word	0x10220000
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010000 	.word	0x40010000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40011400 	.word	0x40011400
 8000a20:	40011800 	.word	0x40011800
 8000a24:	40011c00 	.word	0x40011c00
 8000a28:	40010400 	.word	0x40010400

08000a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a3c:	787b      	ldrb	r3, [r7, #1]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a48:	e003      	b.n	8000a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	041a      	lsls	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	611a      	str	r2, [r3, #16]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 8087 	beq.w	8000b84 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a76:	4b92      	ldr	r3, [pc, #584]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d00c      	beq.n	8000a9c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a82:	4b8f      	ldr	r3, [pc, #572]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 030c 	and.w	r3, r3, #12
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d112      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x58>
 8000a8e:	4b8c      	ldr	r3, [pc, #560]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a9a:	d10b      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9c:	4b88      	ldr	r3, [pc, #544]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d06c      	beq.n	8000b82 <HAL_RCC_OscConfig+0x126>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d168      	bne.n	8000b82 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e22d      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000abc:	d106      	bne.n	8000acc <HAL_RCC_OscConfig+0x70>
 8000abe:	4b80      	ldr	r3, [pc, #512]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a7f      	ldr	r2, [pc, #508]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e02e      	b.n	8000b2a <HAL_RCC_OscConfig+0xce>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10c      	bne.n	8000aee <HAL_RCC_OscConfig+0x92>
 8000ad4:	4b7a      	ldr	r3, [pc, #488]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a79      	ldr	r2, [pc, #484]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b77      	ldr	r3, [pc, #476]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a76      	ldr	r2, [pc, #472]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e01d      	b.n	8000b2a <HAL_RCC_OscConfig+0xce>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af6:	d10c      	bne.n	8000b12 <HAL_RCC_OscConfig+0xb6>
 8000af8:	4b71      	ldr	r3, [pc, #452]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a70      	ldr	r2, [pc, #448]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b6e      	ldr	r3, [pc, #440]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a6d      	ldr	r2, [pc, #436]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e00b      	b.n	8000b2a <HAL_RCC_OscConfig+0xce>
 8000b12:	4b6b      	ldr	r3, [pc, #428]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a6a      	ldr	r2, [pc, #424]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	4b68      	ldr	r3, [pc, #416]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a67      	ldr	r2, [pc, #412]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b28:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d013      	beq.n	8000b5a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b32:	f7ff fbcf 	bl	80002d4 <HAL_GetTick>
 8000b36:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b38:	e008      	b.n	8000b4c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b3a:	f7ff fbcb 	bl	80002d4 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	2b64      	cmp	r3, #100	; 0x64
 8000b46:	d901      	bls.n	8000b4c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e1e1      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4c:	4b5c      	ldr	r3, [pc, #368]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f0      	beq.n	8000b3a <HAL_RCC_OscConfig+0xde>
 8000b58:	e014      	b.n	8000b84 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fbbb 	bl	80002d4 <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b62:	f7ff fbb7 	bl	80002d4 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b64      	cmp	r3, #100	; 0x64
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e1cd      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b74:	4b52      	ldr	r3, [pc, #328]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f0      	bne.n	8000b62 <HAL_RCC_OscConfig+0x106>
 8000b80:	e000      	b.n	8000b84 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d063      	beq.n	8000c58 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b90:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00b      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b9c:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d11c      	bne.n	8000be2 <HAL_RCC_OscConfig+0x186>
 8000ba8:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d116      	bne.n	8000be2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb4:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <HAL_RCC_OscConfig+0x170>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d001      	beq.n	8000bcc <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e1a1      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bcc:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	4939      	ldr	r1, [pc, #228]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be0:	e03a      	b.n	8000c58 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d020      	beq.n	8000c2c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_RCC_OscConfig+0x268>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fb70 	bl	80002d4 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fb6c 	bl	80002d4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e182      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f0      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4926      	ldr	r1, [pc, #152]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
 8000c2a:	e015      	b.n	8000c58 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_RCC_OscConfig+0x268>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c32:	f7ff fb4f 	bl	80002d4 <HAL_GetTick>
 8000c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c38:	e008      	b.n	8000c4c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3a:	f7ff fb4b 	bl	80002d4 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e161      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f0      	bne.n	8000c3a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d039      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d019      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c72:	f7ff fb2f 	bl	80002d4 <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fb2b 	bl	80002d4 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e141      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_RCC_OscConfig+0x264>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f0      	beq.n	8000c7a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fae5 	bl	8001268 <RCC_Delay>
 8000c9e:	e01b      	b.n	8000cd8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fb15 	bl	80002d4 <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cac:	e00e      	b.n	8000ccc <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cae:	f7ff fb11 	bl	80002d4 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d907      	bls.n	8000ccc <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e127      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	42420000 	.word	0x42420000
 8000cc8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ccc:	4b92      	ldr	r3, [pc, #584]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1ea      	bne.n	8000cae <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80a6 	beq.w	8000e32 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cea:	4b8b      	ldr	r3, [pc, #556]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10d      	bne.n	8000d12 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b88      	ldr	r3, [pc, #544]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a87      	ldr	r2, [pc, #540]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d12:	4b82      	ldr	r3, [pc, #520]	; (8000f1c <HAL_RCC_OscConfig+0x4c0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d118      	bne.n	8000d50 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d1e:	4b7f      	ldr	r3, [pc, #508]	; (8000f1c <HAL_RCC_OscConfig+0x4c0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a7e      	ldr	r2, [pc, #504]	; (8000f1c <HAL_RCC_OscConfig+0x4c0>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fad3 	bl	80002d4 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d32:	f7ff facf 	bl	80002d4 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b64      	cmp	r3, #100	; 0x64
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e0e5      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d44:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <HAL_RCC_OscConfig+0x4c0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d106      	bne.n	8000d66 <HAL_RCC_OscConfig+0x30a>
 8000d58:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4a6e      	ldr	r2, [pc, #440]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6213      	str	r3, [r2, #32]
 8000d64:	e02d      	b.n	8000dc2 <HAL_RCC_OscConfig+0x366>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x32c>
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4a69      	ldr	r2, [pc, #420]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	6213      	str	r3, [r2, #32]
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a66      	ldr	r2, [pc, #408]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d80:	f023 0304 	bic.w	r3, r3, #4
 8000d84:	6213      	str	r3, [r2, #32]
 8000d86:	e01c      	b.n	8000dc2 <HAL_RCC_OscConfig+0x366>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d10c      	bne.n	8000daa <HAL_RCC_OscConfig+0x34e>
 8000d90:	4b61      	ldr	r3, [pc, #388]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4a60      	ldr	r2, [pc, #384]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6213      	str	r3, [r2, #32]
 8000d9c:	4b5e      	ldr	r3, [pc, #376]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	4a5d      	ldr	r2, [pc, #372]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6213      	str	r3, [r2, #32]
 8000da8:	e00b      	b.n	8000dc2 <HAL_RCC_OscConfig+0x366>
 8000daa:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	4a5a      	ldr	r2, [pc, #360]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	6213      	str	r3, [r2, #32]
 8000db6:	4b58      	ldr	r3, [pc, #352]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	4a57      	ldr	r2, [pc, #348]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000dbc:	f023 0304 	bic.w	r3, r3, #4
 8000dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d015      	beq.n	8000df6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fa83 	bl	80002d4 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd0:	e00a      	b.n	8000de8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fa7f 	bl	80002d4 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e093      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de8:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0ee      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x376>
 8000df4:	e014      	b.n	8000e20 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fa6d 	bl	80002d4 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fa69 	bl	80002d4 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e07d      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e14:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ee      	bne.n	8000dfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d105      	bne.n	8000e32 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e26:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a3b      	ldr	r2, [pc, #236]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d069      	beq.n	8000f0e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d061      	beq.n	8000f0a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d146      	bne.n	8000edc <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fa3e 	bl	80002d4 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e5c:	f7ff fa3a 	bl	80002d4 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e050      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d108      	bne.n	8000e96 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	4921      	ldr	r1, [pc, #132]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a19      	ldr	r1, [r3, #32]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	491b      	ldr	r1, [pc, #108]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fa0e 	bl	80002d4 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ebc:	f7ff fa0a 	bl	80002d4 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e020      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0x460>
 8000eda:	e018      	b.n	8000f0e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff f9f7 	bl	80002d4 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eea:	f7ff f9f3 	bl	80002d4 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e009      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_RCC_OscConfig+0x4bc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x48e>
 8000f08:	e001      	b.n	8000f0e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	42420060 	.word	0x42420060

08000f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f32:	4b7e      	ldr	r3, [pc, #504]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d910      	bls.n	8000f62 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f40:	4b7a      	ldr	r3, [pc, #488]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 0207 	bic.w	r2, r3, #7
 8000f48:	4978      	ldr	r1, [pc, #480]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f50:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d001      	beq.n	8000f62 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0e0      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d020      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f7a:	4b6d      	ldr	r3, [pc, #436]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a6c      	ldr	r2, [pc, #432]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000f80:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f84:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f92:	4b67      	ldr	r3, [pc, #412]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a66      	ldr	r2, [pc, #408]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000f98:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f9c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9e:	4b64      	ldr	r3, [pc, #400]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	4961      	ldr	r1, [pc, #388]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d06a      	beq.n	8001092 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc4:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d115      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0a7      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d107      	bne.n	8000fec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fdc:	4b54      	ldr	r3, [pc, #336]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d109      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e09b      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	4b50      	ldr	r3, [pc, #320]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e093      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffc:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f023 0203 	bic.w	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4949      	ldr	r1, [pc, #292]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800100e:	f7ff f961 	bl	80002d4 <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d112      	bne.n	8001042 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101e:	f7ff f959 	bl	80002d4 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e077      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d1ee      	bne.n	800101e <HAL_RCC_ClockConfig+0xfa>
 8001040:	e027      	b.n	8001092 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d11d      	bne.n	8001086 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104a:	e00a      	b.n	8001062 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800104c:	f7ff f942 	bl	80002d4 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f241 3288 	movw	r2, #5000	; 0x1388
 800105a:	4293      	cmp	r3, r2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e060      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b08      	cmp	r3, #8
 800106c:	d1ee      	bne.n	800104c <HAL_RCC_ClockConfig+0x128>
 800106e:	e010      	b.n	8001092 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001070:	f7ff f930 	bl	80002d4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	; 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e04e      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ee      	bne.n	8001070 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d210      	bcs.n	80010c2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 0207 	bic.w	r2, r3, #7
 80010a8:	4920      	ldr	r1, [pc, #128]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_RCC_ClockConfig+0x208>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e030      	b.n	8001124 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4915      	ldr	r1, [pc, #84]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d009      	beq.n	8001100 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001100:	f000 f81c 	bl	800113c <HAL_RCC_GetSysClockFreq>
 8001104:	4601      	mov	r1, r0
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_RCC_ClockConfig+0x20c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_RCC_ClockConfig+0x210>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	fa21 f303 	lsr.w	r3, r1, r3
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_RCC_ClockConfig+0x214>)
 800111a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff f897 	bl	8000250 <HAL_InitTick>
  
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40022000 	.word	0x40022000
 8001130:	40021000 	.word	0x40021000
 8001134:	080064dc 	.word	0x080064dc
 8001138:	20000070 	.word	0x20000070

0800113c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800113c:	b490      	push	{r4, r7}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001144:	1d3c      	adds	r4, r7, #4
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b04      	cmp	r3, #4
 8001174:	d002      	beq.n	800117c <HAL_RCC_GetSysClockFreq+0x40>
 8001176:	2b08      	cmp	r3, #8
 8001178:	d003      	beq.n	8001182 <HAL_RCC_GetSysClockFreq+0x46>
 800117a:	e02d      	b.n	80011d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800117e:	623b      	str	r3, [r7, #32]
      break;
 8001180:	e02d      	b.n	80011de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	0c9b      	lsrs	r3, r3, #18
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800118e:	4413      	add	r3, r2
 8001190:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001194:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	0c5b      	lsrs	r3, r3, #17
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011ae:	4413      	add	r3, r2
 80011b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011b4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011ba:	fb02 f203 	mul.w	r2, r2, r3
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
 80011c6:	e004      	b.n	80011d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	623b      	str	r3, [r7, #32]
      break;
 80011d6:	e002      	b.n	80011de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_RCC_GetSysClockFreq+0xc4>)
 80011da:	623b      	str	r3, [r7, #32]
      break;
 80011dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011de:	6a3b      	ldr	r3, [r7, #32]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc90      	pop	{r4, r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	08006178 	.word	0x08006178
 80011f0:	08006188 	.word	0x08006188
 80011f4:	40021000 	.word	0x40021000
 80011f8:	00b71b00 	.word	0x00b71b00
 80011fc:	003d0900 	.word	0x003d0900
 8001200:	007a1200 	.word	0x007a1200

08001204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_RCC_GetHCLKFreq+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000070 	.word	0x20000070

08001218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800121c:	f7ff fff2 	bl	8001204 <HAL_RCC_GetHCLKFreq>
 8001220:	4601      	mov	r1, r0
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_RCC_GetPCLK1Freq+0x24>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001234:	4618      	mov	r0, r3
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	080064ec 	.word	0x080064ec

08001240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001244:	f7ff ffde 	bl	8001204 <HAL_RCC_GetHCLKFreq>
 8001248:	4601      	mov	r1, r0
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	0adb      	lsrs	r3, r3, #11
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	080064ec 	.word	0x080064ec

08001268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <RCC_Delay+0x34>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <RCC_Delay+0x38>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0a5b      	lsrs	r3, r3, #9
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	fb02 f303 	mul.w	r3, r2, r3
 8001282:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001284:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	60fa      	str	r2, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f9      	bne.n	8001284 <RCC_Delay+0x1c>
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000070 	.word	0x20000070
 80012a0:	10624dd3 	.word	0x10624dd3

080012a4 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80012be:	2301      	movs	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_SPI_TransmitReceive+0x32>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e182      	b.n	80015dc <HAL_SPI_TransmitReceive+0x338>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012de:	f7fe fff9 	bl	80002d4 <HAL_GetTick>
 80012e2:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d00e      	beq.n	8001318 <HAL_SPI_TransmitReceive+0x74>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001300:	d106      	bne.n	8001310 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_SPI_TransmitReceive+0x6c>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d003      	beq.n	8001318 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001310:	2302      	movs	r3, #2
 8001312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001316:	e157      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_SPI_TransmitReceive+0x86>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_SPI_TransmitReceive+0x86>
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001330:	e14a      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d103      	bne.n	8001346 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2205      	movs	r2, #5
 8001342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	887a      	ldrh	r2, [r7, #2]
 800136e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001386:	2b40      	cmp	r3, #64	; 0x40
 8001388:	d007      	beq.n	800139a <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013a2:	d171      	bne.n	8001488 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_SPI_TransmitReceive+0x112>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d15d      	bne.n	8001472 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	881a      	ldrh	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3302      	adds	r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013d4:	e04d      	b.n	8001472 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01c      	beq.n	8001416 <HAL_SPI_TransmitReceive+0x172>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d017      	beq.n	8001416 <HAL_SPI_TransmitReceive+0x172>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d110      	bne.n	8001416 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3302      	adds	r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001408:	b29b      	uxth	r3, r3
 800140a:	3b01      	subs	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800141a:	b29b      	uxth	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d018      	beq.n	8001452 <HAL_SPI_TransmitReceive+0x1ae>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b01      	cmp	r3, #1
 800142c:	d111      	bne.n	8001452 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	b29a      	uxth	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3302      	adds	r3, #2
 800143e:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d00b      	beq.n	8001472 <HAL_SPI_TransmitReceive+0x1ce>
 800145a:	f7fe ff3b 	bl	80002d4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001466:	429a      	cmp	r2, r3
 8001468:	d803      	bhi.n	8001472 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001470:	e0aa      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001476:	b29b      	uxth	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ac      	bne.n	80013d6 <HAL_SPI_TransmitReceive+0x132>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1a7      	bne.n	80013d6 <HAL_SPI_TransmitReceive+0x132>
 8001486:	e070      	b.n	800156a <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_SPI_TransmitReceive+0x1f6>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001494:	b29b      	uxth	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d15d      	bne.n	8001556 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	330c      	adds	r3, #12
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3301      	adds	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014ba:	e04c      	b.n	8001556 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01c      	beq.n	80014fc <HAL_SPI_TransmitReceive+0x258>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d017      	beq.n	80014fc <HAL_SPI_TransmitReceive+0x258>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d110      	bne.n	80014fc <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	320c      	adds	r2, #12
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d017      	beq.n	8001536 <HAL_SPI_TransmitReceive+0x292>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d110      	bne.n	8001536 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d9      	ldr	r1, [r3, #12]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	b2ca      	uxtb	r2, r1
 8001522:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d00b      	beq.n	8001556 <HAL_SPI_TransmitReceive+0x2b2>
 800153e:	f7fe fec9 	bl	80002d4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800154a:	429a      	cmp	r2, r3
 800154c:	d803      	bhi.n	8001556 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001554:	e038      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ad      	bne.n	80014bc <HAL_SPI_TransmitReceive+0x218>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001564:	b29b      	uxth	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1a8      	bne.n	80014bc <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001570:	2201      	movs	r2, #1
 8001572:	2102      	movs	r1, #2
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f835 	bl	80015e4 <SPI_WaitFlagStateUntilTimeout>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001586:	e01f      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f892 	bl	80016b6 <SPI_CheckFlag_BSY>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2220      	movs	r2, #32
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80015a4:	e010      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10b      	bne.n	80015c6 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	e000      	b.n	80015c8 <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 80015c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80015f2:	e04d      	b.n	8001690 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fa:	d049      	beq.n	8001690 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001602:	f7fe fe67 	bl	80002d4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d83e      	bhi.n	8001690 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001620:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800162a:	d111      	bne.n	8001650 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001634:	d004      	beq.n	8001640 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d107      	bne.n	8001650 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800164e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001658:	d110      	bne.n	800167c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001668:	400b      	ands	r3, r1
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800167a:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e00e      	b.n	80016ae <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4013      	ands	r3, r2
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	429a      	cmp	r2, r3
 800169e:	d101      	bne.n	80016a4 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80016a0:	2201      	movs	r2, #1
 80016a2:	e000      	b.n	80016a6 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80016a4:	2200      	movs	r2, #0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1a3      	bne.n	80015f4 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af02      	add	r7, sp, #8
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2200      	movs	r2, #0
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7ff ff89 	bl	80015e4 <SPI_WaitFlagStateUntilTimeout>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	f043 0220 	orr.w	r2, r3, #32
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e000      	b.n	80016ea <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e057      	b.n	80017b4 <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f001 f8ec 	bl	80028f4 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	ea42 0103 	orr.w	r1, r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	f003 0104 	and.w	r1, r3, #4
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001792:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a2:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e03f      	b.n	800184e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f001 f8d2 	bl	800298c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2224      	movs	r2, #36	; 0x24
 80017ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017fe:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fb8d 	bl	8001f20 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001824:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001834:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2220      	movs	r2, #32
 8001848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b088      	sub	sp, #32
 800185a:	af02      	add	r7, sp, #8
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	f040 8083 	bne.w	800197e <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_UART_Transmit+0x2e>
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e07b      	b.n	8001980 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_UART_Transmit+0x40>
 8001892:	2302      	movs	r3, #2
 8001894:	e074      	b.n	8001980 <HAL_UART_Transmit+0x12a>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2221      	movs	r2, #33	; 0x21
 80018a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80018ac:	f7fe fd12 	bl	80002d4 <HAL_GetTick>
 80018b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	88fa      	ldrh	r2, [r7, #6]
 80018bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80018be:	e042      	b.n	8001946 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d6:	d122      	bne.n	800191e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2200      	movs	r2, #0
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f9b2 	bl	8001c4c <UART_WaitOnFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e046      	b.n	8001980 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001904:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3302      	adds	r3, #2
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	e017      	b.n	8001946 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3301      	adds	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	e013      	b.n	8001946 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f98f 	bl	8001c4c <UART_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e023      	b.n	8001980 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	60ba      	str	r2, [r7, #8]
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1b7      	bne.n	80018c0 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2200      	movs	r2, #0
 8001958:	2140      	movs	r1, #64	; 0x40
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f976 	bl	8001c4c <UART_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e00a      	b.n	8001980 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800197e:	2302      	movs	r3, #2
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d140      	bne.n	8001a24 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_UART_Receive_IT+0x26>
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e039      	b.n	8001a26 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_UART_Receive_IT+0x38>
 80019bc:	2302      	movs	r3, #2
 80019be:	e032      	b.n	8001a26 <HAL_UART_Receive_IT+0x9e>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	88fa      	ldrh	r2, [r7, #6]
 80019d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2222      	movs	r2, #34	; 0x22
 80019e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_UART_IRQHandler+0x52>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f9ce 	bl	8001e1c <UART_Receive_IT>
      return;
 8001a80:	e0cc      	b.n	8001c1c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ab 	beq.w	8001be0 <HAL_UART_IRQHandler+0x1b0>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <HAL_UART_IRQHandler+0x70>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a0 	beq.w	8001be0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x90>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_UART_IRQHandler+0xb0>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	f043 0202 	orr.w	r2, r3, #2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_UART_IRQHandler+0xd0>
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f043 0204 	orr.w	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <HAL_UART_IRQHandler+0xf0>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	f043 0208 	orr.w	r2, r3, #8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d078      	beq.n	8001c1a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_UART_IRQHandler+0x112>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f96d 	bl	8001e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <HAL_UART_IRQHandler+0x13a>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d031      	beq.n	8001bce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8b8 	bl	8001ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d023      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d013      	beq.n	8001bbe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_UART_IRQHandler+0x1f4>)
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fccc 	bl	8000540 <HAL_DMA_Abort_IT>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d016      	beq.n	8001bdc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bbc:	e00e      	b.n	8001bdc <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f83b 	bl	8001c3a <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc4:	e00a      	b.n	8001bdc <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f837 	bl	8001c3a <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bcc:	e006      	b.n	8001bdc <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f833 	bl	8001c3a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001bda:	e01e      	b.n	8001c1a <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bdc:	bf00      	nop
    return;
 8001bde:	e01c      	b.n	8001c1a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_UART_IRQHandler+0x1cc>
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8a4 	bl	8001d42 <UART_Transmit_IT>
    return;
 8001bfa:	e00f      	b.n	8001c1c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_UART_IRQHandler+0x1ec>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8eb 	bl	8001dec <UART_EndTransmit_IT>
    return;
 8001c16:	bf00      	nop
 8001c18:	e000      	b.n	8001c1c <HAL_UART_IRQHandler+0x1ec>
    return;
 8001c1a:	bf00      	nop
  }
}
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	08001d1b 	.word	0x08001d1b

08001c28 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c5c:	e02c      	b.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d028      	beq.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8001c6c:	f7fe fb32 	bl	80002d4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d21d      	bcs.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e00f      	b.n	8001cd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d0c3      	beq.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff ff80 	bl	8001c3a <HAL_UART_ErrorCallback>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b21      	cmp	r3, #33	; 0x21
 8001d54:	d144      	bne.n	8001de0 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	d11a      	bne.n	8001d96 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d74:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	1c9a      	adds	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	621a      	str	r2, [r3, #32]
 8001d88:	e00e      	b.n	8001da8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	621a      	str	r2, [r3, #32]
 8001d94:	e008      	b.n	8001da8 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6211      	str	r1, [r2, #32]
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4619      	mov	r1, r3
 8001db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff0b 	bl	8001c28 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b22      	cmp	r3, #34	; 0x22
 8001e2e:	d171      	bne.n	8001f14 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e38:	d123      	bne.n	8001e82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10e      	bne.n	8001e66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	1c9a      	adds	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
 8001e64:	e029      	b.n	8001eba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e80:	e01b      	b.n	8001eba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6858      	ldr	r0, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	1c59      	adds	r1, r3, #1
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6291      	str	r1, [r2, #40]	; 0x28
 8001e9a:	b2c2      	uxtb	r2, r0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e00c      	b.n	8001eba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	1c58      	adds	r0, r3, #1
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	6288      	str	r0, [r1, #40]	; 0x28
 8001eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d120      	bne.n	8001f10 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0220 	bic.w	r2, r2, #32
 8001edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eec:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f948 	bl	800219c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e002      	b.n	8001f16 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f62:	f023 030c 	bic.w	r3, r3, #12
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	68f9      	ldr	r1, [r7, #12]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6f      	ldr	r2, [pc, #444]	; (8002148 <UART_SetConfig+0x228>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d16b      	bne.n	8002068 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f90:	f7ff f956 	bl	8001240 <HAL_RCC_GetPCLK2Freq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009a      	lsls	r2, r3, #2
 8001f9e:	441a      	add	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4a68      	ldr	r2, [pc, #416]	; (800214c <UART_SetConfig+0x22c>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	011c      	lsls	r4, r3, #4
 8001fb4:	f7ff f944 	bl	8001240 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009a      	lsls	r2, r3, #2
 8001fc2:	441a      	add	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fce:	f7ff f937 	bl	8001240 <HAL_RCC_GetPCLK2Freq>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	009a      	lsls	r2, r3, #2
 8001fdc:	441a      	add	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <UART_SetConfig+0x22c>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2264      	movs	r2, #100	; 0x64
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	1aeb      	subs	r3, r5, r3
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	3332      	adds	r3, #50	; 0x32
 8001ffc:	4a53      	ldr	r2, [pc, #332]	; (800214c <UART_SetConfig+0x22c>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002008:	441c      	add	r4, r3
 800200a:	f7ff f919 	bl	8001240 <HAL_RCC_GetPCLK2Freq>
 800200e:	4602      	mov	r2, r0
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fbb2 f5f3 	udiv	r5, r2, r3
 8002024:	f7ff f90c 	bl	8001240 <HAL_RCC_GetPCLK2Freq>
 8002028:	4602      	mov	r2, r0
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009a      	lsls	r2, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4a43      	ldr	r2, [pc, #268]	; (800214c <UART_SetConfig+0x22c>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	2264      	movs	r2, #100	; 0x64
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	1aeb      	subs	r3, r5, r3
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	3332      	adds	r3, #50	; 0x32
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <UART_SetConfig+0x22c>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4422      	add	r2, r4
 8002064:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002066:	e06a      	b.n	800213e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002068:	f7ff f8d6 	bl	8001218 <HAL_RCC_GetPCLK1Freq>
 800206c:	4602      	mov	r2, r0
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009a      	lsls	r2, r3, #2
 8002076:	441a      	add	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <UART_SetConfig+0x22c>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	011c      	lsls	r4, r3, #4
 800208c:	f7ff f8c4 	bl	8001218 <HAL_RCC_GetPCLK1Freq>
 8002090:	4602      	mov	r2, r0
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80020a6:	f7ff f8b7 	bl	8001218 <HAL_RCC_GetPCLK1Freq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	009a      	lsls	r2, r3, #2
 80020b4:	441a      	add	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <UART_SetConfig+0x22c>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2264      	movs	r2, #100	; 0x64
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	1aeb      	subs	r3, r5, r3
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	3332      	adds	r3, #50	; 0x32
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <UART_SetConfig+0x22c>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	441c      	add	r4, r3
 80020e2:	f7ff f899 	bl	8001218 <HAL_RCC_GetPCLK1Freq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80020fc:	f7ff f88c 	bl	8001218 <HAL_RCC_GetPCLK1Freq>
 8002100:	4602      	mov	r2, r0
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009a      	lsls	r2, r3, #2
 800210a:	441a      	add	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4a0d      	ldr	r2, [pc, #52]	; (800214c <UART_SetConfig+0x22c>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	2264      	movs	r2, #100	; 0x64
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	1aeb      	subs	r3, r5, r3
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	3332      	adds	r3, #50	; 0x32
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <UART_SetConfig+0x22c>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	f003 020f 	and.w	r2, r3, #15
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4422      	add	r2, r4
 800213c:	609a      	str	r2, [r3, #8]
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	bf00      	nop
 8002148:	40013800 	.word	0x40013800
 800214c:	51eb851f 	.word	0x51eb851f

08002150 <BoardInitialze>:
#include "board_init.h"
#include "wizchip_init.h"

void BoardInitialze(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
#else
	spiInitailize();
#endif
#endif

	W6100Initialze();
 8002154:	f000 fd50 	bl	8002bf8 <W6100Initialze>

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <_write>:
		#endif /* __GNUC__*/
#endif

#ifdef True_STD
	int _write(int fd, char *str, int len)
	{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
		for(int i=0; i<len; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e00b      	b.n	8002186 <_write+0x2a>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)&str[i], 1, 0xFFFF);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	18d1      	adds	r1, r2, r3
 8002174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002178:	2201      	movs	r2, #1
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <_write+0x3c>)
 800217c:	f7ff fb6b 	bl	8001856 <HAL_UART_Transmit>
		for(int i=0; i<len; i++)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	dbef      	blt.n	800216e <_write+0x12>
		}
		return len;
 800218e:	687b      	ldr	r3, [r7, #4]
	}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200009cc 	.word	0x200009cc

0800219c <HAL_UART_RxCpltCallback>:
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    */

     /*
       loop back received data
     */
     HAL_UART_Receive_IT(&huart1, rxData, 1);
 80021a4:	2201      	movs	r2, #1
 80021a6:	4907      	ldr	r1, [pc, #28]	; (80021c4 <HAL_UART_RxCpltCallback+0x28>)
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <HAL_UART_RxCpltCallback+0x2c>)
 80021aa:	f7ff fbed 	bl	8001988 <HAL_UART_Receive_IT>
     HAL_UART_Transmit(&huart1, rxData, 1, 1000);
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	2201      	movs	r2, #1
 80021b4:	4903      	ldr	r1, [pc, #12]	; (80021c4 <HAL_UART_RxCpltCallback+0x28>)
 80021b6:	4804      	ldr	r0, [pc, #16]	; (80021c8 <HAL_UART_RxCpltCallback+0x2c>)
 80021b8:	f7ff fb4d 	bl	8001856 <HAL_UART_Transmit>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000170 	.word	0x20000170
 80021c8:	200009cc 	.word	0x200009cc

080021cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t syslock = SYS_NET_LOCK;
 80021d2:	2302      	movs	r3, #2
 80021d4:	71fb      	strb	r3, [r7, #7]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d6:	f7fe f825 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021da:	f000 f85b 	bl	8002294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021de:	f000 f8ff 	bl	80023e0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80021e2:	f000 f89d 	bl	8002320 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80021e6:	f000 f8d1 	bl	800238c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rxData, 1);
 80021ea:	2201      	movs	r2, #1
 80021ec:	4922      	ldr	r1, [pc, #136]	; (8002278 <main+0xac>)
 80021ee:	4823      	ldr	r0, [pc, #140]	; (800227c <main+0xb0>)
 80021f0:	f7ff fbca 	bl	8001988 <HAL_UART_Receive_IT>

  printf("< W6100EVB Hal Driver Loop Back TEST!! >\n");
 80021f4:	4822      	ldr	r0, [pc, #136]	; (8002280 <main+0xb4>)
 80021f6:	f003 f8d5 	bl	80053a4 <puts>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	4821      	ldr	r0, [pc, #132]	; (8002284 <main+0xb8>)
 8002200:	f7fe fc14 	bl	8000a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002204:	2201      	movs	r2, #1
 8002206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <main+0xb8>)
 800220c:	f7fe fc0e 	bl	8000a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002216:	481b      	ldr	r0, [pc, #108]	; (8002284 <main+0xb8>)
 8002218:	f7fe fc08 	bl	8000a2c <HAL_GPIO_WritePin>

  BoardInitialze();
 800221c:	f7ff ff98 	bl	8002150 <BoardInitialze>
  ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	4619      	mov	r1, r3
 8002224:	2001      	movs	r0, #1
 8002226:	f002 f94f 	bl	80044c8 <ctlwizchip>
  ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 800222a:	4917      	ldr	r1, [pc, #92]	; (8002288 <main+0xbc>)
 800222c:	2000      	movs	r0, #0
 800222e:	f002 fadb 	bl	80047e8 <ctlnetwork>

  printf("VERSION(%x) = %.2x \r\n", _VER_,getVER());
 8002232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002236:	f000 ff6f 	bl	8003118 <WIZCHIP_READ>
 800223a:	4603      	mov	r3, r0
 800223c:	021c      	lsls	r4, r3, #8
 800223e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002242:	f000 ff69 	bl	8003118 <WIZCHIP_READ>
 8002246:	4603      	mov	r3, r0
 8002248:	4423      	add	r3, r4
 800224a:	461a      	mov	r2, r3
 800224c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002250:	480e      	ldr	r0, [pc, #56]	; (800228c <main+0xc0>)
 8002252:	f003 f833 	bl	80052bc <iprintf>
  print_network_information();
 8002256:	f000 f941 	bl	80024dc <print_network_information>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loopback_tcps(0, data_buf, 5000, AS_IPV6);
 800225a:	2317      	movs	r3, #23
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	490b      	ldr	r1, [pc, #44]	; (8002290 <main+0xc4>)
 8002262:	2000      	movs	r0, #0
 8002264:	f000 fdae 	bl	8002dc4 <loopback_tcps>
	loopback_tcps(1, data_buf, 5001, AS_IPV4);
 8002268:	2302      	movs	r3, #2
 800226a:	f241 3289 	movw	r2, #5001	; 0x1389
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <main+0xc4>)
 8002270:	2001      	movs	r0, #1
 8002272:	f000 fda7 	bl	8002dc4 <loopback_tcps>
	loopback_tcps(0, data_buf, 5000, AS_IPV6);
 8002276:	e7f0      	b.n	800225a <main+0x8e>
 8002278:	20000170 	.word	0x20000170
 800227c:	200009cc 	.word	0x200009cc
 8002280:	0800618c 	.word	0x0800618c
 8002284:	40011000 	.word	0x40011000
 8002288:	20000008 	.word	0x20000008
 800228c:	080061b8 	.word	0x080061b8
 8002290:	200001cc 	.word	0x200001cc

08002294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b090      	sub	sp, #64	; 0x40
 8002298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	2228      	movs	r2, #40	; 0x28
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f802 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c8:	2302      	movs	r3, #2
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80022d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fbbd 	bl	8000a5c <HAL_RCC_OscConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022e8:	f000 facc 	bl	8002884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ec:	230f      	movs	r3, #15
 80022ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f0:	2302      	movs	r3, #2
 80022f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fe0c 	bl	8000f24 <HAL_RCC_ClockConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002312:	f000 fab7 	bl	8002884 <Error_Handler>
  }
}
 8002316:	bf00      	nop
 8002318:	3740      	adds	r7, #64	; 0x40
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <MX_SPI2_Init+0x64>)
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <MX_SPI2_Init+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_SPI2_Init+0x64>)
 800232c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002330:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_SPI2_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_SPI2_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_SPI2_Init+0x64>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_SPI2_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_SPI2_Init+0x64>)
 800234c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002350:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_SPI2_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <MX_SPI2_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_SPI2_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <MX_SPI2_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_SPI2_Init+0x64>)
 800236c:	220a      	movs	r2, #10
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_SPI2_Init+0x64>)
 8002372:	f7ff f9be 	bl	80016f2 <HAL_SPI_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800237c:	f000 fa82 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000174 	.word	0x20000174
 8002388:	40003800 	.word	0x40003800

0800238c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_USART1_UART_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023c4:	f7ff f9fa 	bl	80017bc <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ce:	f000 fa59 	bl	8002884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200009cc 	.word	0x200009cc
 80023dc:	40013800 	.word	0x40013800

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <MX_GPIO_Init+0xe8>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <MX_GPIO_Init+0xe8>)
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <MX_GPIO_Init+0xe8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <MX_GPIO_Init+0xe8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <MX_GPIO_Init+0xe8>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <MX_GPIO_Init+0xe8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <MX_GPIO_Init+0xe8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <MX_GPIO_Init+0xe8>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <MX_GPIO_Init+0xe8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <MX_GPIO_Init+0xe8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <MX_GPIO_Init+0xe8>)
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <MX_GPIO_Init+0xe8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 7150 	mov.w	r1, #832	; 0x340
 800245a:	481c      	ldr	r0, [pc, #112]	; (80024cc <MX_GPIO_Init+0xec>)
 800245c:	f7fe fae6 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	481a      	ldr	r0, [pc, #104]	; (80024d0 <MX_GPIO_Init+0xf0>)
 8002466:	f7fe fae1 	bl	8000a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 800246a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800246e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_GPIO_Init+0xf4>)
 8002472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	4619      	mov	r1, r3
 800247e:	4816      	ldr	r0, [pc, #88]	; (80024d8 <MX_GPIO_Init+0xf8>)
 8002480:	f7fe f966 	bl	8000750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002484:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2302      	movs	r3, #2
 8002494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	4619      	mov	r1, r3
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <MX_GPIO_Init+0xec>)
 800249e:	f7fe f957 	bl	8000750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_GPIO_Init+0xf0>)
 80024ba:	f7fe f949 	bl	8000750 <HAL_GPIO_Init>

}
 80024be:	bf00      	nop
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	10110000 	.word	0x10110000
 80024d8:	40010c00 	.word	0x40010c00

080024dc <print_network_information>:

		return ch;
 }
#endif
void print_network_information(void)
{
 80024dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e0:	b094      	sub	sp, #80	; 0x50
 80024e2:	af0e      	add	r7, sp, #56	; 0x38
	wizchip_getnetinfo(&gWIZNETINFO);
 80024e4:	48a4      	ldr	r0, [pc, #656]	; (8002778 <print_network_information+0x29c>)
 80024e6:	f002 fd5b 	bl	8004fa0 <wizchip_getnetinfo>
	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 80024ea:	4ba3      	ldr	r3, [pc, #652]	; (8002778 <print_network_information+0x29c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	4ba1      	ldr	r3, [pc, #644]	; (8002778 <print_network_information+0x29c>)
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	461c      	mov	r4, r3
 80024f6:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <print_network_information+0x29c>)
 80024f8:	789b      	ldrb	r3, [r3, #2]
 80024fa:	461d      	mov	r5, r3
 80024fc:	4b9e      	ldr	r3, [pc, #632]	; (8002778 <print_network_information+0x29c>)
 80024fe:	78db      	ldrb	r3, [r3, #3]
 8002500:	461a      	mov	r2, r3
 8002502:	4b9d      	ldr	r3, [pc, #628]	; (8002778 <print_network_information+0x29c>)
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	4619      	mov	r1, r3
 8002508:	4b9b      	ldr	r3, [pc, #620]	; (8002778 <print_network_information+0x29c>)
 800250a:	795b      	ldrb	r3, [r3, #5]
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	9101      	str	r1, [sp, #4]
 8002510:	9200      	str	r2, [sp, #0]
 8002512:	462b      	mov	r3, r5
 8002514:	4622      	mov	r2, r4
 8002516:	4601      	mov	r1, r0
 8002518:	4898      	ldr	r0, [pc, #608]	; (800277c <print_network_information+0x2a0>)
 800251a:	f002 fecf 	bl	80052bc <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800251e:	4b96      	ldr	r3, [pc, #600]	; (8002778 <print_network_information+0x29c>)
 8002520:	799b      	ldrb	r3, [r3, #6]
 8002522:	4619      	mov	r1, r3
 8002524:	4b94      	ldr	r3, [pc, #592]	; (8002778 <print_network_information+0x29c>)
 8002526:	79db      	ldrb	r3, [r3, #7]
 8002528:	461a      	mov	r2, r3
 800252a:	4b93      	ldr	r3, [pc, #588]	; (8002778 <print_network_information+0x29c>)
 800252c:	7a1b      	ldrb	r3, [r3, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	4b91      	ldr	r3, [pc, #580]	; (8002778 <print_network_information+0x29c>)
 8002532:	7a5b      	ldrb	r3, [r3, #9]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	4603      	mov	r3, r0
 8002538:	4891      	ldr	r0, [pc, #580]	; (8002780 <print_network_information+0x2a4>)
 800253a:	f002 febf 	bl	80052bc <iprintf>
	printf("SN Mask	   : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800253e:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <print_network_information+0x29c>)
 8002540:	7a9b      	ldrb	r3, [r3, #10]
 8002542:	4619      	mov	r1, r3
 8002544:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <print_network_information+0x29c>)
 8002546:	7adb      	ldrb	r3, [r3, #11]
 8002548:	461a      	mov	r2, r3
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <print_network_information+0x29c>)
 800254c:	7b1b      	ldrb	r3, [r3, #12]
 800254e:	4618      	mov	r0, r3
 8002550:	4b89      	ldr	r3, [pc, #548]	; (8002778 <print_network_information+0x29c>)
 8002552:	7b5b      	ldrb	r3, [r3, #13]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4603      	mov	r3, r0
 8002558:	488a      	ldr	r0, [pc, #552]	; (8002784 <print_network_information+0x2a8>)
 800255a:	f002 feaf 	bl	80052bc <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800255e:	4b86      	ldr	r3, [pc, #536]	; (8002778 <print_network_information+0x29c>)
 8002560:	7b9b      	ldrb	r3, [r3, #14]
 8002562:	4619      	mov	r1, r3
 8002564:	4b84      	ldr	r3, [pc, #528]	; (8002778 <print_network_information+0x29c>)
 8002566:	7bdb      	ldrb	r3, [r3, #15]
 8002568:	461a      	mov	r2, r3
 800256a:	4b83      	ldr	r3, [pc, #524]	; (8002778 <print_network_information+0x29c>)
 800256c:	7c1b      	ldrb	r3, [r3, #16]
 800256e:	4618      	mov	r0, r3
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <print_network_information+0x29c>)
 8002572:	7c5b      	ldrb	r3, [r3, #17]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4603      	mov	r3, r0
 8002578:	4883      	ldr	r0, [pc, #524]	; (8002788 <print_network_information+0x2ac>)
 800257a:	f002 fe9f 	bl	80052bc <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 800257e:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <print_network_information+0x29c>)
 8002580:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002584:	4619      	mov	r1, r3
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <print_network_information+0x29c>)
 8002588:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800258c:	461a      	mov	r2, r3
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <print_network_information+0x29c>)
 8002590:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002594:	4618      	mov	r0, r3
 8002596:	4b78      	ldr	r3, [pc, #480]	; (8002778 <print_network_information+0x29c>)
 8002598:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4603      	mov	r3, r0
 80025a0:	487a      	ldr	r0, [pc, #488]	; (800278c <print_network_information+0x2b0>)
 80025a2:	f002 fe8b 	bl	80052bc <iprintf>
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025a6:	4b74      	ldr	r3, [pc, #464]	; (8002778 <print_network_information+0x29c>)
 80025a8:	7c9b      	ldrb	r3, [r3, #18]
 80025aa:	469c      	mov	ip, r3
 80025ac:	4b72      	ldr	r3, [pc, #456]	; (8002778 <print_network_information+0x29c>)
 80025ae:	7cdb      	ldrb	r3, [r3, #19]
 80025b0:	469e      	mov	lr, r3
 80025b2:	4b71      	ldr	r3, [pc, #452]	; (8002778 <print_network_information+0x29c>)
 80025b4:	7d1b      	ldrb	r3, [r3, #20]
 80025b6:	4698      	mov	r8, r3
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <print_network_information+0x29c>)
 80025ba:	7d5b      	ldrb	r3, [r3, #21]
 80025bc:	4618      	mov	r0, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80025be:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <print_network_information+0x29c>)
 80025c0:	7d9b      	ldrb	r3, [r3, #22]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025c2:	461c      	mov	r4, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80025c4:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <print_network_information+0x29c>)
 80025c6:	7ddb      	ldrb	r3, [r3, #23]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025c8:	461d      	mov	r5, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80025ca:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <print_network_information+0x29c>)
 80025cc:	7e1b      	ldrb	r3, [r3, #24]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025ce:	461e      	mov	r6, r3
									gWIZNETINFO.lla[4],gWIZNETINFO.lla[5],gWIZNETINFO.lla[6],gWIZNETINFO.lla[7],\
 80025d0:	4b69      	ldr	r3, [pc, #420]	; (8002778 <print_network_information+0x29c>)
 80025d2:	7e5b      	ldrb	r3, [r3, #25]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025d4:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <print_network_information+0x29c>)
 80025d8:	7e9b      	ldrb	r3, [r3, #26]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025da:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <print_network_information+0x29c>)
 80025de:	7edb      	ldrb	r3, [r3, #27]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025e0:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <print_network_information+0x29c>)
 80025e4:	7f1b      	ldrb	r3, [r3, #28]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025e6:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.lla[8],gWIZNETINFO.lla[9],gWIZNETINFO.lla[10],gWIZNETINFO.lla[11],\
 80025e8:	4b63      	ldr	r3, [pc, #396]	; (8002778 <print_network_information+0x29c>)
 80025ea:	7f5b      	ldrb	r3, [r3, #29]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025ec:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <print_network_information+0x29c>)
 80025f0:	7f9b      	ldrb	r3, [r3, #30]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025f2:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 80025f4:	4b60      	ldr	r3, [pc, #384]	; (8002778 <print_network_information+0x29c>)
 80025f6:	7fdb      	ldrb	r3, [r3, #31]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 80025f8:	4619      	mov	r1, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <print_network_information+0x29c>)
 80025fc:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002600:	461a      	mov	r2, r3
									gWIZNETINFO.lla[12],gWIZNETINFO.lla[13],gWIZNETINFO.lla[14],gWIZNETINFO.lla[15]);
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <print_network_information+0x29c>)
 8002604:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("LLA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.lla[0],gWIZNETINFO.lla[1],gWIZNETINFO.lla[2],gWIZNETINFO.lla[3],\
 8002608:	930c      	str	r3, [sp, #48]	; 0x30
 800260a:	920b      	str	r2, [sp, #44]	; 0x2c
 800260c:	910a      	str	r1, [sp, #40]	; 0x28
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	9209      	str	r2, [sp, #36]	; 0x24
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	9208      	str	r2, [sp, #32]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	9207      	str	r2, [sp, #28]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	9206      	str	r2, [sp, #24]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	9205      	str	r2, [sp, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9304      	str	r3, [sp, #16]
 8002626:	9603      	str	r6, [sp, #12]
 8002628:	9502      	str	r5, [sp, #8]
 800262a:	9401      	str	r4, [sp, #4]
 800262c:	9000      	str	r0, [sp, #0]
 800262e:	4643      	mov	r3, r8
 8002630:	4672      	mov	r2, lr
 8002632:	4661      	mov	r1, ip
 8002634:	4856      	ldr	r0, [pc, #344]	; (8002790 <print_network_information+0x2b4>)
 8002636:	f002 fe41 	bl	80052bc <iprintf>
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 800263a:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <print_network_information+0x29c>)
 800263c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002640:	469c      	mov	ip, r3
 8002642:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <print_network_information+0x29c>)
 8002644:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002648:	469e      	mov	lr, r3
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <print_network_information+0x29c>)
 800264c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002650:	4698      	mov	r8, r3
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <print_network_information+0x29c>)
 8002654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002658:	4618      	mov	r0, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <print_network_information+0x29c>)
 800265c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002660:	461c      	mov	r4, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 8002662:	4b45      	ldr	r3, [pc, #276]	; (8002778 <print_network_information+0x29c>)
 8002664:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002668:	461d      	mov	r5, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <print_network_information+0x29c>)
 800266c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002670:	461e      	mov	r6, r3
									gWIZNETINFO.gua[4],gWIZNETINFO.gua[5],gWIZNETINFO.gua[6],gWIZNETINFO.gua[7],\
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <print_network_information+0x29c>)
 8002674:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002678:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <print_network_information+0x29c>)
 800267c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002680:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <print_network_information+0x29c>)
 8002684:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002688:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <print_network_information+0x29c>)
 800268c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002690:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gua[8],gWIZNETINFO.gua[9],gWIZNETINFO.gua[10],gWIZNETINFO.gua[11],\
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <print_network_information+0x29c>)
 8002694:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 8002698:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <print_network_information+0x29c>)
 800269c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026a0:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80026a2:	4b35      	ldr	r3, [pc, #212]	; (8002778 <print_network_information+0x29c>)
 80026a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026a8:	4619      	mov	r1, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80026aa:	4b33      	ldr	r3, [pc, #204]	; (8002778 <print_network_information+0x29c>)
 80026ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026b0:	461a      	mov	r2, r3
									gWIZNETINFO.gua[12],gWIZNETINFO.gua[13],gWIZNETINFO.gua[14],gWIZNETINFO.gua[15]);
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <print_network_information+0x29c>)
 80026b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
	printf("GUA  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.gua[0],gWIZNETINFO.gua[1],gWIZNETINFO.gua[2],gWIZNETINFO.gua[3],\
 80026b8:	930c      	str	r3, [sp, #48]	; 0x30
 80026ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80026bc:	910a      	str	r1, [sp, #40]	; 0x28
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	9209      	str	r2, [sp, #36]	; 0x24
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	9208      	str	r2, [sp, #32]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	9207      	str	r2, [sp, #28]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	9206      	str	r2, [sp, #24]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	9205      	str	r2, [sp, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9304      	str	r3, [sp, #16]
 80026d6:	9603      	str	r6, [sp, #12]
 80026d8:	9502      	str	r5, [sp, #8]
 80026da:	9401      	str	r4, [sp, #4]
 80026dc:	9000      	str	r0, [sp, #0]
 80026de:	4643      	mov	r3, r8
 80026e0:	4672      	mov	r2, lr
 80026e2:	4661      	mov	r1, ip
 80026e4:	482b      	ldr	r0, [pc, #172]	; (8002794 <print_network_information+0x2b8>)
 80026e6:	f002 fde9 	bl	80052bc <iprintf>
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <print_network_information+0x29c>)
 80026ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80026f0:	469c      	mov	ip, r3
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <print_network_information+0x29c>)
 80026f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80026f8:	469e      	mov	lr, r3
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <print_network_information+0x29c>)
 80026fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002700:	4698      	mov	r8, r3
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <print_network_information+0x29c>)
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002708:	4618      	mov	r0, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <print_network_information+0x29c>)
 800270c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002710:	461c      	mov	r4, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <print_network_information+0x29c>)
 8002714:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002718:	461d      	mov	r5, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <print_network_information+0x29c>)
 800271c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002720:	461e      	mov	r6, r3
									gWIZNETINFO.sn6[4],gWIZNETINFO.sn6[5],gWIZNETINFO.sn6[6],gWIZNETINFO.sn6[7],\
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <print_network_information+0x29c>)
 8002724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002728:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <print_network_information+0x29c>)
 800272c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002730:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <print_network_information+0x29c>)
 8002734:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002738:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <print_network_information+0x29c>)
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002740:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.sn6[8],gWIZNETINFO.sn6[9],gWIZNETINFO.sn6[10],gWIZNETINFO.sn6[11],\
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <print_network_information+0x29c>)
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002748:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <print_network_information+0x29c>)
 800274c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002750:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <print_network_information+0x29c>)
 8002754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002758:	4619      	mov	r1, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <print_network_information+0x29c>)
 800275c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002760:	461a      	mov	r2, r3
									gWIZNETINFO.sn6[12],gWIZNETINFO.sn6[13],gWIZNETINFO.sn6[14],gWIZNETINFO.sn6[15]);
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <print_network_information+0x29c>)
 8002764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	printf("SN6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\n\r",gWIZNETINFO.sn6[0],gWIZNETINFO.sn6[1],gWIZNETINFO.sn6[2],gWIZNETINFO.sn6[3],\
 8002768:	930c      	str	r3, [sp, #48]	; 0x30
 800276a:	920b      	str	r2, [sp, #44]	; 0x2c
 800276c:	910a      	str	r1, [sp, #40]	; 0x28
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	9209      	str	r2, [sp, #36]	; 0x24
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	e010      	b.n	8002798 <print_network_information+0x2bc>
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008
 800277c:	080061d0 	.word	0x080061d0
 8002780:	08006200 	.word	0x08006200
 8002784:	0800621c 	.word	0x0800621c
 8002788:	08006238 	.word	0x08006238
 800278c:	08006254 	.word	0x08006254
 8002790:	08006270 	.word	0x08006270
 8002794:	080062c4 	.word	0x080062c4
 8002798:	9208      	str	r2, [sp, #32]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	9207      	str	r2, [sp, #28]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	9206      	str	r2, [sp, #24]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	9205      	str	r2, [sp, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9304      	str	r3, [sp, #16]
 80027aa:	9603      	str	r6, [sp, #12]
 80027ac:	9502      	str	r5, [sp, #8]
 80027ae:	9401      	str	r4, [sp, #4]
 80027b0:	9000      	str	r0, [sp, #0]
 80027b2:	4643      	mov	r3, r8
 80027b4:	4672      	mov	r2, lr
 80027b6:	4661      	mov	r1, ip
 80027b8:	482f      	ldr	r0, [pc, #188]	; (8002878 <print_network_information+0x39c>)
 80027ba:	f002 fd7f 	bl	80052bc <iprintf>
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <print_network_information+0x3a0>)
 80027c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c4:	469c      	mov	ip, r3
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <print_network_information+0x3a0>)
 80027c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027cc:	469e      	mov	lr, r3
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <print_network_information+0x3a0>)
 80027d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d4:	4698      	mov	r8, r3
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <print_network_information+0x3a0>)
 80027d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027dc:	4618      	mov	r0, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <print_network_information+0x3a0>)
 80027e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80027e4:	461c      	mov	r4, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <print_network_information+0x3a0>)
 80027e8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80027ec:	461d      	mov	r5, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <print_network_information+0x3a0>)
 80027f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80027f4:	461e      	mov	r6, r3
									gWIZNETINFO.gw6[4],gWIZNETINFO.gw6[5],gWIZNETINFO.gw6[6],gWIZNETINFO.gw6[7],\
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <print_network_information+0x3a0>)
 80027f8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 80027fc:	617b      	str	r3, [r7, #20]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <print_network_information+0x3a0>)
 8002800:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002804:	613b      	str	r3, [r7, #16]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <print_network_information+0x3a0>)
 8002808:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 800280c:	60fb      	str	r3, [r7, #12]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <print_network_information+0x3a0>)
 8002810:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002814:	60bb      	str	r3, [r7, #8]
									gWIZNETINFO.gw6[8],gWIZNETINFO.gw6[9],gWIZNETINFO.gw6[10],gWIZNETINFO.gw6[11],\
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <print_network_information+0x3a0>)
 8002818:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 800281c:	607b      	str	r3, [r7, #4]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <print_network_information+0x3a0>)
 8002820:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002824:	603b      	str	r3, [r7, #0]
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <print_network_information+0x3a0>)
 8002828:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 800282c:	4619      	mov	r1, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <print_network_information+0x3a0>)
 8002830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 8002834:	461a      	mov	r2, r3
									gWIZNETINFO.gw6[12],gWIZNETINFO.gw6[13],gWIZNETINFO.gw6[14],gWIZNETINFO.gw6[15]);
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <print_network_information+0x3a0>)
 8002838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
	printf("GW6  : %.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X:%.2X%.2X\r\n",gWIZNETINFO.gw6[0],gWIZNETINFO.gw6[1],gWIZNETINFO.gw6[2],gWIZNETINFO.gw6[3],\
 800283c:	930c      	str	r3, [sp, #48]	; 0x30
 800283e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002840:	910a      	str	r1, [sp, #40]	; 0x28
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	9209      	str	r2, [sp, #36]	; 0x24
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	9208      	str	r2, [sp, #32]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	9207      	str	r2, [sp, #28]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	9206      	str	r2, [sp, #24]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	9205      	str	r2, [sp, #20]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9304      	str	r3, [sp, #16]
 800285a:	9603      	str	r6, [sp, #12]
 800285c:	9502      	str	r5, [sp, #8]
 800285e:	9401      	str	r4, [sp, #4]
 8002860:	9000      	str	r0, [sp, #0]
 8002862:	4643      	mov	r3, r8
 8002864:	4672      	mov	r2, lr
 8002866:	4661      	mov	r1, ip
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <print_network_information+0x3a4>)
 800286a:	f002 fd27 	bl	80052bc <iprintf>


}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002878:	08006318 	.word	0x08006318
 800287c:	20000008 	.word	0x20000008
 8002880:	0800636c 	.word	0x0800636c

08002884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_MspInit+0x5c>)
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_MspInit+0x5c>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6193      	str	r3, [r2, #24]
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_MspInit+0x5c>)
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_MspInit+0x5c>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_MspInit+0x5c>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_MspInit+0x5c>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_MspInit+0x60>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_MspInit+0x60>)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010000 	.word	0x40010000

080028f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_SPI_MspInit+0x8c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d131      	bne.n	8002978 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_SPI_MspInit+0x90>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_SPI_MspInit+0x90>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	61d3      	str	r3, [r2, #28]
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_SPI_MspInit+0x90>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_SPI_MspInit+0x90>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_SPI_MspInit+0x90>)
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_SPI_MspInit+0x90>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002944:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4619      	mov	r1, r3
 8002958:	480b      	ldr	r0, [pc, #44]	; (8002988 <HAL_SPI_MspInit+0x94>)
 800295a:	f7fd fef9 	bl	8000750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800295e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	4619      	mov	r1, r3
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <HAL_SPI_MspInit+0x94>)
 8002974:	f7fd feec 	bl	8000750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002978:	bf00      	nop
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40003800 	.word	0x40003800
 8002984:	40021000 	.word	0x40021000
 8002988:	40010c00 	.word	0x40010c00

0800298c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <HAL_UART_MspInit+0x9c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d139      	bne.n	8002a20 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <HAL_UART_MspInit+0xa0>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_UART_MspInit+0xa0>)
 80029b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_UART_MspInit+0xa0>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_UART_MspInit+0xa0>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_UART_MspInit+0xa0>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_UART_MspInit+0xa0>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4619      	mov	r1, r3
 80029f0:	480f      	ldr	r0, [pc, #60]	; (8002a30 <HAL_UART_MspInit+0xa4>)
 80029f2:	f7fd fead 	bl	8000750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <HAL_UART_MspInit+0xa4>)
 8002a0c:	f7fd fea0 	bl	8000750 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	2025      	movs	r0, #37	; 0x25
 8002a16:	f7fd fd5c 	bl	80004d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a1a:	2025      	movs	r0, #37	; 0x25
 8002a1c:	f7fd fd75 	bl	800050a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010800 	.word	0x40010800

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <HardFault_Handler+0x4>

08002a46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <MemManage_Handler+0x4>

08002a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <BusFault_Handler+0x4>

08002a52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <UsageFault_Handler+0x4>

08002a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f7fd fc16 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <USART1_IRQHandler+0x10>)
 8002a8e:	f7fe ffcf 	bl	8001a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200009cc 	.word	0x200009cc

08002a9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e00a      	b.n	8002ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aae:	f3af 8000 	nop.w
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	60ba      	str	r2, [r7, #8]
 8002aba:	b2ca      	uxtb	r2, r1
 8002abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf0      	blt.n	8002aae <_read+0x12>
	}

return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afc:	605a      	str	r2, [r3, #4]
	return 0;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <_isatty>:

int _isatty(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
	return 1;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
	return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x50>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <_sbrk+0x16>
		heap_end = &end;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <_sbrk+0x50>)
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <_sbrk+0x54>)
 8002b4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <_sbrk+0x50>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <_sbrk+0x50>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	466a      	mov	r2, sp
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d907      	bls.n	8002b72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b62:	f002 fb79 	bl	8005258 <__errno>
 8002b66:	4602      	mov	r2, r0
 8002b68:	230c      	movs	r3, #12
 8002b6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	e006      	b.n	8002b80 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <_sbrk+0x50>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <_sbrk+0x50>)
 8002b7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2000012c 	.word	0x2000012c
 8002b8c:	20000a10 	.word	0x20000a10

08002b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <SystemInit+0x5c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <SystemInit+0x5c>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <SystemInit+0x5c>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4911      	ldr	r1, [pc, #68]	; (8002bec <SystemInit+0x5c>)
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <SystemInit+0x60>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <SystemInit+0x5c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <SystemInit+0x5c>)
 8002bb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <SystemInit+0x5c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <SystemInit+0x5c>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <SystemInit+0x5c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <SystemInit+0x5c>)
 8002bce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002bd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <SystemInit+0x5c>)
 8002bd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002bda:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SystemInit+0x64>)
 8002bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002be2:	609a      	str	r2, [r3, #8]
#endif 
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	f8ff0000 	.word	0xf8ff0000
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <W6100Initialze>:
#ifdef USE_STDPERIPH_DRIVER
DMA_InitTypeDef		DMA_RX_InitStructure, DMA_TX_InitStructure;
#elif defined USE_HAL_DRIVER
#endif
void W6100Initialze(void)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
	W6100Reset();
 8002bfe:	f000 f8ad 	bl	8002d5c <W6100Reset>
#if _WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_
/* SPI method callback registration */
	#if defined SPI_DMA
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, W6100SpiReadBurst, W6100SpiWriteBurst);
	#else
	reg_wizchip_spi_cbfunc(W6100SpiReadByte, W6100SpiWriteByte, 0, 0);
 8002c02:	2300      	movs	r3, #0
 8002c04:	2200      	movs	r2, #0
 8002c06:	491f      	ldr	r1, [pc, #124]	; (8002c84 <W6100Initialze+0x8c>)
 8002c08:	481f      	ldr	r0, [pc, #124]	; (8002c88 <W6100Initialze+0x90>)
 8002c0a:	f001 fc17 	bl	800443c <reg_wizchip_spi_cbfunc>
	#endif
	/* CS function register */
	reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 8002c0e:	491f      	ldr	r1, [pc, #124]	; (8002c8c <W6100Initialze+0x94>)
 8002c10:	481f      	ldr	r0, [pc, #124]	; (8002c90 <W6100Initialze+0x98>)
 8002c12:	f001 fbef 	bl	80043f4 <reg_wizchip_cs_cbfunc>
	reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
	#endif
#endif

	intr_kind temp;
	unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <W6100Initialze+0x9c>)
 8002c18:	1d3c      	adds	r4, r7, #4
 8002c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	do
	{
		if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	2017      	movs	r0, #23
 8002c28:	f001 fc4e 	bl	80044c8 <ctlwizchip>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d102      	bne.n	8002c3a <W6100Initialze+0x42>
		{
			printf("Unknown PHY link status.\r\n");
 8002c34:	4818      	ldr	r0, [pc, #96]	; (8002c98 <W6100Initialze+0xa0>)
 8002c36:	f002 fbb5 	bl	80053a4 <puts>
		}
	} while (temp == PHY_LINK_OFF);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <W6100Initialze+0x28>
	printf("PHY OK.\r\n");
 8002c40:	4816      	ldr	r0, [pc, #88]	; (8002c9c <W6100Initialze+0xa4>)
 8002c42:	f002 fbaf 	bl	80053a4 <puts>

	temp = IK_DEST_UNREACH;
 8002c46:	2302      	movs	r3, #2
 8002c48:	617b      	str	r3, [r7, #20]

	if (ctlwizchip(CW_INIT_WIZCHIP, (void *)W6100_AdrSet) == -1)
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	2004      	movs	r0, #4
 8002c50:	f001 fc3a 	bl	80044c8 <ctlwizchip>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d102      	bne.n	8002c62 <W6100Initialze+0x6a>
	{
		printf("W6100 initialized fail.\r\n");
 8002c5c:	4810      	ldr	r0, [pc, #64]	; (8002ca0 <W6100Initialze+0xa8>)
 8002c5e:	f002 fba1 	bl	80053a4 <puts>
	}

	if (ctlwizchip(CW_SET_INTRMASK, &temp) == -1)
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	2007      	movs	r0, #7
 8002c6a:	f001 fc2d 	bl	80044c8 <ctlwizchip>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d102      	bne.n	8002c7c <W6100Initialze+0x84>
	{
		printf("W6100 interrupt\r\n");
 8002c76:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <W6100Initialze+0xac>)
 8002c78:	f002 fb94 	bl	80053a4 <puts>
	}
	//printf("interrupt mask: %02x\r\n",getIMR());
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	08002cd5 	.word	0x08002cd5
 8002c88:	08002ca9 	.word	0x08002ca9
 8002c8c:	08002d15 	.word	0x08002d15
 8002c90:	08002cfd 	.word	0x08002cfd
 8002c94:	08006418 	.word	0x08006418
 8002c98:	080063c0 	.word	0x080063c0
 8002c9c:	080063dc 	.word	0x080063dc
 8002ca0:	080063e8 	.word	0x080063e8
 8002ca4:	08006404 	.word	0x08006404

08002ca8 <W6100SpiReadByte>:

uint8_t W6100SpiReadByte(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af02      	add	r7, sp, #8
	while (SPI_I2S_GetFlagStatus(W6100_SPI, SPI_I2S_FLAG_RXNE) == RESET);
	return SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx = 0, tx = 0xFF;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	23ff      	movs	r3, #255	; 0xff
 8002cb4:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&W6100_SPI, &tx, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8002cb6:	1dfa      	adds	r2, r7, #7
 8002cb8:	1db9      	adds	r1, r7, #6
 8002cba:	230a      	movs	r3, #10
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <W6100SpiReadByte+0x28>)
 8002cc2:	f7fe faef 	bl	80012a4 <HAL_SPI_TransmitReceive>
	return rx;
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
#elif defined USE_HAL_DRIVER

	// Sppi read
#endif
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000174 	.word	0x20000174

08002cd4 <W6100SpiWriteByte>:

void W6100SpiWriteByte(uint8_t byte)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
	SPI_I2S_ReceiveData(W6100_SPI);

#elif defined USE_HAL_DRIVER

	uint8_t rx;
	HAL_SPI_TransmitReceive(&W6100_SPI, &byte, &rx, W6100_SPI_SIZE, W6100_SPI_TIMEOUT);
 8002cde:	f107 020f 	add.w	r2, r7, #15
 8002ce2:	1df9      	adds	r1, r7, #7
 8002ce4:	230a      	movs	r3, #10
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <W6100SpiWriteByte+0x24>)
 8002cec:	f7fe fada 	bl	80012a4 <HAL_SPI_TransmitReceive>
#endif

}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000174 	.word	0x20000174

08002cfc <W6100CsEnable>:
#endif

}

inline void W6100CsEnable(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

	GPIO_ResetBits(W6100_CS_PORT, W6100_CS_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_CS_PORT, W6100_CS_PIN, GPIO_PIN_RESET);
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <W6100CsEnable+0x14>)
 8002d06:	f7fd fe91 	bl	8000a2c <HAL_GPIO_WritePin>
#endif

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40011400 	.word	0x40011400

08002d14 <W6100CsDisable>:

inline void W6100CsDisable(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0

	GPIO_SetBits(W6100_CS_PORT, W6100_CS_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_CS_PORT, W6100_CS_PIN, GPIO_PIN_SET);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <W6100CsDisable+0x14>)
 8002d1e:	f7fd fe85 	bl	8000a2c <HAL_GPIO_WritePin>
#endif

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40011400 	.word	0x40011400

08002d2c <W6100ResetAssert>:

inline void W6100ResetAssert(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0

	GPIO_ResetBits(W6100_RESET_PORT, W6100_RESET_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_RESET_PORT, W6100_RESET_PIN, GPIO_PIN_RESET);
 8002d30:	2200      	movs	r2, #0
 8002d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <W6100ResetAssert+0x14>)
 8002d38:	f7fd fe78 	bl	8000a2c <HAL_GPIO_WritePin>
#endif

}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40011400 	.word	0x40011400

08002d44 <W6100ResetDeassert>:

inline void W6100ResetDeassert(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0

	GPIO_SetBits(W6100_RESET_PORT, W6100_RESET_PIN);

#elif defined USE_HAL_DRIVER

	HAL_GPIO_WritePin(W6100_RESET_PORT, W6100_RESET_PIN, GPIO_PIN_SET);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4e:	4802      	ldr	r0, [pc, #8]	; (8002d58 <W6100ResetDeassert+0x14>)
 8002d50:	f7fd fe6c 	bl	8000a2c <HAL_GPIO_WritePin>
#endif

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40011400 	.word	0x40011400

08002d5c <W6100Reset>:

void W6100Reset(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	W6100ResetAssert();
	delay(10);
	W6100ResetDeassert();
	delay(10);
#elif defined USE_HAL_DRIVER
	W6100ResetAssert();
 8002d60:	f7ff ffe4 	bl	8002d2c <W6100ResetAssert>
	HAL_Delay(10);
 8002d64:	200a      	movs	r0, #10
 8002d66:	f7fd fabf 	bl	80002e8 <HAL_Delay>
	W6100ResetDeassert();
 8002d6a:	f7ff ffeb 	bl	8002d44 <W6100ResetDeassert>
	HAL_Delay(10);
 8002d6e:	200a      	movs	r0, #10
 8002d70:	f7fd faba 	bl	80002e8 <HAL_Delay>
#endif
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d7a:	e003      	b.n	8002d84 <LoopCopyDataInit>

08002d7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d82:	3104      	adds	r1, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d84:	480a      	ldr	r0, [pc, #40]	; (8002db0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d8c:	d3f6      	bcc.n	8002d7c <CopyDataInit>
  ldr r2, =_sbss
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d90:	e002      	b.n	8002d98 <LoopFillZerobss>

08002d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d94:	f842 3b04 	str.w	r3, [r2], #4

08002d98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d9c:	d3f9      	bcc.n	8002d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d9e:	f7ff fef7 	bl	8002b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da2:	f002 fa5f 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002da6:	f7ff fa11 	bl	80021cc <main>
  bx lr
 8002daa:	4770      	bx	lr
  ldr r3, =_sidata
 8002dac:	08006594 	.word	0x08006594
  ldr r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002db4:	20000110 	.word	0x20000110
  ldr r2, =_sbss
 8002db8:	20000110 	.word	0x20000110
  ldr r3, = _ebss
 8002dbc:	20000a10 	.word	0x20000a10

08002dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC1_2_IRQHandler>
	...

08002dc4 <loopback_tcps>:
uint8_t* msg_v4 = "IPv4 mode";
uint8_t* msg_v6 = "IPv6 mode";
uint8_t* msg_dual = "Dual IP mode";

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port, uint8_t loopback_mode)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6039      	str	r1, [r7, #0]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	80bb      	strh	r3, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71bb      	strb	r3, [r7, #6]
    int32_t ret;
    datasize_t sentsize=0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	83fb      	strh	r3, [r7, #30]
    int8_t status,inter;
    uint8_t tmp = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	777b      	strb	r3, [r7, #29]
    datasize_t received_size;
    uint8_t arg_tmp8;
    uint8_t* mode_msg;

    if(loopback_mode == AS_IPV4)
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d103      	bne.n	8002df2 <loopback_tcps+0x2e>
    {
       mode_msg = msg_v4;
 8002dea:	4bae      	ldr	r3, [pc, #696]	; (80030a4 <loopback_tcps+0x2e0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e009      	b.n	8002e06 <loopback_tcps+0x42>
    }else if(loopback_mode == AS_IPV6)
 8002df2:	79bb      	ldrb	r3, [r7, #6]
 8002df4:	2b17      	cmp	r3, #23
 8002df6:	d103      	bne.n	8002e00 <loopback_tcps+0x3c>
    {
       mode_msg = msg_v6;
 8002df8:	4bab      	ldr	r3, [pc, #684]	; (80030a8 <loopback_tcps+0x2e4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e002      	b.n	8002e06 <loopback_tcps+0x42>
    }else
    {
       mode_msg = msg_dual;
 8002e00:	4baa      	ldr	r3, [pc, #680]	; (80030ac <loopback_tcps+0x2e8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
    }
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        getsockopt(sn, SO_STATUS, &status);
 8002e06:	f107 0213 	add.w	r2, r7, #19
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	210a      	movs	r1, #10
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f8c2 	bl	8003f98 <getsockopt>
        switch(status)
 8002e14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002e18:	2b1c      	cmp	r3, #28
 8002e1a:	f200 8137 	bhi.w	800308c <loopback_tcps+0x2c8>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <loopback_tcps+0x60>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08003039 	.word	0x08003039
 8002e28:	0800308d 	.word	0x0800308d
 8002e2c:	0800308d 	.word	0x0800308d
 8002e30:	0800308d 	.word	0x0800308d
 8002e34:	0800308d 	.word	0x0800308d
 8002e38:	0800308d 	.word	0x0800308d
 8002e3c:	0800308d 	.word	0x0800308d
 8002e40:	0800308d 	.word	0x0800308d
 8002e44:	0800308d 	.word	0x0800308d
 8002e48:	0800308d 	.word	0x0800308d
 8002e4c:	0800308d 	.word	0x0800308d
 8002e50:	0800308d 	.word	0x0800308d
 8002e54:	0800308d 	.word	0x0800308d
 8002e58:	0800308d 	.word	0x0800308d
 8002e5c:	0800308d 	.word	0x0800308d
 8002e60:	0800308d 	.word	0x0800308d
 8002e64:	0800308d 	.word	0x0800308d
 8002e68:	0800308d 	.word	0x0800308d
 8002e6c:	0800308d 	.word	0x0800308d
 8002e70:	08003015 	.word	0x08003015
 8002e74:	0800308d 	.word	0x0800308d
 8002e78:	0800308d 	.word	0x0800308d
 8002e7c:	0800308d 	.word	0x0800308d
 8002e80:	08002e99 	.word	0x08002e99
 8002e84:	0800308d 	.word	0x0800308d
 8002e88:	0800308d 	.word	0x0800308d
 8002e8c:	0800308d 	.word	0x0800308d
 8002e90:	0800308d 	.word	0x0800308d
 8002e94:	08002f65 	.word	0x08002f65
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 8002e98:	f107 0212 	add.w	r2, r7, #18
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	2105      	movs	r1, #5
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 ff89 	bl	8003db8 <ctlsocket>
            if(inter & Sn_IR_CON)
 8002ea6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <loopback_tcps+0x102>
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
                printf("Peer Port : %d\r\n", dst_port);
            #endif
                arg_tmp8 = Sn_IR_CON;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 8002eb8:	f107 020f 	add.w	r2, r7, #15
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 ff79 	bl	8003db8 <ctlsocket>
            }
            getsockopt(sn,SO_RECVBUF,&received_size);
 8002ec6:	f107 0210 	add.w	r2, r7, #16
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	2109      	movs	r1, #9
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 f862 	bl	8003f98 <getsockopt>

            if(received_size > 0){
 8002ed4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f340 80d9 	ble.w	8003090 <loopback_tcps+0x2cc>
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8002ede:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee6:	dd02      	ble.n	8002eee <loopback_tcps+0x12a>
 8002ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eec:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 8002eee:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fede 	bl	8003cb8 <recv>
 8002efc:	4603      	mov	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	dc01      	bgt.n	8002f0a <loopback_tcps+0x146>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	e0c8      	b.n	800309c <loopback_tcps+0x2d8>
                received_size = (uint16_t) ret;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 8002f14:	e01f      	b.n	8002f56 <loopback_tcps+0x192>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8002f16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	18d1      	adds	r1, r2, r3
 8002f1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	8bfb      	ldrh	r3, [r7, #30]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fde0 	bl	8003af4 <send>
 8002f34:	4603      	mov	r3, r0
 8002f36:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da05      	bge.n	8002f4a <loopback_tcps+0x186>
                    {
                        close(sn);
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fcad 	bl	80038a0 <close>
                        return ret;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	e0a8      	b.n	800309c <loopback_tcps+0x2d8>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	8bfb      	ldrh	r3, [r7, #30]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 8002f56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f5a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d1d9      	bne.n	8002f16 <loopback_tcps+0x152>
                }
            }
            break;
 8002f62:	e095      	b.n	8003090 <loopback_tcps+0x2cc>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 8002f64:	f107 0210 	add.w	r2, r7, #16
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	2109      	movs	r1, #9
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f813 	bl	8003f98 <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8002f72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dd41      	ble.n	8002ffe <loopback_tcps+0x23a>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8002f7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	dd02      	ble.n	8002f8a <loopback_tcps+0x1c6>
 8002f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f88:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 8002f8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	6839      	ldr	r1, [r7, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fe90 	bl	8003cb8 <recv>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	dc01      	bgt.n	8002fa6 <loopback_tcps+0x1e2>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	e07a      	b.n	800309c <loopback_tcps+0x2d8>
                received_size = (uint16_t) ret;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 8002fb0:	e01f      	b.n	8002ff2 <loopback_tcps+0x22e>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8002fb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	18d1      	adds	r1, r2, r3
 8002fba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	8bfb      	ldrh	r3, [r7, #30]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	b21a      	sxth	r2, r3
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fd92 	bl	8003af4 <send>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da05      	bge.n	8002fe6 <loopback_tcps+0x222>
                    {
                        close(sn);
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc5f 	bl	80038a0 <close>
                        return ret;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	e05a      	b.n	800309c <loopback_tcps+0x2d8>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	8bfb      	ldrh	r3, [r7, #30]
 8002fec:	4413      	add	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 8002ff2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ff6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d1d9      	bne.n	8002fb2 <loopback_tcps+0x1ee>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fd05 	bl	8003a10 <disconnect>
 8003006:	4603      	mov	r3, r0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d041      	beq.n	8003094 <loopback_tcps+0x2d0>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	e043      	b.n	800309c <loopback_tcps+0x2d8>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
                #endif
            break;
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fcb0 	bl	800397c <listen>
 800301c:	4603      	mov	r3, r0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <loopback_tcps+0x266>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e038      	b.n	800309c <loopback_tcps+0x2d8>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
                #endif
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 800302a:	79f9      	ldrb	r1, [r7, #7]
 800302c:	88ba      	ldrh	r2, [r7, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	481f      	ldr	r0, [pc, #124]	; (80030b0 <loopback_tcps+0x2ec>)
 8003032:	f002 f943 	bl	80052bc <iprintf>
            break;
 8003036:	e030      	b.n	800309a <loopback_tcps+0x2d6>
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
            #endif
                switch(loopback_mode)
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	2b0b      	cmp	r3, #11
 800303c:	d016      	beq.n	800306c <loopback_tcps+0x2a8>
 800303e:	2b17      	cmp	r3, #23
 8003040:	d00b      	beq.n	800305a <loopback_tcps+0x296>
 8003042:	2b02      	cmp	r3, #2
 8003044:	d000      	beq.n	8003048 <loopback_tcps+0x284>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 8003046:	e01a      	b.n	800307e <loopback_tcps+0x2ba>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 8003048:	88ba      	ldrh	r2, [r7, #4]
 800304a:	79f8      	ldrb	r0, [r7, #7]
 800304c:	2301      	movs	r3, #1
 800304e:	2101      	movs	r1, #1
 8003050:	f000 fa32 	bl	80034b8 <socket>
 8003054:	4603      	mov	r3, r0
 8003056:	777b      	strb	r3, [r7, #29]
                    break;
 8003058:	e011      	b.n	800307e <loopback_tcps+0x2ba>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 800305a:	88ba      	ldrh	r2, [r7, #4]
 800305c:	79f8      	ldrb	r0, [r7, #7]
 800305e:	2301      	movs	r3, #1
 8003060:	2109      	movs	r1, #9
 8003062:	f000 fa29 	bl	80034b8 <socket>
 8003066:	4603      	mov	r3, r0
 8003068:	777b      	strb	r3, [r7, #29]
                    break;
 800306a:	e008      	b.n	800307e <loopback_tcps+0x2ba>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 800306c:	88ba      	ldrh	r2, [r7, #4]
 800306e:	79f8      	ldrb	r0, [r7, #7]
 8003070:	2301      	movs	r3, #1
 8003072:	210d      	movs	r1, #13
 8003074:	f000 fa20 	bl	80034b8 <socket>
 8003078:	4603      	mov	r3, r0
 800307a:	777b      	strb	r3, [r7, #29]
                    break;
 800307c:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 800307e:	7f7a      	ldrb	r2, [r7, #29]
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	429a      	cmp	r2, r3
 8003084:	d008      	beq.n	8003098 <loopback_tcps+0x2d4>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
                    #endif
                    return SOCKERR_SOCKNUM;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e007      	b.n	800309c <loopback_tcps+0x2d8>
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
                sock_state[sn] = 1;
            #endif
            break;
        default:
            break;
 800308c:	bf00      	nop
 800308e:	e004      	b.n	800309a <loopback_tcps+0x2d6>
            break;
 8003090:	bf00      	nop
 8003092:	e002      	b.n	800309a <loopback_tcps+0x2d6>
            break;
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <loopback_tcps+0x2d6>
            break;
 8003098:	bf00      	nop
        }
    return 1;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000074 	.word	0x20000074
 80030a8:	20000078 	.word	0x20000078
 80030ac:	2000007c 	.word	0x2000007c
 80030b0:	08006450 	.word	0x08006450

080030b4 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0c1b      	lsrs	r3, r3, #16
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <WIZCHIP_WRITE+0x60>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <WIZCHIP_WRITE+0x60>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 80030e6:	7bbb      	ldrb	r3, [r7, #14]
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	73bb      	strb	r3, [r7, #14]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <WIZCHIP_WRITE+0x60>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f107 020c 	add.w	r2, r7, #12
 80030f8:	2104      	movs	r1, #4
 80030fa:	4610      	mov	r0, r2
 80030fc:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <WIZCHIP_WRITE+0x60>)
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <WIZCHIP_WRITE+0x60>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4798      	blx	r3
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000084 	.word	0x20000084

08003118 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	b2db      	uxtb	r3, r3
 8003126:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b2db      	uxtb	r3, r3
 800312e:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <WIZCHIP_READ+0x5c>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <WIZCHIP_READ+0x5c>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
 8003142:	7bbb      	ldrb	r3, [r7, #14]
 8003144:	73bb      	strb	r3, [r7, #14]
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <WIZCHIP_READ+0x5c>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f107 020c 	add.w	r2, r7, #12
 800314e:	2103      	movs	r1, #3
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <WIZCHIP_READ+0x5c>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4798      	blx	r3
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <WIZCHIP_READ+0x5c>)
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <WIZCHIP_READ+0x5c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4798      	blx	r3
   return ret;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000084 	.word	0x20000084

08003178 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	b2db      	uxtb	r3, r3
 800318c:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	b2db      	uxtb	r3, r3
 8003194:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <WIZCHIP_WRITE_BUF+0x6c>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <WIZCHIP_WRITE_BUF+0x6c>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
 80031a8:	7dbb      	ldrb	r3, [r7, #22]
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	75bb      	strb	r3, [r7, #22]

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <WIZCHIP_WRITE_BUF+0x6c>)
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f107 0214 	add.w	r2, r7, #20
 80031ba:	2103      	movs	r1, #3
 80031bc:	4610      	mov	r0, r2
 80031be:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <WIZCHIP_WRITE_BUF+0x6c>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031c8:	4611      	mov	r1, r2
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <WIZCHIP_WRITE_BUF+0x6c>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <WIZCHIP_WRITE_BUF+0x6c>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4798      	blx	r3
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000084 	.word	0x20000084

080031e8 <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	b2db      	uxtb	r3, r3
 8003204:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <WIZCHIP_READ_BUF+0x64>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <WIZCHIP_READ_BUF+0x64>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
 8003218:	7dbb      	ldrb	r3, [r7, #22]
 800321a:	75bb      	strb	r3, [r7, #22]
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <WIZCHIP_READ_BUF+0x64>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f107 0214 	add.w	r2, r7, #20
 8003224:	2103      	movs	r1, #3
 8003226:	4610      	mov	r0, r2
 8003228:	4798      	blx	r3
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <WIZCHIP_READ_BUF+0x64>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003232:	4611      	mov	r1, r2
 8003234:	68b8      	ldr	r0, [r7, #8]
 8003236:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <WIZCHIP_READ_BUF+0x64>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800323e:	4b03      	ldr	r3, [pc, #12]	; (800324c <WIZCHIP_READ_BUF+0x64>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4798      	blx	r3
}
 8003244:	bf00      	nop
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000084 	.word	0x20000084

08003250 <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 800325a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800325e:	81bb      	strh	r3, [r7, #12]
 8003260:	2300      	movs	r3, #0
 8003262:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 8003264:	89fb      	ldrh	r3, [r7, #14]
 8003266:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3301      	adds	r3, #1
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff4f 	bl	8003118 <WIZCHIP_READ>
 800327a:	4603      	mov	r3, r0
 800327c:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 800327e:	89fb      	ldrh	r3, [r7, #14]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	b29c      	uxth	r4, r3
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	3301      	adds	r3, #1
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8003290:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff3f 	bl	8003118 <WIZCHIP_READ>
 800329a:	4603      	mov	r3, r0
 800329c:	b29b      	uxth	r3, r3
 800329e:	4423      	add	r3, r4
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 80032a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80032a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1d9      	bne.n	8003264 <getSn_TX_FSR+0x14>
   return val;
 80032b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}

080032bc <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 80032c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ca:	81bb      	strh	r3, [r7, #12]
 80032cc:	2300      	movs	r3, #0
 80032ce:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	3301      	adds	r3, #1
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff19 	bl	8003118 <WIZCHIP_READ>
 80032e6:	4603      	mov	r3, r0
 80032e8:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b29c      	uxth	r4, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	3301      	adds	r3, #1
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80032fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff09 	bl	8003118 <WIZCHIP_READ>
 8003306:	4603      	mov	r3, r0
 8003308:	b29b      	uxth	r3, r3
 800330a:	4423      	add	r3, r4
 800330c:	b29b      	uxth	r3, r3
 800330e:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 8003310:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003314:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d1d9      	bne.n	80032d0 <getSn_RX_RSR+0x14>
   return val;
 800331c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}

08003328 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	71fb      	strb	r3, [r7, #7]
 8003334:	4613      	mov	r3, r2
 8003336:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
   ptr = getSn_TX_WR(sn);
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3301      	adds	r3, #1
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fee3 	bl	8003118 <WIZCHIP_READ>
 8003352:	4603      	mov	r3, r0
 8003354:	b29b      	uxth	r3, r3
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	b29c      	uxth	r4, r3
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	3301      	adds	r3, #1
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8003366:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fed4 	bl	8003118 <WIZCHIP_READ>
 8003370:	4603      	mov	r3, r0
 8003372:	b29b      	uxth	r3, r3
 8003374:	4423      	add	r3, r4
 8003376:	b29b      	uxth	r3, r3
 8003378:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 800337a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	79fa      	ldrb	r2, [r7, #7]
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	3202      	adds	r2, #2
 8003386:	00d2      	lsls	r2, r2, #3
 8003388:	4413      	add	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800338c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003390:	461a      	mov	r2, r3
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	68b8      	ldr	r0, [r7, #8]
 8003396:	f7ff feef 	bl	8003178 <WIZCHIP_WRITE_BUF>
   ptr += len;
 800339a:	89fa      	ldrh	r2, [r7, #14]
 800339c:	88bb      	ldrh	r3, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	3301      	adds	r3, #1
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80033b0:	461a      	mov	r2, r3
 80033b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033b6:	121b      	asrs	r3, r3, #8
 80033b8:	b21b      	sxth	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff fe78 	bl	80030b4 <WIZCHIP_WRITE>
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3301      	adds	r3, #1
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80033d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033d4:	461a      	mov	r2, r3
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7ff fe69 	bl	80030b4 <WIZCHIP_WRITE>
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	6039      	str	r1, [r7, #0]
 80033f4:	71fb      	strb	r3, [r7, #7]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 8003402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d051      	beq.n	80034ae <wiz_recv_data+0xc4>
   ptr = getSn_RX_RD(sn);
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3301      	adds	r3, #1
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fe7e 	bl	8003118 <WIZCHIP_READ>
 800341c:	4603      	mov	r3, r0
 800341e:	b29b      	uxth	r3, r3
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	b29c      	uxth	r4, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3301      	adds	r3, #1
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8003430:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fe6f 	bl	8003118 <WIZCHIP_READ>
 800343a:	4603      	mov	r3, r0
 800343c:	b29b      	uxth	r3, r3
 800343e:	4423      	add	r3, r4
 8003440:	b29b      	uxth	r3, r3
 8003442:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 8003444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	79fa      	ldrb	r2, [r7, #7]
 800344c:	0092      	lsls	r2, r2, #2
 800344e:	3203      	adds	r2, #3
 8003450:	00d2      	lsls	r2, r2, #3
 8003452:	4413      	add	r3, r2
 8003454:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003456:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800345a:	461a      	mov	r2, r3
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	68b8      	ldr	r0, [r7, #8]
 8003460:	f7ff fec2 	bl	80031e8 <WIZCHIP_READ_BUF>
   ptr += len;
 8003464:	89fa      	ldrh	r2, [r7, #14]
 8003466:	88bb      	ldrh	r3, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	3301      	adds	r3, #1
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800347a:	461a      	mov	r2, r3
 800347c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003480:	121b      	asrs	r3, r3, #8
 8003482:	b21b      	sxth	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7ff fe13 	bl	80030b4 <WIZCHIP_WRITE>
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3301      	adds	r3, #1
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800349a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800349e:	461a      	mov	r2, r3
 80034a0:	89fb      	ldrh	r3, [r7, #14]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f7ff fe04 	bl	80030b4 <WIZCHIP_WRITE>
 80034ac:	e000      	b.n	80034b0 <wiz_recv_data+0xc6>
   if(len == 0) return;
 80034ae:	bf00      	nop
}
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
	...

080034b8 <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08d      	sub	sp, #52	; 0x34
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4604      	mov	r4, r0
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	71fb      	strb	r3, [r7, #7]
 80034ca:	4603      	mov	r3, r0
 80034cc:	71bb      	strb	r3, [r7, #6]
 80034ce:	460b      	mov	r3, r1
 80034d0:	80bb      	strh	r3, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b07      	cmp	r3, #7
 80034de:	d902      	bls.n	80034e6 <socket+0x2e>
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
 80034e4:	e1ce      	b.n	8003884 <socket+0x3cc>
   switch (protocol & 0x0F)
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	3b01      	subs	r3, #1
 80034ee:	2b0d      	cmp	r3, #13
 80034f0:	f200 80bc 	bhi.w	800366c <socket+0x1b4>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <socket+0x44>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003535 	.word	0x08003535
 8003500:	08003673 	.word	0x08003673
 8003504:	08003673 	.word	0x08003673
 8003508:	0800366d 	.word	0x0800366d
 800350c:	0800366d 	.word	0x0800366d
 8003510:	0800366d 	.word	0x0800366d
 8003514:	08003673 	.word	0x08003673
 8003518:	0800366d 	.word	0x0800366d
 800351c:	08003583 	.word	0x08003583
 8003520:	08003673 	.word	0x08003673
 8003524:	08003673 	.word	0x08003673
 8003528:	0800366d 	.word	0x0800366d
 800352c:	080035d1 	.word	0x080035d1
 8003530:	08003673 	.word	0x08003673
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	2204      	movs	r2, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4875      	ldr	r0, [pc, #468]	; (8003714 <socket+0x25c>)
 800353e:	f7ff fe53 	bl	80031e8 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 8003542:	2300      	movs	r3, #0
 8003544:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003546:	2300      	movs	r3, #0
 8003548:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800354c:	e00f      	b.n	800356e <socket+0xb6>
 800354e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003552:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003556:	4413      	add	r3, r2
 8003558:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800355c:	b29a      	uxth	r2, r3
 800355e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003560:	4413      	add	r3, r2
 8003562:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003568:	3301      	adds	r3, #1
 800356a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800356e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003572:	2b03      	cmp	r3, #3
 8003574:	d9eb      	bls.n	800354e <socket+0x96>
 8003576:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003578:	2b00      	cmp	r3, #0
 800357a:	d17c      	bne.n	8003676 <socket+0x1be>
 800357c:	f06f 030b 	mvn.w	r3, #11
 8003580:	e180      	b.n	8003884 <socket+0x3cc>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	2210      	movs	r2, #16
 8003588:	4619      	mov	r1, r3
 800358a:	4863      	ldr	r0, [pc, #396]	; (8003718 <socket+0x260>)
 800358c:	f7ff fe2c 	bl	80031e8 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 8003590:	2300      	movs	r3, #0
 8003592:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800359a:	e00f      	b.n	80035bc <socket+0x104>
 800359c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80035a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035a4:	4413      	add	r3, r2
 80035a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ae:	4413      	add	r3, r2
 80035b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80035b6:	3301      	adds	r3, #1
 80035b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80035bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d9eb      	bls.n	800359c <socket+0xe4>
 80035c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d157      	bne.n	800367a <socket+0x1c2>
 80035ca:	f06f 030b 	mvn.w	r3, #11
 80035ce:	e159      	b.n	8003884 <socket+0x3cc>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	2204      	movs	r2, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	484e      	ldr	r0, [pc, #312]	; (8003714 <socket+0x25c>)
 80035da:	f7ff fe05 	bl	80031e8 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 80035de:	2300      	movs	r3, #0
 80035e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035e8:	e00f      	b.n	800360a <socket+0x152>
 80035ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035f2:	4413      	add	r3, r2
 80035f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035fc:	4413      	add	r3, r2
 80035fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003600:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003604:	3301      	adds	r3, #1
 8003606:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800360a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800360e:	2b03      	cmp	r3, #3
 8003610:	d9eb      	bls.n	80035ea <socket+0x132>
 8003612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <socket+0x166>
 8003618:	f06f 030b 	mvn.w	r3, #11
 800361c:	e132      	b.n	8003884 <socket+0x3cc>
         getLLAR(taddr);
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	2210      	movs	r2, #16
 8003624:	4619      	mov	r1, r3
 8003626:	483c      	ldr	r0, [pc, #240]	; (8003718 <socket+0x260>)
 8003628:	f7ff fdde 	bl	80031e8 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 800362c:	2300      	movs	r3, #0
 800362e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003636:	e00f      	b.n	8003658 <socket+0x1a0>
 8003638:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800363c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003640:	4413      	add	r3, r2
 8003642:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003646:	b29a      	uxth	r2, r3
 8003648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800364a:	4413      	add	r3, r2
 800364c:	847b      	strh	r3, [r7, #34]	; 0x22
 800364e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003652:	3301      	adds	r3, #1
 8003654:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003658:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d9eb      	bls.n	8003638 <socket+0x180>
 8003660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <socket+0x1c6>
 8003666:	f06f 030b 	mvn.w	r3, #11
 800366a:	e10b      	b.n	8003884 <socket+0x3cc>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 800366c:	f06f 0304 	mvn.w	r3, #4
 8003670:	e108      	b.n	8003884 <socket+0x3cc>
         break; 
 8003672:	bf00      	nop
 8003674:	e004      	b.n	8003680 <socket+0x1c8>
         break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <socket+0x1c8>
         break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <socket+0x1c8>
         break;
 800367e:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <socket+0x1d8>
 800368a:	f06f 0305 	mvn.w	r3, #5
 800368e:	e0f9      	b.n	8003884 <socket+0x3cc>
   if(flag != 0)
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d036      	beq.n	8003704 <socket+0x24c>
   {
      switch(protocol)
 8003696:	79bb      	ldrb	r3, [r7, #6]
 8003698:	3b01      	subs	r3, #1
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d834      	bhi.n	8003708 <socket+0x250>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <socket+0x1ec>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	08003709 	.word	0x08003709
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	08003709 	.word	0x08003709
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003709 	.word	0x08003709
 80036bc:	080036d9 	.word	0x080036d9
 80036c0:	08003709 	.word	0x08003709
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	08003709 	.word	0x08003709
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	08003709 	.word	0x08003709
 80036d4:	080036e9 	.word	0x080036e9
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d014      	beq.n	800370c <socket+0x254>
            	return SOCKERR_SOCKFLAG;
 80036e2:	f06f 0305 	mvn.w	r3, #5
 80036e6:	e0cd      	b.n	8003884 <socket+0x3cc>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 0390 	and.w	r3, r3, #144	; 0x90
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00e      	beq.n	8003710 <socket+0x258>
            	return SOCKERR_SOCKFLAG;
 80036f2:	f06f 0305 	mvn.w	r3, #5
 80036f6:	e0c5      	b.n	8003884 <socket+0x3cc>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00e      	beq.n	800371c <socket+0x264>
            	return SOCKERR_SOCKFLAG;
 80036fe:	f06f 0305 	mvn.w	r3, #5
 8003702:	e0bf      	b.n	8003884 <socket+0x3cc>
            break;
         default:
            break;
      }
   }
 8003704:	bf00      	nop
 8003706:	e00a      	b.n	800371e <socket+0x266>
            break;
 8003708:	bf00      	nop
 800370a:	e008      	b.n	800371e <socket+0x266>
            break;
 800370c:	bf00      	nop
 800370e:	e006      	b.n	800371e <socket+0x266>
            break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <socket+0x266>
 8003714:	00413800 	.word	0x00413800
 8003718:	00414000 	.word	0x00414000
            break;
 800371c:	bf00      	nop
   close(sn);
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f8bd 	bl	80038a0 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	3301      	adds	r3, #1
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4618      	mov	r0, r3
 8003730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003734:	f023 030f 	bic.w	r3, r3, #15
 8003738:	b25a      	sxtb	r2, r3
 800373a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800373e:	4313      	orrs	r3, r2
 8003740:	b25b      	sxtb	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	4619      	mov	r1, r3
 8003746:	f7ff fcb5 	bl	80030b4 <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3301      	adds	r3, #1
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8003756:	461a      	mov	r2, r3
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f7ff fca6 	bl	80030b4 <WIZCHIP_WRITE>
   if(!port)
 8003768:	88bb      	ldrh	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d110      	bne.n	8003790 <socket+0x2d8>
   {
      port = sock_any_port++;
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <socket+0x3d4>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	b291      	uxth	r1, r2
 8003776:	4a45      	ldr	r2, [pc, #276]	; (800388c <socket+0x3d4>)
 8003778:	8011      	strh	r1, [r2, #0]
 800377a:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <socket+0x3d4>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003784:	4293      	cmp	r3, r2
 8003786:	d103      	bne.n	8003790 <socket+0x2d8>
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <socket+0x3d4>)
 800378a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800378e:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3301      	adds	r3, #1
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800379c:	461a      	mov	r2, r3
 800379e:	88bb      	ldrh	r3, [r7, #4]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7ff fc83 	bl	80030b4 <WIZCHIP_WRITE>
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3301      	adds	r3, #1
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80037ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037be:	461a      	mov	r2, r3
 80037c0:	88bb      	ldrh	r3, [r7, #4]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7ff fc74 	bl	80030b4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3301      	adds	r3, #1
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fc6a 	bl	80030b4 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 80037e0:	bf00      	nop
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	3301      	adds	r3, #1
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fc92 	bl	8003118 <WIZCHIP_READ>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f3      	bne.n	80037e2 <socket+0x32a>

   sock_io_mode &= ~(1 <<sn);
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2201      	movs	r2, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	b21b      	sxth	r3, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	b21a      	sxth	r2, r3
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <socket+0x3d8>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b21b      	sxth	r3, r3
 800380e:	4013      	ands	r3, r2
 8003810:	b21b      	sxth	r3, r3
 8003812:	b29a      	uxth	r2, r3
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <socket+0x3d8>)
 8003816:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 0201 	and.w	r2, r3, #1
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	b21a      	sxth	r2, r3
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <socket+0x3d8>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b21b      	sxth	r3, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	b21b      	sxth	r3, r3
 8003830:	b29a      	uxth	r2, r3
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <socket+0x3d8>)
 8003834:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2201      	movs	r2, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	b21b      	sxth	r3, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	b21a      	sxth	r2, r3
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <socket+0x3dc>)
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b21b      	sxth	r3, r3
 800384a:	4013      	ands	r3, r2
 800384c:	b21b      	sxth	r3, r3
 800384e:	b29a      	uxth	r2, r3
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <socket+0x3dc>)
 8003852:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4a10      	ldr	r2, [pc, #64]	; (8003898 <socket+0x3e0>)
 8003858:	2100      	movs	r1, #0
 800385a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <socket+0x3e4>)
 8003862:	2100      	movs	r1, #0
 8003864:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 8003866:	bf00      	nop
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	3301      	adds	r3, #1
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fc4f 	bl	8003118 <WIZCHIP_READ>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f3      	beq.n	8003868 <socket+0x3b0>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8003884:	4618      	mov	r0, r3
 8003886:	3734      	adds	r7, #52	; 0x34
 8003888:	46bd      	mov	sp, r7
 800388a:	bd90      	pop	{r4, r7, pc}
 800388c:	20000080 	.word	0x20000080
 8003890:	20000130 	.word	0x20000130
 8003894:	20000132 	.word	0x20000132
 8003898:	20000134 	.word	0x20000134
 800389c:	20000144 	.word	0x20000144

080038a0 <close>:


int8_t close(uint8_t sn)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d902      	bls.n	80038b6 <close+0x16>
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
 80038b4:	e055      	b.n	8003962 <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	3301      	adds	r3, #1
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c2:	2110      	movs	r1, #16
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fbf5 	bl	80030b4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 80038ca:	bf00      	nop
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3301      	adds	r3, #1
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fc1d 	bl	8003118 <WIZCHIP_READ>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f3      	bne.n	80038cc <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	3301      	adds	r3, #1
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80038f0:	21ff      	movs	r1, #255	; 0xff
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fbde 	bl	80030b4 <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	2201      	movs	r2, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	b21b      	sxth	r3, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	b21a      	sxth	r2, r3
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <close+0xcc>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b21b      	sxth	r3, r3
 800390c:	4013      	ands	r3, r2
 800390e:	b21b      	sxth	r3, r3
 8003910:	b29a      	uxth	r2, r3
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <close+0xcc>)
 8003914:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4a15      	ldr	r2, [pc, #84]	; (8003970 <close+0xd0>)
 800391a:	2100      	movs	r1, #0
 800391c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	2201      	movs	r2, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	b21b      	sxth	r3, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	b21a      	sxth	r2, r3
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <close+0xd4>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b21b      	sxth	r3, r3
 8003934:	4013      	ands	r3, r2
 8003936:	b21b      	sxth	r3, r3
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <close+0xd4>)
 800393c:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <close+0xd8>)
 8003942:	2100      	movs	r1, #0
 8003944:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8003946:	bf00      	nop
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	3301      	adds	r3, #1
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fbdf 	bl	8003118 <WIZCHIP_READ>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f3      	bne.n	8003948 <close+0xa8>
   return SOCK_OK;
 8003960:	2301      	movs	r3, #1
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000130 	.word	0x20000130
 8003970:	20000134 	.word	0x20000134
 8003974:	20000132 	.word	0x20000132
 8003978:	20000144 	.word	0x20000144

0800397c <listen>:


int8_t listen(uint8_t sn)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b07      	cmp	r3, #7
 800398a:	d902      	bls.n	8003992 <listen+0x16>
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	e03a      	b.n	8003a08 <listen+0x8c>
   CHECK_SOCKINIT();
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	3301      	adds	r3, #1
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fbba 	bl	8003118 <WIZCHIP_READ>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b13      	cmp	r3, #19
 80039a8:	d002      	beq.n	80039b0 <listen+0x34>
 80039aa:	f06f 0302 	mvn.w	r3, #2
 80039ae:	e02b      	b.n	8003a08 <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	3301      	adds	r3, #1
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fb78 	bl	80030b4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80039c4:	bf00      	nop
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3301      	adds	r3, #1
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fba0 	bl	8003118 <WIZCHIP_READ>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f3      	bne.n	80039c6 <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80039de:	e006      	b.n	80039ee <listen+0x72>
   {
      close(sn);
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff5c 	bl	80038a0 <close>
      return SOCKERR_SOCKCLOSED;
 80039e8:	f06f 0303 	mvn.w	r3, #3
 80039ec:	e00c      	b.n	8003a08 <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3301      	adds	r3, #1
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fb8c 	bl	8003118 <WIZCHIP_READ>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b14      	cmp	r3, #20
 8003a04:	d1ec      	bne.n	80039e0 <listen+0x64>
   }
   return SOCK_OK;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d902      	bls.n	8003a26 <disconnect+0x16>
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	e05f      	b.n	8003ae6 <disconnect+0xd6>
   CHECK_TCPMODE();
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fb72 	bl	8003118 <WIZCHIP_READ>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d002      	beq.n	8003a44 <disconnect+0x34>
 8003a3e:	f06f 0304 	mvn.w	r3, #4
 8003a42:	e050      	b.n	8003ae6 <disconnect+0xd6>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	3301      	adds	r3, #1
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fb61 	bl	8003118 <WIZCHIP_READ>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d043      	beq.n	8003ae4 <disconnect+0xd4>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	3301      	adds	r3, #1
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	2108      	movs	r1, #8
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fb22 	bl	80030b4 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8003a70:	bf00      	nop
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	3301      	adds	r3, #1
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fb4a 	bl	8003118 <WIZCHIP_READ>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f3      	bne.n	8003a72 <disconnect+0x62>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003a8a:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <disconnect+0xe0>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	fa42 f303 	asr.w	r3, r2, r3
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <disconnect+0xbc>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e021      	b.n	8003ae6 <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fb32 	bl	8003118 <WIZCHIP_READ>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <disconnect+0xbc>
         {
            close(sn);
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff feed 	bl	80038a0 <close>
            return SOCKERR_TIMEOUT;
 8003ac6:	f06f 030c 	mvn.w	r3, #12
 8003aca:	e00c      	b.n	8003ae6 <disconnect+0xd6>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fb1d 	bl	8003118 <WIZCHIP_READ>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1de      	bne.n	8003aa2 <disconnect+0x92>
         }
      }
   }
   return SOCK_OK;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000130 	.word	0x20000130

08003af4 <send>:


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
 8003b00:	4613      	mov	r3, r2
 8003b02:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
   datasize_t freesize=0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	3301      	adds	r3, #1
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fafd 	bl	8003118 <WIZCHIP_READ>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	029b      	lsls	r3, r3, #10
 8003b22:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003b24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	dd01      	ble.n	8003b34 <send+0x40>
 8003b30:	89bb      	ldrh	r3, [r7, #12]
 8003b32:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (datasize_t)getSn_TX_FSR(sn);
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fb8a 	bl	8003250 <getSn_TX_FSR>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	3301      	adds	r3, #1
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fae3 	bl	8003118 <WIZCHIP_READ>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b17      	cmp	r3, #23
 8003b5a:	d00c      	beq.n	8003b76 <send+0x82>
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b1c      	cmp	r3, #28
 8003b60:	d009      	beq.n	8003b76 <send+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <send+0x7c>
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fe98 	bl	80038a0 <close>
         return SOCKERR_SOCKSTATUS;
 8003b70:	f06f 0306 	mvn.w	r3, #6
 8003b74:	e097      	b.n	8003ca6 <send+0x1b2>
      }
      if(len <= freesize) break;
 8003b76:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	dd0b      	ble.n	8003b9a <send+0xa6>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 8003b82:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <send+0x1bc>)
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	fa42 f303 	asr.w	r3, r2, r3
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ce      	beq.n	8003b34 <send+0x40>
 8003b96:	2300      	movs	r3, #0
 8003b98:	e085      	b.n	8003ca6 <send+0x1b2>
      if(len <= freesize) break;
 8003b9a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003b9c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fbbf 	bl	8003328 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8003baa:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <send+0x1c0>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	fa42 f303 	asr.w	r3, r2, r3
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04d      	beq.n	8003c5a <send+0x166>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8003bbe:	e034      	b.n	8003c2a <send+0x136>
      {    
         tmp = getSn_SR(sn);
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff faa3 	bl	8003118 <WIZCHIP_READ>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b17      	cmp	r3, #23
 8003bda:	d01a      	beq.n	8003c12 <send+0x11e>
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b1c      	cmp	r3, #28
 8003be0:	d017      	beq.n	8003c12 <send+0x11e>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <send+0x110>
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	3301      	adds	r3, #1
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fa8f 	bl	8003118 <WIZCHIP_READ>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <send+0x118>
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fe4a 	bl	80038a0 <close>
            return SOCKERR_SOCKSTATUS;
 8003c0c:	f06f 0306 	mvn.w	r3, #6
 8003c10:	e049      	b.n	8003ca6 <send+0x1b2>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <send+0x1bc>)
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	fa42 f303 	asr.w	r3, r2, r3
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <send+0x136>
 8003c26:	2300      	movs	r3, #0
 8003c28:	e03d      	b.n	8003ca6 <send+0x1b2>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fa6e 	bl	8003118 <WIZCHIP_READ>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0bc      	beq.n	8003bc0 <send+0xcc>
      } 
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003c52:	2110      	movs	r1, #16
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fa2d 	bl	80030b4 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3301      	adds	r3, #1
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c66:	2120      	movs	r1, #32
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fa23 	bl	80030b4 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8003c6e:	bf00      	nop
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	3301      	adds	r3, #1
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fa4b 	bl	8003118 <WIZCHIP_READ>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f3      	bne.n	8003c70 <send+0x17c>
   sock_is_sending |= (1<<sn);
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	b21a      	sxth	r2, r3
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <send+0x1c0>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b21b      	sxth	r3, r3
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b21b      	sxth	r3, r3
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <send+0x1c0>)
 8003ca0:	801a      	strh	r2, [r3, #0]
 
   return len;
 8003ca2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000130 	.word	0x20000130
 8003cb4:	20000132 	.word	0x20000132

08003cb8 <recv>:


datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
   datasize_t recvsize = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fa1b 	bl	8003118 <WIZCHIP_READ>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	029b      	lsls	r3, r3, #10
 8003ce6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003ce8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003cec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	da01      	bge.n	8003cf8 <recv+0x40>
 8003cf4:	89bb      	ldrh	r3, [r7, #12]
 8003cf6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fade 	bl	80032bc <getSn_RX_RSR>
 8003d00:	4603      	mov	r3, r0
 8003d02:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	3301      	adds	r3, #1
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fa01 	bl	8003118 <WIZCHIP_READ>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b17      	cmp	r3, #23
 8003d1e:	d00c      	beq.n	8003d3a <recv+0x82>
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b1c      	cmp	r3, #28
 8003d24:	d009      	beq.n	8003d3a <recv+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <recv+0x7c>
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fdb6 	bl	80038a0 <close>
         return SOCKERR_SOCKSTATUS;
 8003d34:	f06f 0306 	mvn.w	r3, #6
 8003d38:	e038      	b.n	8003dac <recv+0xf4>
      }
      if(recvsize) break;
 8003d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <recv+0xa2>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <recv+0xfc>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	fa42 f303 	asr.w	r3, r2, r3
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0d0      	beq.n	8003cf8 <recv+0x40>
 8003d56:	2300      	movs	r3, #0
 8003d58:	e028      	b.n	8003dac <recv+0xf4>
      if(recvsize) break;
 8003d5a:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8003d5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	da01      	bge.n	8003d6c <recv+0xb4>
 8003d68:	89bb      	ldrh	r3, [r7, #12]
 8003d6a:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8003d6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fb38 	bl	80033ea <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	3301      	adds	r3, #1
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f993 	bl	80030b4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8003d8e:	bf00      	nop
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	3301      	adds	r3, #1
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f9bb 	bl	8003118 <WIZCHIP_READ>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f3      	bne.n	8003d90 <recv+0xd8>
   return len;
 8003da8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000130 	.word	0x20000130

08003db8 <ctlsocket>:
 
   return pack_len;
}

int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	603a      	str	r2, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	2b07      	cmp	r3, #7
 8003dd0:	d902      	bls.n	8003dd8 <ctlsocket+0x20>
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	e0d8      	b.n	8003f8a <ctlsocket+0x1d2>
   tmp = *((uint8_t*)arg); 
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 8003dde:	79bb      	ldrb	r3, [r7, #6]
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	f200 80ce 	bhi.w	8003f82 <ctlsocket+0x1ca>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <ctlsocket+0x34>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e63 	.word	0x08003e63
 8003df4:	08003e7d 	.word	0x08003e7d
 8003df8:	08003e9b 	.word	0x08003e9b
 8003dfc:	08003eb9 	.word	0x08003eb9
 8003e00:	08003edf 	.word	0x08003edf
 8003e04:	08003efb 	.word	0x08003efb
 8003e08:	08003f21 	.word	0x08003f21
 8003e0c:	08003f3d 	.word	0x08003f3d
 8003e10:	08003f67 	.word	0x08003f67
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10d      	bne.n	8003e36 <ctlsocket+0x7e>
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	b21a      	sxth	r2, r3
 8003e24:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <ctlsocket+0x1dc>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b21b      	sxth	r3, r3
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <ctlsocket+0x1dc>)
 8003e32:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8003e34:	e0a8      	b.n	8003f88 <ctlsocket+0x1d0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <ctlsocket+0xa4>
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	b21a      	sxth	r2, r3
 8003e4a:	4b52      	ldr	r3, [pc, #328]	; (8003f94 <ctlsocket+0x1dc>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <ctlsocket+0x1dc>)
 8003e58:	801a      	strh	r2, [r3, #0]
         break;
 8003e5a:	e095      	b.n	8003f88 <ctlsocket+0x1d0>
         else return SOCKERR_ARG;
 8003e5c:	f06f 0309 	mvn.w	r3, #9
 8003e60:	e093      	b.n	8003f8a <ctlsocket+0x1d2>
      case CS_GET_IOMODE: 
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8003e62:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <ctlsocket+0x1dc>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	fa42 f303 	asr.w	r3, r2, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	701a      	strb	r2, [r3, #0]
         break;
 8003e7a:	e085      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_GET_MAXTXBUF:
         *((datasize_t*)arg) = getSn_TxMAX(sn);
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3301      	adds	r3, #1
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff f945 	bl	8003118 <WIZCHIP_READ>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	b21a      	sxth	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	801a      	strh	r2, [r3, #0]
         break;
 8003e98:	e076      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_GET_MAXRXBUF:  
         *((datasize_t*)arg) = getSn_RxMAX(sn);
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f936 	bl	8003118 <WIZCHIP_READ>
 8003eac:	4603      	mov	r3, r0
 8003eae:	029b      	lsls	r3, r3, #10
 8003eb0:	b21a      	sxth	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	801a      	strh	r2, [r3, #0]
         break;
 8003eb6:	e067      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b1f      	cmp	r3, #31
 8003ebc:	d902      	bls.n	8003ec4 <ctlsocket+0x10c>
 8003ebe:	f06f 0309 	mvn.w	r3, #9
 8003ec2:	e062      	b.n	8003f8a <ctlsocket+0x1d2>
         setSn_IRCLR(sn,tmp);
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3301      	adds	r3, #1
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7ff f8ec 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 8003edc:	e054      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f914 	bl	8003118 <WIZCHIP_READ>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	701a      	strb	r2, [r3, #0]
         break;
 8003ef8:	e046      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b1f      	cmp	r3, #31
 8003efe:	d902      	bls.n	8003f06 <ctlsocket+0x14e>
 8003f00:	f06f 0309 	mvn.w	r3, #9
 8003f04:	e041      	b.n	8003f8a <ctlsocket+0x1d2>
         setSn_IMR(sn,tmp);
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f12:	461a      	mov	r2, r3
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f7ff f8cb 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 8003f1e:	e033      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3301      	adds	r3, #1
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f8f3 	bl	8003118 <WIZCHIP_READ>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	701a      	strb	r2, [r3, #0]
         break;
 8003f3a:	e025      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_SET_PREFER:
    	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <ctlsocket+0x194>
 8003f46:	f06f 0309 	mvn.w	r3, #9
 8003f4a:	e01e      	b.n	8003f8a <ctlsocket+0x1d2>
    	  setSn_PSR(sn, tmp);
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3301      	adds	r3, #1
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f58:	461a      	mov	r2, r3
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7ff f8a8 	bl	80030b4 <WIZCHIP_WRITE>
    	  break;
 8003f64:	e010      	b.n	8003f88 <ctlsocket+0x1d0>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f8d0 	bl	8003118 <WIZCHIP_READ>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	701a      	strb	r2, [r3, #0]
    	  break;
 8003f80:	e002      	b.n	8003f88 <ctlsocket+0x1d0>
      default:
         return SOCKERR_ARG;
 8003f82:	f06f 0309 	mvn.w	r3, #9
 8003f86:	e000      	b.n	8003f8a <ctlsocket+0x1d2>
   }
   return SOCK_OK;
 8003f88:	2301      	movs	r3, #1
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000130 	.word	0x20000130

08003f98 <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	603a      	str	r2, [r7, #0]
 8003fa2:	71fb      	strb	r3, [r7, #7]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	2b07      	cmp	r3, #7
 8003fac:	d902      	bls.n	8003fb4 <getsockopt+0x1c>
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	e1a2      	b.n	80042fa <getsockopt+0x362>
   switch(sotype)
 8003fb4:	79bb      	ldrb	r3, [r7, #6]
 8003fb6:	2b0e      	cmp	r3, #14
 8003fb8:	f200 819b 	bhi.w	80042f2 <getsockopt+0x35a>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <getsockopt+0x2c>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08004001 	.word	0x08004001
 8003fc8:	08004059 	.word	0x08004059
 8003fcc:	08004075 	.word	0x08004075
 8003fd0:	08004091 	.word	0x08004091
 8003fd4:	080040cf 	.word	0x080040cf
 8003fd8:	08004149 	.word	0x08004149
 8003fdc:	080042f3 	.word	0x080042f3
 8003fe0:	08004187 	.word	0x08004187
 8003fe4:	080041c1 	.word	0x080041c1
 8003fe8:	080041d3 	.word	0x080041d3
 8003fec:	080041e5 	.word	0x080041e5
 8003ff0:	08004201 	.word	0x08004201
 8003ff4:	0800423f 	.word	0x0800423f
 8003ff8:	080042d7 	.word	0x080042d7
 8003ffc:	08004293 	.word	0x08004293
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	3301      	adds	r3, #1
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff f885 	bl	8003118 <WIZCHIP_READ>
 800400e:	4603      	mov	r3, r0
 8004010:	b25b      	sxtb	r3, r3
 8004012:	f023 030f 	bic.w	r3, r3, #15
 8004016:	b25c      	sxtb	r4, r3
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3301      	adds	r3, #1
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	f503 33a2 	add.w	r3, r3, #82944	; 0x14400
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f877 	bl	8003118 <WIZCHIP_READ>
 800402a:	4603      	mov	r3, r0
 800402c:	b25b      	sxtb	r3, r3
 800402e:	4323      	orrs	r3, r4
 8004030:	b25a      	sxtb	r2, r3
 8004032:	4bb4      	ldr	r3, [pc, #720]	; (8004304 <getsockopt+0x36c>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	fa41 f303 	asr.w	r3, r1, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	b25b      	sxtb	r3, r3
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	b25b      	sxtb	r3, r3
 800404c:	4313      	orrs	r3, r2
 800404e:	b25b      	sxtb	r3, r3
 8004050:	b2da      	uxtb	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	701a      	strb	r2, [r3, #0]
         break;
 8004056:	e14f      	b.n	80042f8 <getsockopt+0x360>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	3301      	adds	r3, #1
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f857 	bl	8003118 <WIZCHIP_READ>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	701a      	strb	r2, [r3, #0]
         break;
 8004072:	e141      	b.n	80042f8 <getsockopt+0x360>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	3301      	adds	r3, #1
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f849 	bl	8003118 <WIZCHIP_READ>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	701a      	strb	r2, [r3, #0]
         break;
 800408e:	e133      	b.n	80042f8 <getsockopt+0x360>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	3301      	adds	r3, #1
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff f83b 	bl	8003118 <WIZCHIP_READ>
 80040a2:	4603      	mov	r3, r0
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	b29c      	uxth	r4, r3
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	3301      	adds	r3, #1
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80040b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff f82c 	bl	8003118 <WIZCHIP_READ>
 80040c0:	4603      	mov	r3, r0
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4423      	add	r3, r4
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	801a      	strh	r2, [r3, #0]
         break;
 80040cc:	e114      	b.n	80042f8 <getsockopt+0x360>
      case SO_DESTIP:
         CHECK_TCPMODE();
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3301      	adds	r3, #1
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f81e 	bl	8003118 <WIZCHIP_READ>
 80040dc:	4603      	mov	r3, r0
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d002      	beq.n	80040ec <getsockopt+0x154>
 80040e6:	f06f 0304 	mvn.w	r3, #4
 80040ea:	e106      	b.n	80042fa <getsockopt+0x362>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3301      	adds	r3, #1
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f80d 	bl	8003118 <WIZCHIP_READ>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00f      	beq.n	8004128 <getsockopt+0x190>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	3301      	adds	r3, #1
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8004114:	4618      	mov	r0, r3
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2210      	movs	r2, #16
 800411a:	4619      	mov	r1, r3
 800411c:	f7ff f864 	bl	80031e8 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2210      	movs	r2, #16
 8004124:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 8004126:	e0e7      	b.n	80042f8 <getsockopt+0x360>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	3301      	adds	r3, #1
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8004134:	4618      	mov	r0, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2204      	movs	r2, #4
 800413a:	4619      	mov	r1, r3
 800413c:	f7ff f854 	bl	80031e8 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2204      	movs	r2, #4
 8004144:	741a      	strb	r2, [r3, #16]
         break;
 8004146:	e0d7      	b.n	80042f8 <getsockopt+0x360>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3301      	adds	r3, #1
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe ffdf 	bl	8003118 <WIZCHIP_READ>
 800415a:	4603      	mov	r3, r0
 800415c:	b29b      	uxth	r3, r3
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	b29c      	uxth	r4, r3
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3301      	adds	r3, #1
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 800416e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe ffd0 	bl	8003118 <WIZCHIP_READ>
 8004178:	4603      	mov	r3, r0
 800417a:	b29b      	uxth	r3, r3
 800417c:	4423      	add	r3, r4
 800417e:	b29a      	uxth	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	801a      	strh	r2, [r3, #0]
         break; 
 8004184:	e0b8      	b.n	80042f8 <getsockopt+0x360>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	3301      	adds	r3, #1
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe ffc2 	bl	8003118 <WIZCHIP_READ>
 8004194:	4603      	mov	r3, r0
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d002      	beq.n	80041a4 <getsockopt+0x20c>
 800419e:	f06f 0304 	mvn.w	r3, #4
 80041a2:	e0aa      	b.n	80042fa <getsockopt+0x362>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	3301      	adds	r3, #1
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	f503 33c4 	add.w	r3, r3, #100352	; 0x18800
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe ffb1 	bl	8003118 <WIZCHIP_READ>
 80041b6:	4603      	mov	r3, r0
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	801a      	strh	r2, [r3, #0]
         break;
 80041be:	e09b      	b.n	80042f8 <getsockopt+0x360>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f844 	bl	8003250 <getSn_TX_FSR>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	801a      	strh	r2, [r3, #0]
         break;
 80041d0:	e092      	b.n	80042f8 <getsockopt+0x360>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff f871 	bl	80032bc <getSn_RX_RSR>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	801a      	strh	r2, [r3, #0]
         break;
 80041e2:	e089      	b.n	80042f8 <getsockopt+0x360>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3301      	adds	r3, #1
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe ff91 	bl	8003118 <WIZCHIP_READ>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	701a      	strb	r2, [r3, #0]
         break;
 80041fe:	e07b      	b.n	80042f8 <getsockopt+0x360>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3301      	adds	r3, #1
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe ff85 	bl	8003118 <WIZCHIP_READ>
 800420e:	4603      	mov	r3, r0
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d002      	beq.n	800421e <getsockopt+0x286>
 8004218:	f06f 0304 	mvn.w	r3, #4
 800421c:	e06d      	b.n	80042fa <getsockopt+0x362>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	3301      	adds	r3, #1
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe ff74 	bl	8003118 <WIZCHIP_READ>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	b2da      	uxtb	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	701a      	strb	r2, [r3, #0]
         break;
 800423c:	e05c      	b.n	80042f8 <getsockopt+0x360>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	3301      	adds	r3, #1
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe ff66 	bl	8003118 <WIZCHIP_READ>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <getsockopt+0x2c0>
 8004252:	f06f 0306 	mvn.w	r3, #6
 8004256:	e050      	b.n	80042fa <getsockopt+0x362>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3301      	adds	r3, #1
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe ff59 	bl	8003118 <WIZCHIP_READ>
 8004266:	4603      	mov	r3, r0
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <getsockopt+0x2ea>
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff f822 	bl	80032bc <getSn_RX_RSR>
 8004278:	4603      	mov	r3, r0
 800427a:	b29a      	uxth	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8004280:	e03a      	b.n	80042f8 <getsockopt+0x360>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <getsockopt+0x370>)
 8004286:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800428a:	b29a      	uxth	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	801a      	strh	r2, [r3, #0]
         break;
 8004290:	e032      	b.n	80042f8 <getsockopt+0x360>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3301      	adds	r3, #1
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe ff3c 	bl	8003118 <WIZCHIP_READ>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <getsockopt+0x314>
 80042a6:	f06f 0306 	mvn.w	r3, #6
 80042aa:	e026      	b.n	80042fa <getsockopt+0x362>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3301      	adds	r3, #1
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe ff2f 	bl	8003118 <WIZCHIP_READ>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <getsockopt+0x332>
 80042c4:	f06f 0304 	mvn.w	r3, #4
 80042c8:	e017      	b.n	80042fa <getsockopt+0x362>
         else *(uint8_t*)arg = sock_pack_info[sn];
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	4a0f      	ldr	r2, [pc, #60]	; (800430c <getsockopt+0x374>)
 80042ce:	5cd2      	ldrb	r2, [r2, r3]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	701a      	strb	r2, [r3, #0]
         break;
 80042d4:	e010      	b.n	80042f8 <getsockopt+0x360>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	3301      	adds	r3, #1
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe ff1a 	bl	8003118 <WIZCHIP_READ>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	701a      	strb	r2, [r3, #0]
         break;
 80042f0:	e002      	b.n	80042f8 <getsockopt+0x360>
      default:
         return SOCKERR_SOCKOPT;
 80042f2:	f06f 0301 	mvn.w	r3, #1
 80042f6:	e000      	b.n	80042fa <getsockopt+0x362>
   }
   return SOCK_OK;
 80042f8:	2301      	movs	r3, #1
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}
 8004302:	bf00      	nop
 8004304:	20000130 	.word	0x20000130
 8004308:	20000134 	.word	0x20000134
 800430c:	20000144 	.word	0x20000144

08004310 <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <wizchip_spi_read>:
 * @details @ref wizchip_spi_read() provides the default read one byte data from SPI of @ref _WIZCHIP_,\n
 *          but it is null function.
 * @return uint8_t 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
uint8_t wizchip_spi_read(void)        {return 0;}
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
 8004344:	2300      	movs	r3, #0
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <wizchip_spi_write>:
 *          but it is null function.
 * @param wb uint8_t data to be written
 * @return void 
 * @todo It should be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write(uint8_t wb) {}
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
	...

08004364 <wizchip_spi_read_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_read() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_read_buf(uint8_t* buf, datasize_t len)
{
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) *buf++ = WIZCHIP.IF.SPI._read_byte();
 8004370:	2300      	movs	r3, #0
 8004372:	81fb      	strh	r3, [r7, #14]
 8004374:	e00d      	b.n	8004392 <wizchip_spi_read_buf+0x2e>
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <wizchip_spi_read_buf+0x44>)
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	687c      	ldr	r4, [r7, #4]
 800437c:	1c62      	adds	r2, r4, #1
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	4798      	blx	r3
 8004382:	4603      	mov	r3, r0
 8004384:	7023      	strb	r3, [r4, #0]
 8004386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800438a:	b29b      	uxth	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	81fb      	strh	r3, [r7, #14]
 8004392:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004396:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800439a:	429a      	cmp	r2, r3
 800439c:	dbeb      	blt.n	8004376 <wizchip_spi_read_buf+0x12>
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000084 	.word	0x20000084

080043ac <wizchip_spi_write_buf>:
 * @return void
 * @note It is use @ref wizchip_spi_write() as default. \n
 *       It can be overwritten with your function or register your functions by calling @ref reg_wizchip_spi_cbfunc().
 */
void wizchip_spi_write_buf(uint8_t* buf, datasize_t len)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
   for(datasize_t i=0; i < len; i++) WIZCHIP.IF.SPI._write_byte(*buf++);
 80043b8:	2300      	movs	r3, #0
 80043ba:	81fb      	strh	r3, [r7, #14]
 80043bc:	e00d      	b.n	80043da <wizchip_spi_write_buf+0x2e>
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <wizchip_spi_write_buf+0x44>)
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1c59      	adds	r1, r3, #1
 80043c6:	6079      	str	r1, [r7, #4]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	4790      	blx	r2
 80043ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	81fb      	strh	r3, [r7, #14]
 80043da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80043de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	dbeb      	blt.n	80043be <wizchip_spi_write_buf+0x12>
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000084 	.word	0x20000084

080043f4 <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <reg_wizchip_cs_cbfunc+0x18>
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <reg_wizchip_cs_cbfunc+0x3c>)
 8004406:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <reg_wizchip_cs_cbfunc+0x40>)
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	e002      	b.n	8004412 <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 800440c:	4a08      	ldr	r2, [pc, #32]	; (8004430 <reg_wizchip_cs_cbfunc+0x3c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <reg_wizchip_cs_cbfunc+0x2c>
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <reg_wizchip_cs_cbfunc+0x3c>)
 800441a:	4a07      	ldr	r2, [pc, #28]	; (8004438 <reg_wizchip_cs_cbfunc+0x44>)
 800441c:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 800441e:	e002      	b.n	8004426 <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 8004420:	4a03      	ldr	r2, [pc, #12]	; (8004430 <reg_wizchip_cs_cbfunc+0x3c>)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6153      	str	r3, [r2, #20]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	20000084 	.word	0x20000084
 8004434:	08004329 	.word	0x08004329
 8004438:	08004335 	.word	0x08004335

0800443c <reg_wizchip_spi_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_)
void reg_wizchip_spi_cbfunc( uint8_t (*spi_rb)(void), 
                             void (*spi_wb)(uint8_t wb),
                             void (*spi_rbuf)(uint8_t* buf, datasize_t len),
                             void (*spi_wbuf)(uint8_t* buf, datasize_t len) )
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800444a:	bf00      	nop
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f9      	beq.n	800444c <reg_wizchip_spi_cbfunc+0x10>
   
   if(!spi_rb)    WIZCHIP.IF.SPI._read_byte      = wizchip_spi_read;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <reg_wizchip_spi_cbfunc+0x2a>
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 8004460:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <reg_wizchip_spi_cbfunc+0x7c>)
 8004462:	619a      	str	r2, [r3, #24]
 8004464:	e002      	b.n	800446c <reg_wizchip_spi_cbfunc+0x30>
   else           WIZCHIP.IF.SPI._read_byte      = spi_rb;
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6193      	str	r3, [r2, #24]
   if(!spi_wb)    WIZCHIP.IF.SPI._write_byte     = wizchip_spi_write;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <reg_wizchip_spi_cbfunc+0x3e>
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <reg_wizchip_spi_cbfunc+0x80>)
 8004476:	61da      	str	r2, [r3, #28]
 8004478:	e002      	b.n	8004480 <reg_wizchip_spi_cbfunc+0x44>
   else           WIZCHIP.IF.SPI._write_byte     = spi_wb;
 800447a:	4a0e      	ldr	r2, [pc, #56]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	61d3      	str	r3, [r2, #28]

   if(!spi_rbuf)  WIZCHIP.IF.SPI._read_byte_buf  = wizchip_spi_read_buf;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <reg_wizchip_spi_cbfunc+0x52>
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <reg_wizchip_spi_cbfunc+0x84>)
 800448a:	621a      	str	r2, [r3, #32]
 800448c:	e002      	b.n	8004494 <reg_wizchip_spi_cbfunc+0x58>
   else           WIZCHIP.IF.SPI._read_byte_buf  = spi_rbuf;
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6213      	str	r3, [r2, #32]
   if(!spi_wbuf)  WIZCHIP.IF.SPI._write_byte_buf = wizchip_spi_write_buf;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <reg_wizchip_spi_cbfunc+0x66>
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 800449c:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <reg_wizchip_spi_cbfunc+0x88>)
 800449e:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
 80044a0:	e002      	b.n	80044a8 <reg_wizchip_spi_cbfunc+0x6c>
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <reg_wizchip_spi_cbfunc+0x78>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000084 	.word	0x20000084
 80044b8:	08004341 	.word	0x08004341
 80044bc:	0800434f 	.word	0x0800434f
 80044c0:	08004365 	.word	0x08004365
 80044c4:	080043ad 	.word	0x080043ad

080044c8 <ctlwizchip>:
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	6039      	str	r1, [r7, #0]
 80044d2:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b17      	cmp	r3, #23
 80044e6:	f200 8163 	bhi.w	80047b0 <ctlwizchip+0x2e8>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <ctlwizchip+0x28>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004551 	.word	0x08004551
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	080045c5 	.word	0x080045c5
 80044fc:	080045d9 	.word	0x080045d9
 8004500:	080045df 	.word	0x080045df
 8004504:	080045ff 	.word	0x080045ff
 8004508:	0800460b 	.word	0x0800460b
 800450c:	08004617 	.word	0x08004617
 8004510:	08004623 	.word	0x08004623
 8004514:	0800462f 	.word	0x0800462f
 8004518:	08004651 	.word	0x08004651
 800451c:	08004673 	.word	0x08004673
 8004520:	080046a9 	.word	0x080046a9
 8004524:	080046bb 	.word	0x080046bb
 8004528:	080046f5 	.word	0x080046f5
 800452c:	0800471b 	.word	0x0800471b
 8004530:	08004759 	.word	0x08004759
 8004534:	0800476d 	.word	0x0800476d
 8004538:	08004773 	.word	0x08004773
 800453c:	0800477b 	.word	0x0800477b
 8004540:	08004783 	.word	0x08004783
 8004544:	0800478b 	.word	0x0800478b
 8004548:	08004795 	.word	0x08004795
 800454c:	080047a3 	.word	0x080047a3
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <ctlwizchip+0x9a>
 800455a:	21ff      	movs	r1, #255	; 0xff
 800455c:	489b      	ldr	r0, [pc, #620]	; (80047cc <ctlwizchip+0x304>)
 800455e:	f7fe fda9 	bl	80030b4 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <ctlwizchip+0xac>
 800456c:	21c5      	movs	r1, #197	; 0xc5
 800456e:	4898      	ldr	r0, [pc, #608]	; (80047d0 <ctlwizchip+0x308>)
 8004570:	f7fe fda0 	bl	80030b4 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 811b 	beq.w	80047b6 <ctlwizchip+0x2ee>
 8004580:	21ff      	movs	r1, #255	; 0xff
 8004582:	4894      	ldr	r0, [pc, #592]	; (80047d4 <ctlwizchip+0x30c>)
 8004584:	f7fe fd96 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 8004588:	e115      	b.n	80047b6 <ctlwizchip+0x2ee>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <ctlwizchip+0xd4>
 8004594:	21ce      	movs	r1, #206	; 0xce
 8004596:	488d      	ldr	r0, [pc, #564]	; (80047cc <ctlwizchip+0x304>)
 8004598:	f7fe fd8c 	bl	80030b4 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <ctlwizchip+0xe6>
 80045a6:	213a      	movs	r1, #58	; 0x3a
 80045a8:	4889      	ldr	r0, [pc, #548]	; (80047d0 <ctlwizchip+0x308>)
 80045aa:	f7fe fd83 	bl	80030b4 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8100 	beq.w	80047ba <ctlwizchip+0x2f2>
 80045ba:	2153      	movs	r1, #83	; 0x53
 80045bc:	4885      	ldr	r0, [pc, #532]	; (80047d4 <ctlwizchip+0x30c>)
 80045be:	f7fe fd79 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 80045c2:	e0fa      	b.n	80047ba <ctlwizchip+0x2f2>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 80045c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80045c8:	f7fe fda6 	bl	8003118 <WIZCHIP_READ>
 80045cc:	4603      	mov	r3, r0
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	701a      	strb	r2, [r3, #0]
         break;
 80045d6:	e0f3      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80045d8:	f000 f958 	bl	800488c <wizchip_sw_reset>
         break;
 80045dc:	e0f0      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <ctlwizchip+0x126>
         {
            ptmp[0] = (uint8_t*)arg;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3308      	adds	r3, #8
 80045ec:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f9fd 	bl	80049f4 <wizchip_init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	e0e1      	b.n	80047c2 <ctlwizchip+0x2fa>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 80045fe:	f000 fabf 	bl	8004b80 <wizchip_getinterrupt>
 8004602:	4602      	mov	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	601a      	str	r2, [r3, #0]
         break;
 8004608:	e0da      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa7c 	bl	8004b0c <wizchip_clrinterrupt>
         break;
 8004614:	e0d4      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 face 	bl	8004bbc <wizchip_setinterruptmask>
         break;         
 8004620:	e0ce      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8004622:	f000 faf1 	bl	8004c08 <wizchip_getinterruptmask>
 8004626:	4602      	mov	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	601a      	str	r2, [r3, #0]
         break;   
 800462c:	e0c8      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	b29b      	uxth	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4619      	mov	r1, r3
 800463a:	4867      	ldr	r0, [pc, #412]	; (80047d8 <ctlwizchip+0x310>)
 800463c:	f7fe fd3a 	bl	80030b4 <WIZCHIP_WRITE>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	4619      	mov	r1, r3
 8004648:	4864      	ldr	r0, [pc, #400]	; (80047dc <ctlwizchip+0x314>)
 800464a:	f7fe fd33 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 800464e:	e0b7      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 8004650:	4861      	ldr	r0, [pc, #388]	; (80047d8 <ctlwizchip+0x310>)
 8004652:	f7fe fd61 	bl	8003118 <WIZCHIP_READ>
 8004656:	4603      	mov	r3, r0
 8004658:	b29b      	uxth	r3, r3
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	b29c      	uxth	r4, r3
 800465e:	485f      	ldr	r0, [pc, #380]	; (80047dc <ctlwizchip+0x314>)
 8004660:	f7fe fd5a 	bl	8003118 <WIZCHIP_READ>
 8004664:	4603      	mov	r3, r0
 8004666:	b29b      	uxth	r3, r3
 8004668:	4423      	add	r3, r4
 800466a:	b29a      	uxth	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	801a      	strh	r2, [r3, #0]
         break;   
 8004670:	e0a6      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_SET_IEN:
         tmp = getSYCR1();
 8004672:	485b      	ldr	r0, [pc, #364]	; (80047e0 <ctlwizchip+0x318>)
 8004674:	f7fe fd50 	bl	8003118 <WIZCHIP_READ>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d108      	bne.n	8004696 <ctlwizchip+0x1ce>
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800468a:	b2db      	uxtb	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	4854      	ldr	r0, [pc, #336]	; (80047e0 <ctlwizchip+0x318>)
 8004690:	f7fe fd10 	bl	80030b4 <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 8004694:	e094      	b.n	80047c0 <ctlwizchip+0x2f8>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4619      	mov	r1, r3
 80046a0:	484f      	ldr	r0, [pc, #316]	; (80047e0 <ctlwizchip+0x318>)
 80046a2:	f7fe fd07 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 80046a6:	e08b      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 80046a8:	484d      	ldr	r0, [pc, #308]	; (80047e0 <ctlwizchip+0x318>)
 80046aa:	f7fe fd35 	bl	8003118 <WIZCHIP_READ>
 80046ae:	4603      	mov	r3, r0
 80046b0:	09db      	lsrs	r3, r3, #7
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	701a      	strb	r2, [r3, #0]
         break;
 80046b8:	e082      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80046ba:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <ctlwizchip+0x31c>)
 80046bc:	789a      	ldrb	r2, [r3, #2]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	4a47      	ldr	r2, [pc, #284]	; (80047e4 <ctlwizchip+0x31c>)
 80046c8:	78d2      	ldrb	r2, [r2, #3]
 80046ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3302      	adds	r3, #2
 80046d0:	4a44      	ldr	r2, [pc, #272]	; (80047e4 <ctlwizchip+0x31c>)
 80046d2:	7912      	ldrb	r2, [r2, #4]
 80046d4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	3303      	adds	r3, #3
 80046da:	4a42      	ldr	r2, [pc, #264]	; (80047e4 <ctlwizchip+0x31c>)
 80046dc:	7952      	ldrb	r2, [r2, #5]
 80046de:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4a3f      	ldr	r2, [pc, #252]	; (80047e4 <ctlwizchip+0x31c>)
 80046e6:	7992      	ldrb	r2, [r2, #6]
 80046e8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3305      	adds	r3, #5
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
         break;   
 80046f2:	e065      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 80046f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046f8:	f7fe fd0e 	bl	8003118 <WIZCHIP_READ>
 80046fc:	4603      	mov	r3, r0
 80046fe:	b29b      	uxth	r3, r3
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	b29c      	uxth	r4, r3
 8004704:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004708:	f7fe fd06 	bl	8003118 <WIZCHIP_READ>
 800470c:	4603      	mov	r3, r0
 800470e:	b29b      	uxth	r3, r3
 8004710:	4423      	add	r3, r4
 8004712:	b29a      	uxth	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	801a      	strh	r2, [r3, #0]
         break;
 8004718:	e052      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 800471a:	4831      	ldr	r0, [pc, #196]	; (80047e0 <ctlwizchip+0x318>)
 800471c:	f7fe fcfc 	bl	8003118 <WIZCHIP_READ>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d108      	bne.n	800473e <ctlwizchip+0x276>
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	482a      	ldr	r0, [pc, #168]	; (80047e0 <ctlwizchip+0x318>)
 8004738:	f7fe fcbc 	bl	80030b4 <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 800473c:	e03f      	b.n	80047be <ctlwizchip+0x2f6>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d13b      	bne.n	80047be <ctlwizchip+0x2f6>
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	4619      	mov	r1, r3
 8004750:	4823      	ldr	r0, [pc, #140]	; (80047e0 <ctlwizchip+0x318>)
 8004752:	f7fe fcaf 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 8004756:	e032      	b.n	80047be <ctlwizchip+0x2f6>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 8004758:	4821      	ldr	r0, [pc, #132]	; (80047e0 <ctlwizchip+0x318>)
 800475a:	f7fe fcdd 	bl	8003118 <WIZCHIP_READ>
 800475e:	4603      	mov	r3, r0
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	701a      	strb	r2, [r3, #0]
         break;
 800476a:	e029      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_RESET_PHY:
         wizphy_reset();
 800476c:	f000 fa7a 	bl	8004c64 <wizphy_reset>
         break;
 8004770:	e026      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8004772:	6838      	ldr	r0, [r7, #0]
 8004774:	f000 fa96 	bl	8004ca4 <wizphy_setphyconf>
         break;
 8004778:	e022      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800477a:	6838      	ldr	r0, [r7, #0]
 800477c:	f000 fade 	bl	8004d3c <wizphy_getphyconf>
         break;
 8004780:	e01e      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8004782:	6838      	ldr	r0, [r7, #0]
 8004784:	f000 fb1a 	bl	8004dbc <wizphy_getphystatus>
         break;
 8004788:	e01a      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 800478a:	7dfb      	ldrb	r3, [r7, #23]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fb55 	bl	8004e3c <wizphy_setphypmode>
         break;
 8004792:	e015      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 8004794:	f000 fb74 	bl	8004e80 <wizphy_getphypmode>
 8004798:	4603      	mov	r3, r0
 800479a:	b2da      	uxtb	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	701a      	strb	r2, [r3, #0]
         break;
 80047a0:	e00e      	b.n	80047c0 <ctlwizchip+0x2f8>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 80047a2:	f000 fa51 	bl	8004c48 <wizphy_getphylink>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	701a      	strb	r2, [r3, #0]
         break;
 80047ae:	e007      	b.n	80047c0 <ctlwizchip+0x2f8>
      default:
         return -1;
 80047b0:	f04f 33ff 	mov.w	r3, #4294967295
 80047b4:	e005      	b.n	80047c2 <ctlwizchip+0x2fa>
         break;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <ctlwizchip+0x2f8>
         break;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <ctlwizchip+0x2f8>
         break;
 80047be:	bf00      	nop
   }
   return 0;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd90      	pop	{r4, r7, pc}
 80047ca:	bf00      	nop
 80047cc:	0041f400 	.word	0x0041f400
 80047d0:	0041f500 	.word	0x0041f500
 80047d4:	0041f600 	.word	0x0041f600
 80047d8:	0041c500 	.word	0x0041c500
 80047dc:	0041c600 	.word	0x0041c600
 80047e0:	00200500 	.word	0x00200500
 80047e4:	20000084 	.word	0x20000084

080047e8 <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	2b07      	cmp	r3, #7
 80047f8:	d83d      	bhi.n	8004876 <ctlnetwork+0x8e>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <ctlnetwork+0x18>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004821 	.word	0x08004821
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	0800483d 	.word	0x0800483d
 8004810:	08004849 	.word	0x08004849
 8004814:	08004851 	.word	0x08004851
 8004818:	08004859 	.word	0x08004859
 800481c:	08004867 	.word	0x08004867
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004820:	6838      	ldr	r0, [r7, #0]
 8004822:	f000 fb3f 	bl	8004ea4 <wizchip_setnetinfo>
         break;
 8004826:	e029      	b.n	800487c <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	f000 fbb9 	bl	8004fa0 <wizchip_getnetinfo>
         break;
 800482e:	e025      	b.n	800487c <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fc33 	bl	80050a0 <wizchip_setnetmode>
         break;
 800483a:	e01f      	b.n	800487c <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800483c:	f000 fc5c 	bl	80050f8 <wizchip_getnetmode>
 8004840:	4602      	mov	r2, r0
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	601a      	str	r2, [r3, #0]
         break;
 8004846:	e019      	b.n	800487c <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004848:	6838      	ldr	r0, [r7, #0]
 800484a:	f000 fc83 	bl	8005154 <wizchip_settimeout>
         break;
 800484e:	e015      	b.n	800487c <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	f000 fcbf 	bl	80051d4 <wizchip_gettimeout>
         break;
 8004856:	e011      	b.n	800487c <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	480a      	ldr	r0, [pc, #40]	; (8004888 <ctlnetwork+0xa0>)
 8004860:	f7fe fc28 	bl	80030b4 <WIZCHIP_WRITE>
         break;
 8004864:	e00a      	b.n	800487c <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 8004866:	4808      	ldr	r0, [pc, #32]	; (8004888 <ctlnetwork+0xa0>)
 8004868:	f7fe fc56 	bl	8003118 <WIZCHIP_READ>
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	701a      	strb	r2, [r3, #0]
         break;
 8004874:	e002      	b.n	800487c <ctlnetwork+0x94>
      default:
         return -1;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	e000      	b.n	800487e <ctlnetwork+0x96>
   }
   return 0;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	00212c00 	.word	0x00212c00

0800488c <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b096      	sub	sp, #88	; 0x58
 8004890:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 8004892:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004896:	f7fe fc3f 	bl	8003118 <WIZCHIP_READ>
 800489a:	4603      	mov	r3, r0
 800489c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 80048a0:	21ce      	movs	r1, #206	; 0xce
 80048a2:	4849      	ldr	r0, [pc, #292]	; (80049c8 <wizchip_sw_reset+0x13c>)
 80048a4:	f7fe fc06 	bl	80030b4 <WIZCHIP_WRITE>

   getSHAR(mac);
 80048a8:	463b      	mov	r3, r7
 80048aa:	2206      	movs	r2, #6
 80048ac:	4619      	mov	r1, r3
 80048ae:	4847      	ldr	r0, [pc, #284]	; (80049cc <wizchip_sw_reset+0x140>)
 80048b0:	f7fe fc9a 	bl	80031e8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 80048b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048b8:	2204      	movs	r2, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4844      	ldr	r0, [pc, #272]	; (80049d0 <wizchip_sw_reset+0x144>)
 80048be:	f7fe fc93 	bl	80031e8 <WIZCHIP_READ_BUF>
 80048c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048c6:	2204      	movs	r2, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4842      	ldr	r0, [pc, #264]	; (80049d4 <wizchip_sw_reset+0x148>)
 80048cc:	f7fe fc8c 	bl	80031e8 <WIZCHIP_READ_BUF>
 80048d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048d4:	2204      	movs	r2, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	483f      	ldr	r0, [pc, #252]	; (80049d8 <wizchip_sw_reset+0x14c>)
 80048da:	f7fe fc85 	bl	80031e8 <WIZCHIP_READ_BUF>
 80048de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048e2:	2210      	movs	r2, #16
 80048e4:	4619      	mov	r1, r3
 80048e6:	483d      	ldr	r0, [pc, #244]	; (80049dc <wizchip_sw_reset+0x150>)
 80048e8:	f7fe fc7e 	bl	80031e8 <WIZCHIP_READ_BUF>
 80048ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048f0:	2210      	movs	r2, #16
 80048f2:	4619      	mov	r1, r3
 80048f4:	483a      	ldr	r0, [pc, #232]	; (80049e0 <wizchip_sw_reset+0x154>)
 80048f6:	f7fe fc77 	bl	80031e8 <WIZCHIP_READ_BUF>
 80048fa:	f107 0318 	add.w	r3, r7, #24
 80048fe:	2210      	movs	r2, #16
 8004900:	4619      	mov	r1, r3
 8004902:	4838      	ldr	r0, [pc, #224]	; (80049e4 <wizchip_sw_reset+0x158>)
 8004904:	f7fe fc70 	bl	80031e8 <WIZCHIP_READ_BUF>
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	2210      	movs	r2, #16
 800490e:	4619      	mov	r1, r3
 8004910:	4835      	ldr	r0, [pc, #212]	; (80049e8 <wizchip_sw_reset+0x15c>)
 8004912:	f7fe fc69 	bl	80031e8 <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8004916:	2100      	movs	r1, #0
 8004918:	4834      	ldr	r0, [pc, #208]	; (80049ec <wizchip_sw_reset+0x160>)
 800491a:	f7fe fbcb 	bl	80030b4 <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 800491e:	4833      	ldr	r0, [pc, #204]	; (80049ec <wizchip_sw_reset+0x160>)
 8004920:	f7fe fbfa 	bl	8003118 <WIZCHIP_READ>

   NETUNLOCK();
 8004924:	213a      	movs	r1, #58	; 0x3a
 8004926:	4832      	ldr	r0, [pc, #200]	; (80049f0 <wizchip_sw_reset+0x164>)
 8004928:	f7fe fbc4 	bl	80030b4 <WIZCHIP_WRITE>

   setSHAR(mac);
 800492c:	463b      	mov	r3, r7
 800492e:	2206      	movs	r2, #6
 8004930:	4619      	mov	r1, r3
 8004932:	4826      	ldr	r0, [pc, #152]	; (80049cc <wizchip_sw_reset+0x140>)
 8004934:	f7fe fc20 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004938:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800493c:	2204      	movs	r2, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4823      	ldr	r0, [pc, #140]	; (80049d0 <wizchip_sw_reset+0x144>)
 8004942:	f7fe fc19 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004946:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800494a:	2204      	movs	r2, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4821      	ldr	r0, [pc, #132]	; (80049d4 <wizchip_sw_reset+0x148>)
 8004950:	f7fe fc12 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004954:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004958:	2204      	movs	r2, #4
 800495a:	4619      	mov	r1, r3
 800495c:	481e      	ldr	r0, [pc, #120]	; (80049d8 <wizchip_sw_reset+0x14c>)
 800495e:	f7fe fc0b 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 8004962:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004966:	2210      	movs	r2, #16
 8004968:	4619      	mov	r1, r3
 800496a:	481c      	ldr	r0, [pc, #112]	; (80049dc <wizchip_sw_reset+0x150>)
 800496c:	f7fe fc04 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 8004970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004974:	2210      	movs	r2, #16
 8004976:	4619      	mov	r1, r3
 8004978:	4819      	ldr	r0, [pc, #100]	; (80049e0 <wizchip_sw_reset+0x154>)
 800497a:	f7fe fbfd 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 800497e:	f107 0318 	add.w	r3, r7, #24
 8004982:	2210      	movs	r2, #16
 8004984:	4619      	mov	r1, r3
 8004986:	4817      	ldr	r0, [pc, #92]	; (80049e4 <wizchip_sw_reset+0x158>)
 8004988:	f7fe fbf6 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	2210      	movs	r2, #16
 8004992:	4619      	mov	r1, r3
 8004994:	4814      	ldr	r0, [pc, #80]	; (80049e8 <wizchip_sw_reset+0x15c>)
 8004996:	f7fe fbef 	bl	8003178 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 800499a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da03      	bge.n	80049aa <wizchip_sw_reset+0x11e>
 80049a2:	21ff      	movs	r1, #255	; 0xff
 80049a4:	4808      	ldr	r0, [pc, #32]	; (80049c8 <wizchip_sw_reset+0x13c>)
 80049a6:	f7fe fb85 	bl	80030b4 <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 80049aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <wizchip_sw_reset+0x132>
 80049b6:	21c5      	movs	r1, #197	; 0xc5
 80049b8:	480d      	ldr	r0, [pc, #52]	; (80049f0 <wizchip_sw_reset+0x164>)
 80049ba:	f7fe fb7b 	bl	80030b4 <WIZCHIP_WRITE>
}
 80049be:	bf00      	nop
 80049c0:	3758      	adds	r7, #88	; 0x58
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	0041f400 	.word	0x0041f400
 80049cc:	00412000 	.word	0x00412000
 80049d0:	00413000 	.word	0x00413000
 80049d4:	00413400 	.word	0x00413400
 80049d8:	00413800 	.word	0x00413800
 80049dc:	00417000 	.word	0x00417000
 80049e0:	00416000 	.word	0x00416000
 80049e4:	00414000 	.word	0x00414000
 80049e8:	00415000 	.word	0x00415000
 80049ec:	00200400 	.word	0x00200400
 80049f0:	0041f500 	.word	0x0041f500

080049f4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004a02:	f7ff ff43 	bl	800488c <wizchip_sw_reset>
   if(txsize)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03b      	beq.n	8004a84 <wizchip_init+0x90>
   {
      tmp = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e015      	b.n	8004a42 <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	4413      	add	r3, r2
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8004a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	dd02      	ble.n	8004a36 <wizchip_init+0x42>
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	e066      	b.n	8004b04 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a46:	2b07      	cmp	r3, #7
 8004a48:	dde5      	ble.n	8004a16 <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e015      	b.n	8004a7c <wizchip_init+0x88>
 8004a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	3301      	adds	r3, #1
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fe fb22 	bl	80030b4 <WIZCHIP_WRITE>
 8004a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a80:	2b07      	cmp	r3, #7
 8004a82:	dde5      	ble.n	8004a50 <wizchip_init+0x5c>
   }
   if(rxsize)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d03b      	beq.n	8004b02 <wizchip_init+0x10e>
   {
      tmp = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	e015      	b.n	8004ac0 <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 8004a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	781a      	ldrb	r2, [r3, #0]
 8004a9e:	7bbb      	ldrb	r3, [r7, #14]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8004aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aaa:	2b10      	cmp	r3, #16
 8004aac:	dd02      	ble.n	8004ab4 <wizchip_init+0xc0>
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	e027      	b.n	8004b04 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac4:	2b07      	cmp	r3, #7
 8004ac6:	dde5      	ble.n	8004a94 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	e015      	b.n	8004afa <wizchip_init+0x106>
 8004ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8004adc:	4618      	mov	r0, r3
 8004ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f7fe fae3 	bl	80030b4 <WIZCHIP_WRITE>
 8004aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	dde5      	ble.n	8004ace <wizchip_init+0xda>
   }
   return 0;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4813      	ldr	r0, [pc, #76]	; (8004b78 <wizchip_clrinterrupt+0x6c>)
 8004b2a:	f7fe fac3 	bl	80030b4 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e014      	b.n	8004b5e <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8004b34:	7aba      	ldrb	r2, [r7, #10]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	fa42 f303 	asr.w	r3, r2, r3
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <wizchip_clrinterrupt+0x4c>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	3301      	adds	r3, #1
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004b50:	21ff      	movs	r1, #255	; 0xff
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe faae 	bl	80030b4 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b07      	cmp	r3, #7
 8004b62:	dde7      	ble.n	8004b34 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 8004b64:	7a7b      	ldrb	r3, [r7, #9]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4804      	ldr	r0, [pc, #16]	; (8004b7c <wizchip_clrinterrupt+0x70>)
 8004b6a:	f7fe faa3 	bl	80030b4 <WIZCHIP_WRITE>
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	00210800 	.word	0x00210800
 8004b7c:	00212800 	.word	0x00212800

08004b80 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 8004b86:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <wizchip_getinterrupt+0x34>)
 8004b88:	f7fe fac6 	bl	8003118 <WIZCHIP_READ>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	041c      	lsls	r4, r3, #16
 8004b90:	4809      	ldr	r0, [pc, #36]	; (8004bb8 <wizchip_getinterrupt+0x38>)
 8004b92:	f7fe fac1 	bl	8003118 <WIZCHIP_READ>
 8004b96:	4603      	mov	r3, r0
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	431c      	orrs	r4, r3
 8004b9c:	f44f 1004 	mov.w	r0, #2162688	; 0x210000
 8004ba0:	f7fe faba 	bl	8003118 <WIZCHIP_READ>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4323      	orrs	r3, r4
 8004ba8:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8004baa:	687b      	ldr	r3, [r7, #4]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}
 8004bb4:	00210200 	.word	0x00210200
 8004bb8:	00210100 	.word	0x00210100

08004bbc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <wizchip_setinterruptmask+0x40>)
 8004bda:	f7fe fa6b 	bl	80030b4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	4619      	mov	r1, r3
 8004be2:	4807      	ldr	r0, [pc, #28]	; (8004c00 <wizchip_setinterruptmask+0x44>)
 8004be4:	f7fe fa66 	bl	80030b4 <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8004be8:	7b7b      	ldrb	r3, [r7, #13]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4805      	ldr	r0, [pc, #20]	; (8004c04 <wizchip_setinterruptmask+0x48>)
 8004bee:	f7fe fa61 	bl	80030b4 <WIZCHIP_WRITE>
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	00210400 	.word	0x00210400
 8004c00:	00211400 	.word	0x00211400
 8004c04:	00212400 	.word	0x00212400

08004c08 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8004c0e:	480b      	ldr	r0, [pc, #44]	; (8004c3c <wizchip_getinterruptmask+0x34>)
 8004c10:	f7fe fa82 	bl	8003118 <WIZCHIP_READ>
 8004c14:	4603      	mov	r3, r0
 8004c16:	041c      	lsls	r4, r3, #16
 8004c18:	4809      	ldr	r0, [pc, #36]	; (8004c40 <wizchip_getinterruptmask+0x38>)
 8004c1a:	f7fe fa7d 	bl	8003118 <WIZCHIP_READ>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	431c      	orrs	r4, r3
 8004c24:	4807      	ldr	r0, [pc, #28]	; (8004c44 <wizchip_getinterruptmask+0x3c>)
 8004c26:	f7fe fa77 	bl	8003118 <WIZCHIP_READ>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4323      	orrs	r3, r4
 8004c2e:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8004c30:	687b      	ldr	r3, [r7, #4]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	00212400 	.word	0x00212400
 8004c40:	00211400 	.word	0x00211400
 8004c44:	00210400 	.word	0x00210400

08004c48 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8004c4c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004c50:	f7fe fa62 	bl	8003118 <WIZCHIP_READ>
 8004c54:	4603      	mov	r3, r0
 8004c56:	b25b      	sxtb	r3, r3
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <wizphy_reset>:

void wizphy_reset(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8004c6a:	480c      	ldr	r0, [pc, #48]	; (8004c9c <wizphy_reset+0x38>)
 8004c6c:	f7fe fa54 	bl	8003118 <WIZCHIP_READ>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8004c78:	2153      	movs	r1, #83	; 0x53
 8004c7a:	4809      	ldr	r0, [pc, #36]	; (8004ca0 <wizphy_reset+0x3c>)
 8004c7c:	f7fe fa1a 	bl	80030b4 <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	4619      	mov	r1, r3
 8004c84:	4805      	ldr	r0, [pc, #20]	; (8004c9c <wizphy_reset+0x38>)
 8004c86:	f7fe fa15 	bl	80030b4 <WIZCHIP_WRITE>
   PHYLOCK();
 8004c8a:	21ff      	movs	r1, #255	; 0xff
 8004c8c:	4804      	ldr	r0, [pc, #16]	; (8004ca0 <wizphy_reset+0x3c>)
 8004c8e:	f7fe fa11 	bl	80030b4 <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	00301d00 	.word	0x00301d00
 8004ca0:	0041f600 	.word	0x0041f600

08004ca4 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d10d      	bne.n	8004cd4 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8004cb8:	481e      	ldr	r0, [pc, #120]	; (8004d34 <wizphy_setphyconf+0x90>)
 8004cba:	f7fe fa2d 	bl	8003118 <WIZCHIP_READ>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	481a      	ldr	r0, [pc, #104]	; (8004d34 <wizphy_setphyconf+0x90>)
 8004cca:	f7fe f9f3 	bl	80030b4 <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	e025      	b.n	8004d20 <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8004cd4:	4817      	ldr	r0, [pc, #92]	; (8004d34 <wizphy_setphyconf+0x90>)
 8004cd6:	f7fe fa1f 	bl	8003118 <WIZCHIP_READ>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f023 0308 	bic.w	r3, r3, #8
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4813      	ldr	r0, [pc, #76]	; (8004d34 <wizphy_setphyconf+0x90>)
 8004ce6:	f7fe f9e5 	bl	80030b4 <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d102      	bne.n	8004cf8 <wizphy_setphyconf+0x54>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e013      	b.n	8004d20 <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <wizphy_setphyconf+0x6c>
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	f043 0302 	orr.w	r3, r3, #2
 8004d0e:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	789b      	ldrb	r3, [r3, #2]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <wizphy_setphyconf+0x7c>
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	4619      	mov	r1, r3
 8004d24:	4804      	ldr	r0, [pc, #16]	; (8004d38 <wizphy_setphyconf+0x94>)
 8004d26:	f7fe f9c5 	bl	80030b4 <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	00301d00 	.word	0x00301d00
 8004d38:	00301c00 	.word	0x00301c00

08004d3c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8004d48:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004d4c:	f7fe f9e4 	bl	8003118 <WIZCHIP_READ>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8004d54:	4818      	ldr	r0, [pc, #96]	; (8004db8 <wizphy_getphyconf+0x7c>)
 8004d56:	f7fe f9df 	bl	8003118 <WIZCHIP_READ>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <wizphy_getphyconf+0x30>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e00a      	b.n	8004d82 <wizphy_getphyconf+0x46>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00301d00 	.word	0x00301d00

08004dbc <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8004dc8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004dcc:	f7fe f9a4 	bl	8003118 <WIZCHIP_READ>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8004dd4:	4818      	ldr	r0, [pc, #96]	; (8004e38 <wizphy_getphystatus+0x7c>)
 8004dd6:	f7fe f99f 	bl	8003118 <WIZCHIP_READ>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <wizphy_getphystatus+0x30>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e00a      	b.n	8004e02 <wizphy_getphystatus+0x46>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	709a      	strb	r2, [r3, #2]
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	00301d00 	.word	0x00301d00

08004e3c <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8004e46:	480d      	ldr	r0, [pc, #52]	; (8004e7c <wizphy_setphypmode+0x40>)
 8004e48:	f7fe f966 	bl	8003118 <WIZCHIP_READ>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d104      	bne.n	8004e60 <wizphy_setphypmode+0x24>
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	f043 0320 	orr.w	r3, r3, #32
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e003      	b.n	8004e68 <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	f023 0320 	bic.w	r3, r3, #32
 8004e66:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4803      	ldr	r0, [pc, #12]	; (8004e7c <wizphy_setphypmode+0x40>)
 8004e6e:	f7fe f921 	bl	80030b4 <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	00301d00 	.word	0x00301d00

08004e80 <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8004e84:	4806      	ldr	r0, [pc, #24]	; (8004ea0 <wizphy_getphypmode+0x20>)
 8004e86:	f7fe f947 	bl	8003118 <WIZCHIP_READ>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <wizphy_getphypmode+0x18>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	00301d00 	.word	0x00301d00

08004ea4 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2206      	movs	r2, #6
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	482f      	ldr	r0, [pc, #188]	; (8004f74 <wizchip_setnetinfo+0xd0>)
 8004eb8:	f7fe f95e 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	330e      	adds	r3, #14
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	482c      	ldr	r0, [pc, #176]	; (8004f78 <wizchip_setnetinfo+0xd4>)
 8004ec6:	f7fe f957 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	330a      	adds	r3, #10
 8004ece:	2204      	movs	r2, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	482a      	ldr	r0, [pc, #168]	; (8004f7c <wizchip_setnetinfo+0xd8>)
 8004ed4:	f7fe f950 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3306      	adds	r3, #6
 8004edc:	2204      	movs	r2, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4827      	ldr	r0, [pc, #156]	; (8004f80 <wizchip_setnetinfo+0xdc>)
 8004ee2:	f7fe f949 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3342      	adds	r3, #66	; 0x42
 8004eea:	2210      	movs	r2, #16
 8004eec:	4619      	mov	r1, r3
 8004eee:	4825      	ldr	r0, [pc, #148]	; (8004f84 <wizchip_setnetinfo+0xe0>)
 8004ef0:	f7fe f942 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3332      	adds	r3, #50	; 0x32
 8004ef8:	2210      	movs	r2, #16
 8004efa:	4619      	mov	r1, r3
 8004efc:	4822      	ldr	r0, [pc, #136]	; (8004f88 <wizchip_setnetinfo+0xe4>)
 8004efe:	f7fe f93b 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3312      	adds	r3, #18
 8004f06:	2210      	movs	r2, #16
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4820      	ldr	r0, [pc, #128]	; (8004f8c <wizchip_setnetinfo+0xe8>)
 8004f0c:	f7fe f934 	bl	8003178 <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3322      	adds	r3, #34	; 0x22
 8004f14:	2210      	movs	r2, #16
 8004f16:	4619      	mov	r1, r3
 8004f18:	481d      	ldr	r0, [pc, #116]	; (8004f90 <wizchip_setnetinfo+0xec>)
 8004f1a:	f7fe f92d 	bl	8003178 <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	e00a      	b.n	8004f3a <wizchip_setnetinfo+0x96>
 8004f24:	7bfa      	ldrb	r2, [r7, #15]
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <wizchip_setnetinfo+0xf0>)
 8004f32:	54d1      	strb	r1, [r2, r3]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	3301      	adds	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d9f1      	bls.n	8004f24 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e00a      	b.n	8004f5c <wizchip_setnetinfo+0xb8>
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 8004f52:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <wizchip_setnetinfo+0xf4>)
 8004f54:	54d1      	strb	r1, [r2, r3]
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b0f      	cmp	r3, #15
 8004f60:	d9f1      	bls.n	8004f46 <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <wizchip_setnetinfo+0xf8>)
 8004f6a:	701a      	strb	r2, [r3, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	00412000 	.word	0x00412000
 8004f78:	00413000 	.word	0x00413000
 8004f7c:	00413400 	.word	0x00413400
 8004f80:	00413800 	.word	0x00413800
 8004f84:	00417000 	.word	0x00417000
 8004f88:	00416000 	.word	0x00416000
 8004f8c:	00414000 	.word	0x00414000
 8004f90:	00415000 	.word	0x00415000
 8004f94:	2000014c 	.word	0x2000014c
 8004f98:	20000150 	.word	0x20000150
 8004f9c:	20000160 	.word	0x20000160

08004fa0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2206      	movs	r2, #6
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4830      	ldr	r0, [pc, #192]	; (8005074 <wizchip_getnetinfo+0xd4>)
 8004fb4:	f7fe f918 	bl	80031e8 <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	330e      	adds	r3, #14
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	482d      	ldr	r0, [pc, #180]	; (8005078 <wizchip_getnetinfo+0xd8>)
 8004fc2:	f7fe f911 	bl	80031e8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	330a      	adds	r3, #10
 8004fca:	2204      	movs	r2, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	482b      	ldr	r0, [pc, #172]	; (800507c <wizchip_getnetinfo+0xdc>)
 8004fd0:	f7fe f90a 	bl	80031e8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3306      	adds	r3, #6
 8004fd8:	2204      	movs	r2, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4828      	ldr	r0, [pc, #160]	; (8005080 <wizchip_getnetinfo+0xe0>)
 8004fde:	f7fe f903 	bl	80031e8 <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3342      	adds	r3, #66	; 0x42
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4826      	ldr	r0, [pc, #152]	; (8005084 <wizchip_getnetinfo+0xe4>)
 8004fec:	f7fe f8fc 	bl	80031e8 <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3332      	adds	r3, #50	; 0x32
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4823      	ldr	r0, [pc, #140]	; (8005088 <wizchip_getnetinfo+0xe8>)
 8004ffa:	f7fe f8f5 	bl	80031e8 <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3312      	adds	r3, #18
 8005002:	2210      	movs	r2, #16
 8005004:	4619      	mov	r1, r3
 8005006:	4821      	ldr	r0, [pc, #132]	; (800508c <wizchip_getnetinfo+0xec>)
 8005008:	f7fe f8ee 	bl	80031e8 <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3322      	adds	r3, #34	; 0x22
 8005010:	2210      	movs	r2, #16
 8005012:	4619      	mov	r1, r3
 8005014:	481e      	ldr	r0, [pc, #120]	; (8005090 <wizchip_getnetinfo+0xf0>)
 8005016:	f7fe f8e7 	bl	80031e8 <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	e00b      	b.n	8005038 <wizchip_getnetinfo+0x98>
 8005020:	7bfa      	ldrb	r2, [r7, #15]
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	491b      	ldr	r1, [pc, #108]	; (8005094 <wizchip_getnetinfo+0xf4>)
 8005026:	5c89      	ldrb	r1, [r1, r2]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4413      	add	r3, r2
 800502c:	460a      	mov	r2, r1
 800502e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	3301      	adds	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d9f0      	bls.n	8005020 <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e00b      	b.n	800505c <wizchip_getnetinfo+0xbc>
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	4913      	ldr	r1, [pc, #76]	; (8005098 <wizchip_getnetinfo+0xf8>)
 800504a:	5c89      	ldrb	r1, [r1, r2]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	460a      	mov	r2, r1
 8005052:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	3301      	adds	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d9f0      	bls.n	8005044 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <wizchip_getnetinfo+0xfc>)
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	00412000 	.word	0x00412000
 8005078:	00413000 	.word	0x00413000
 800507c:	00413400 	.word	0x00413400
 8005080:	00413800 	.word	0x00413800
 8005084:	00417000 	.word	0x00417000
 8005088:	00416000 	.word	0x00416000
 800508c:	00414000 	.word	0x00414000
 8005090:	00415000 	.word	0x00415000
 8005094:	2000014c 	.word	0x2000014c
 8005098:	20000150 	.word	0x20000150
 800509c:	20000160 	.word	0x20000160

080050a0 <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	480e      	ldr	r0, [pc, #56]	; (80050ec <wizchip_setnetmode+0x4c>)
 80050b4:	f7fd fffe 	bl	80030b4 <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4619      	mov	r1, r3
 80050c0:	480b      	ldr	r0, [pc, #44]	; (80050f0 <wizchip_setnetmode+0x50>)
 80050c2:	f7fd fff7 	bl	80030b4 <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80050d2:	f7fd ffef 	bl	80030b4 <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	0e1b      	lsrs	r3, r3, #24
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	4619      	mov	r1, r3
 80050de:	4805      	ldr	r0, [pc, #20]	; (80050f4 <wizchip_setnetmode+0x54>)
 80050e0:	f7fd ffe8 	bl	80030b4 <WIZCHIP_WRITE>
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	00400800 	.word	0x00400800
 80050f0:	00400900 	.word	0x00400900
 80050f4:	00400400 	.word	0x00400400

080050f8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 8005102:	4811      	ldr	r0, [pc, #68]	; (8005148 <wizchip_getnetmode+0x50>)
 8005104:	f7fe f808 	bl	8003118 <WIZCHIP_READ>
 8005108:	4603      	mov	r3, r0
 800510a:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	021c      	lsls	r4, r3, #8
 8005110:	480e      	ldr	r0, [pc, #56]	; (800514c <wizchip_getnetmode+0x54>)
 8005112:	f7fe f801 	bl	8003118 <WIZCHIP_READ>
 8005116:	4603      	mov	r3, r0
 8005118:	4423      	add	r3, r4
 800511a:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	041c      	lsls	r4, r3, #16
 8005120:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005124:	f7fd fff8 	bl	8003118 <WIZCHIP_READ>
 8005128:	4603      	mov	r3, r0
 800512a:	4423      	add	r3, r4
 800512c:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	061c      	lsls	r4, r3, #24
 8005132:	4807      	ldr	r0, [pc, #28]	; (8005150 <wizchip_getnetmode+0x58>)
 8005134:	f7fd fff0 	bl	8003118 <WIZCHIP_READ>
 8005138:	4603      	mov	r3, r0
 800513a:	4423      	add	r3, r4
 800513c:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 800513e:	687b      	ldr	r3, [r7, #4]
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bd90      	pop	{r4, r7, pc}
 8005148:	00400800 	.word	0x00400800
 800514c:	00400900 	.word	0x00400900
 8005150:	00400400 	.word	0x00400400

08005154 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	4817      	ldr	r0, [pc, #92]	; (80051c0 <wizchip_settimeout+0x6c>)
 8005164:	f7fd ffa6 	bl	80030b4 <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	885b      	ldrh	r3, [r3, #2]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	b29b      	uxth	r3, r3
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4619      	mov	r1, r3
 8005174:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 8005178:	f7fd ff9c 	bl	80030b4 <WIZCHIP_WRITE>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	885b      	ldrh	r3, [r3, #2]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	4619      	mov	r1, r3
 8005184:	480f      	ldr	r0, [pc, #60]	; (80051c4 <wizchip_settimeout+0x70>)
 8005186:	f7fd ff95 	bl	80030b4 <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	791b      	ldrb	r3, [r3, #4]
 800518e:	4619      	mov	r1, r3
 8005190:	480d      	ldr	r0, [pc, #52]	; (80051c8 <wizchip_settimeout+0x74>)
 8005192:	f7fd ff8f 	bl	80030b4 <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	88db      	ldrh	r3, [r3, #6]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	b29b      	uxth	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4619      	mov	r1, r3
 80051a2:	480a      	ldr	r0, [pc, #40]	; (80051cc <wizchip_settimeout+0x78>)
 80051a4:	f7fd ff86 	bl	80030b4 <WIZCHIP_WRITE>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	88db      	ldrh	r3, [r3, #6]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	4619      	mov	r1, r3
 80051b0:	4807      	ldr	r0, [pc, #28]	; (80051d0 <wizchip_settimeout+0x7c>)
 80051b2:	f7fd ff7f 	bl	80030b4 <WIZCHIP_WRITE>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	00420400 	.word	0x00420400
 80051c4:	00420100 	.word	0x00420100
 80051c8:	00420c00 	.word	0x00420c00
 80051cc:	00420800 	.word	0x00420800
 80051d0:	00420900 	.word	0x00420900

080051d4 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 80051dc:	4819      	ldr	r0, [pc, #100]	; (8005244 <wizchip_gettimeout+0x70>)
 80051de:	f7fd ff9b 	bl	8003118 <WIZCHIP_READ>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 80051ea:	f44f 0084 	mov.w	r0, #4325376	; 0x420000
 80051ee:	f7fd ff93 	bl	8003118 <WIZCHIP_READ>
 80051f2:	4603      	mov	r3, r0
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	b29c      	uxth	r4, r3
 80051fa:	4813      	ldr	r0, [pc, #76]	; (8005248 <wizchip_gettimeout+0x74>)
 80051fc:	f7fd ff8c 	bl	8003118 <WIZCHIP_READ>
 8005200:	4603      	mov	r3, r0
 8005202:	b29b      	uxth	r3, r3
 8005204:	4423      	add	r3, r4
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 800520c:	480f      	ldr	r0, [pc, #60]	; (800524c <wizchip_gettimeout+0x78>)
 800520e:	f7fd ff83 	bl	8003118 <WIZCHIP_READ>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 800521a:	480d      	ldr	r0, [pc, #52]	; (8005250 <wizchip_gettimeout+0x7c>)
 800521c:	f7fd ff7c 	bl	8003118 <WIZCHIP_READ>
 8005220:	4603      	mov	r3, r0
 8005222:	b29b      	uxth	r3, r3
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	b29c      	uxth	r4, r3
 8005228:	480a      	ldr	r0, [pc, #40]	; (8005254 <wizchip_gettimeout+0x80>)
 800522a:	f7fd ff75 	bl	8003118 <WIZCHIP_READ>
 800522e:	4603      	mov	r3, r0
 8005230:	b29b      	uxth	r3, r3
 8005232:	4423      	add	r3, r4
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	80da      	strh	r2, [r3, #6]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	bd90      	pop	{r4, r7, pc}
 8005242:	bf00      	nop
 8005244:	00420400 	.word	0x00420400
 8005248:	00420100 	.word	0x00420100
 800524c:	00420c00 	.word	0x00420c00
 8005250:	00420800 	.word	0x00420800
 8005254:	00420900 	.word	0x00420900

08005258 <__errno>:
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <__errno+0x8>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200000ac 	.word	0x200000ac

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	2500      	movs	r5, #0
 8005268:	4e0c      	ldr	r6, [pc, #48]	; (800529c <__libc_init_array+0x38>)
 800526a:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526c:	1ba4      	subs	r4, r4, r6
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	42a5      	cmp	r5, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	f000 ff74 	bl	8006160 <_init>
 8005278:	2500      	movs	r5, #0
 800527a:	4e0a      	ldr	r6, [pc, #40]	; (80052a4 <__libc_init_array+0x40>)
 800527c:	4c0a      	ldr	r4, [pc, #40]	; (80052a8 <__libc_init_array+0x44>)
 800527e:	1ba4      	subs	r4, r4, r6
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	42a5      	cmp	r5, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800528c:	4798      	blx	r3
 800528e:	3501      	adds	r5, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005296:	4798      	blx	r3
 8005298:	3501      	adds	r5, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	0800658c 	.word	0x0800658c
 80052a0:	0800658c 	.word	0x0800658c
 80052a4:	0800658c 	.word	0x0800658c
 80052a8:	08006590 	.word	0x08006590

080052ac <memset>:
 80052ac:	4603      	mov	r3, r0
 80052ae:	4402      	add	r2, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <iprintf>:
 80052bc:	b40f      	push	{r0, r1, r2, r3}
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <iprintf+0x2c>)
 80052c0:	b513      	push	{r0, r1, r4, lr}
 80052c2:	681c      	ldr	r4, [r3, #0]
 80052c4:	b124      	cbz	r4, 80052d0 <iprintf+0x14>
 80052c6:	69a3      	ldr	r3, [r4, #24]
 80052c8:	b913      	cbnz	r3, 80052d0 <iprintf+0x14>
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 fa22 	bl	8005714 <__sinit>
 80052d0:	ab05      	add	r3, sp, #20
 80052d2:	9a04      	ldr	r2, [sp, #16]
 80052d4:	68a1      	ldr	r1, [r4, #8]
 80052d6:	4620      	mov	r0, r4
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	f000 fbd7 	bl	8005a8c <_vfiprintf_r>
 80052de:	b002      	add	sp, #8
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	b004      	add	sp, #16
 80052e6:	4770      	bx	lr
 80052e8:	200000ac 	.word	0x200000ac

080052ec <_puts_r>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	460e      	mov	r6, r1
 80052f0:	4605      	mov	r5, r0
 80052f2:	b118      	cbz	r0, 80052fc <_puts_r+0x10>
 80052f4:	6983      	ldr	r3, [r0, #24]
 80052f6:	b90b      	cbnz	r3, 80052fc <_puts_r+0x10>
 80052f8:	f000 fa0c 	bl	8005714 <__sinit>
 80052fc:	69ab      	ldr	r3, [r5, #24]
 80052fe:	68ac      	ldr	r4, [r5, #8]
 8005300:	b913      	cbnz	r3, 8005308 <_puts_r+0x1c>
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fa06 	bl	8005714 <__sinit>
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <_puts_r+0xac>)
 800530a:	429c      	cmp	r4, r3
 800530c:	d117      	bne.n	800533e <_puts_r+0x52>
 800530e:	686c      	ldr	r4, [r5, #4]
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	071b      	lsls	r3, r3, #28
 8005314:	d51d      	bpl.n	8005352 <_puts_r+0x66>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	b1db      	cbz	r3, 8005352 <_puts_r+0x66>
 800531a:	3e01      	subs	r6, #1
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005322:	3b01      	subs	r3, #1
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	b9e9      	cbnz	r1, 8005364 <_puts_r+0x78>
 8005328:	2b00      	cmp	r3, #0
 800532a:	da2e      	bge.n	800538a <_puts_r+0x9e>
 800532c:	4622      	mov	r2, r4
 800532e:	210a      	movs	r1, #10
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f83f 	bl	80053b4 <__swbuf_r>
 8005336:	3001      	adds	r0, #1
 8005338:	d011      	beq.n	800535e <_puts_r+0x72>
 800533a:	200a      	movs	r0, #10
 800533c:	e011      	b.n	8005362 <_puts_r+0x76>
 800533e:	4b17      	ldr	r3, [pc, #92]	; (800539c <_puts_r+0xb0>)
 8005340:	429c      	cmp	r4, r3
 8005342:	d101      	bne.n	8005348 <_puts_r+0x5c>
 8005344:	68ac      	ldr	r4, [r5, #8]
 8005346:	e7e3      	b.n	8005310 <_puts_r+0x24>
 8005348:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <_puts_r+0xb4>)
 800534a:	429c      	cmp	r4, r3
 800534c:	bf08      	it	eq
 800534e:	68ec      	ldreq	r4, [r5, #12]
 8005350:	e7de      	b.n	8005310 <_puts_r+0x24>
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f87f 	bl	8005458 <__swsetup_r>
 800535a:	2800      	cmp	r0, #0
 800535c:	d0dd      	beq.n	800531a <_puts_r+0x2e>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	2b00      	cmp	r3, #0
 8005366:	da04      	bge.n	8005372 <_puts_r+0x86>
 8005368:	69a2      	ldr	r2, [r4, #24]
 800536a:	429a      	cmp	r2, r3
 800536c:	dc06      	bgt.n	800537c <_puts_r+0x90>
 800536e:	290a      	cmp	r1, #10
 8005370:	d004      	beq.n	800537c <_puts_r+0x90>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	6022      	str	r2, [r4, #0]
 8005378:	7019      	strb	r1, [r3, #0]
 800537a:	e7cf      	b.n	800531c <_puts_r+0x30>
 800537c:	4622      	mov	r2, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f000 f818 	bl	80053b4 <__swbuf_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d1c9      	bne.n	800531c <_puts_r+0x30>
 8005388:	e7e9      	b.n	800535e <_puts_r+0x72>
 800538a:	200a      	movs	r0, #10
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	7018      	strb	r0, [r3, #0]
 8005394:	e7e5      	b.n	8005362 <_puts_r+0x76>
 8005396:	bf00      	nop
 8005398:	08006518 	.word	0x08006518
 800539c:	08006538 	.word	0x08006538
 80053a0:	080064f8 	.word	0x080064f8

080053a4 <puts>:
 80053a4:	4b02      	ldr	r3, [pc, #8]	; (80053b0 <puts+0xc>)
 80053a6:	4601      	mov	r1, r0
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	f7ff bf9f 	b.w	80052ec <_puts_r>
 80053ae:	bf00      	nop
 80053b0:	200000ac 	.word	0x200000ac

080053b4 <__swbuf_r>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	460e      	mov	r6, r1
 80053b8:	4614      	mov	r4, r2
 80053ba:	4605      	mov	r5, r0
 80053bc:	b118      	cbz	r0, 80053c6 <__swbuf_r+0x12>
 80053be:	6983      	ldr	r3, [r0, #24]
 80053c0:	b90b      	cbnz	r3, 80053c6 <__swbuf_r+0x12>
 80053c2:	f000 f9a7 	bl	8005714 <__sinit>
 80053c6:	4b21      	ldr	r3, [pc, #132]	; (800544c <__swbuf_r+0x98>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d12a      	bne.n	8005422 <__swbuf_r+0x6e>
 80053cc:	686c      	ldr	r4, [r5, #4]
 80053ce:	69a3      	ldr	r3, [r4, #24]
 80053d0:	60a3      	str	r3, [r4, #8]
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	071a      	lsls	r2, r3, #28
 80053d6:	d52e      	bpl.n	8005436 <__swbuf_r+0x82>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	b363      	cbz	r3, 8005436 <__swbuf_r+0x82>
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	6820      	ldr	r0, [r4, #0]
 80053e0:	b2f6      	uxtb	r6, r6
 80053e2:	1ac0      	subs	r0, r0, r3
 80053e4:	6963      	ldr	r3, [r4, #20]
 80053e6:	4637      	mov	r7, r6
 80053e8:	4283      	cmp	r3, r0
 80053ea:	dc04      	bgt.n	80053f6 <__swbuf_r+0x42>
 80053ec:	4621      	mov	r1, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 f926 	bl	8005640 <_fflush_r>
 80053f4:	bb28      	cbnz	r0, 8005442 <__swbuf_r+0x8e>
 80053f6:	68a3      	ldr	r3, [r4, #8]
 80053f8:	3001      	adds	r0, #1
 80053fa:	3b01      	subs	r3, #1
 80053fc:	60a3      	str	r3, [r4, #8]
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	701e      	strb	r6, [r3, #0]
 8005406:	6963      	ldr	r3, [r4, #20]
 8005408:	4283      	cmp	r3, r0
 800540a:	d004      	beq.n	8005416 <__swbuf_r+0x62>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	07db      	lsls	r3, r3, #31
 8005410:	d519      	bpl.n	8005446 <__swbuf_r+0x92>
 8005412:	2e0a      	cmp	r6, #10
 8005414:	d117      	bne.n	8005446 <__swbuf_r+0x92>
 8005416:	4621      	mov	r1, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f000 f911 	bl	8005640 <_fflush_r>
 800541e:	b190      	cbz	r0, 8005446 <__swbuf_r+0x92>
 8005420:	e00f      	b.n	8005442 <__swbuf_r+0x8e>
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <__swbuf_r+0x9c>)
 8005424:	429c      	cmp	r4, r3
 8005426:	d101      	bne.n	800542c <__swbuf_r+0x78>
 8005428:	68ac      	ldr	r4, [r5, #8]
 800542a:	e7d0      	b.n	80053ce <__swbuf_r+0x1a>
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <__swbuf_r+0xa0>)
 800542e:	429c      	cmp	r4, r3
 8005430:	bf08      	it	eq
 8005432:	68ec      	ldreq	r4, [r5, #12]
 8005434:	e7cb      	b.n	80053ce <__swbuf_r+0x1a>
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f80d 	bl	8005458 <__swsetup_r>
 800543e:	2800      	cmp	r0, #0
 8005440:	d0cc      	beq.n	80053dc <__swbuf_r+0x28>
 8005442:	f04f 37ff 	mov.w	r7, #4294967295
 8005446:	4638      	mov	r0, r7
 8005448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800544a:	bf00      	nop
 800544c:	08006518 	.word	0x08006518
 8005450:	08006538 	.word	0x08006538
 8005454:	080064f8 	.word	0x080064f8

08005458 <__swsetup_r>:
 8005458:	4b32      	ldr	r3, [pc, #200]	; (8005524 <__swsetup_r+0xcc>)
 800545a:	b570      	push	{r4, r5, r6, lr}
 800545c:	681d      	ldr	r5, [r3, #0]
 800545e:	4606      	mov	r6, r0
 8005460:	460c      	mov	r4, r1
 8005462:	b125      	cbz	r5, 800546e <__swsetup_r+0x16>
 8005464:	69ab      	ldr	r3, [r5, #24]
 8005466:	b913      	cbnz	r3, 800546e <__swsetup_r+0x16>
 8005468:	4628      	mov	r0, r5
 800546a:	f000 f953 	bl	8005714 <__sinit>
 800546e:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <__swsetup_r+0xd0>)
 8005470:	429c      	cmp	r4, r3
 8005472:	d10f      	bne.n	8005494 <__swsetup_r+0x3c>
 8005474:	686c      	ldr	r4, [r5, #4]
 8005476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547a:	b29a      	uxth	r2, r3
 800547c:	0715      	lsls	r5, r2, #28
 800547e:	d42c      	bmi.n	80054da <__swsetup_r+0x82>
 8005480:	06d0      	lsls	r0, r2, #27
 8005482:	d411      	bmi.n	80054a8 <__swsetup_r+0x50>
 8005484:	2209      	movs	r2, #9
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	f04f 30ff 	mov.w	r0, #4294967295
 8005492:	e03e      	b.n	8005512 <__swsetup_r+0xba>
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <__swsetup_r+0xd4>)
 8005496:	429c      	cmp	r4, r3
 8005498:	d101      	bne.n	800549e <__swsetup_r+0x46>
 800549a:	68ac      	ldr	r4, [r5, #8]
 800549c:	e7eb      	b.n	8005476 <__swsetup_r+0x1e>
 800549e:	4b24      	ldr	r3, [pc, #144]	; (8005530 <__swsetup_r+0xd8>)
 80054a0:	429c      	cmp	r4, r3
 80054a2:	bf08      	it	eq
 80054a4:	68ec      	ldreq	r4, [r5, #12]
 80054a6:	e7e6      	b.n	8005476 <__swsetup_r+0x1e>
 80054a8:	0751      	lsls	r1, r2, #29
 80054aa:	d512      	bpl.n	80054d2 <__swsetup_r+0x7a>
 80054ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ae:	b141      	cbz	r1, 80054c2 <__swsetup_r+0x6a>
 80054b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054b4:	4299      	cmp	r1, r3
 80054b6:	d002      	beq.n	80054be <__swsetup_r+0x66>
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 fa19 	bl	80058f0 <_free_r>
 80054be:	2300      	movs	r3, #0
 80054c0:	6363      	str	r3, [r4, #52]	; 0x34
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	2300      	movs	r3, #0
 80054cc:	6063      	str	r3, [r4, #4]
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f043 0308 	orr.w	r3, r3, #8
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	b94b      	cbnz	r3, 80054f2 <__swsetup_r+0x9a>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e8:	d003      	beq.n	80054f2 <__swsetup_r+0x9a>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 f9bf 	bl	8005870 <__smakebuf_r>
 80054f2:	89a2      	ldrh	r2, [r4, #12]
 80054f4:	f012 0301 	ands.w	r3, r2, #1
 80054f8:	d00c      	beq.n	8005514 <__swsetup_r+0xbc>
 80054fa:	2300      	movs	r3, #0
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	6963      	ldr	r3, [r4, #20]
 8005500:	425b      	negs	r3, r3
 8005502:	61a3      	str	r3, [r4, #24]
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	b953      	cbnz	r3, 800551e <__swsetup_r+0xc6>
 8005508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005510:	d1ba      	bne.n	8005488 <__swsetup_r+0x30>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	0792      	lsls	r2, r2, #30
 8005516:	bf58      	it	pl
 8005518:	6963      	ldrpl	r3, [r4, #20]
 800551a:	60a3      	str	r3, [r4, #8]
 800551c:	e7f2      	b.n	8005504 <__swsetup_r+0xac>
 800551e:	2000      	movs	r0, #0
 8005520:	e7f7      	b.n	8005512 <__swsetup_r+0xba>
 8005522:	bf00      	nop
 8005524:	200000ac 	.word	0x200000ac
 8005528:	08006518 	.word	0x08006518
 800552c:	08006538 	.word	0x08006538
 8005530:	080064f8 	.word	0x080064f8

08005534 <__sflush_r>:
 8005534:	898a      	ldrh	r2, [r1, #12]
 8005536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	4605      	mov	r5, r0
 800553c:	0710      	lsls	r0, r2, #28
 800553e:	460c      	mov	r4, r1
 8005540:	d458      	bmi.n	80055f4 <__sflush_r+0xc0>
 8005542:	684b      	ldr	r3, [r1, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dc05      	bgt.n	8005554 <__sflush_r+0x20>
 8005548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	dc02      	bgt.n	8005554 <__sflush_r+0x20>
 800554e:	2000      	movs	r0, #0
 8005550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005556:	2e00      	cmp	r6, #0
 8005558:	d0f9      	beq.n	800554e <__sflush_r+0x1a>
 800555a:	2300      	movs	r3, #0
 800555c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005560:	682f      	ldr	r7, [r5, #0]
 8005562:	6a21      	ldr	r1, [r4, #32]
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	d032      	beq.n	80055ce <__sflush_r+0x9a>
 8005568:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	075a      	lsls	r2, r3, #29
 800556e:	d505      	bpl.n	800557c <__sflush_r+0x48>
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	1ac0      	subs	r0, r0, r3
 8005574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005576:	b10b      	cbz	r3, 800557c <__sflush_r+0x48>
 8005578:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800557a:	1ac0      	subs	r0, r0, r3
 800557c:	2300      	movs	r3, #0
 800557e:	4602      	mov	r2, r0
 8005580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005582:	6a21      	ldr	r1, [r4, #32]
 8005584:	4628      	mov	r0, r5
 8005586:	47b0      	blx	r6
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	d106      	bne.n	800559c <__sflush_r+0x68>
 800558e:	6829      	ldr	r1, [r5, #0]
 8005590:	291d      	cmp	r1, #29
 8005592:	d848      	bhi.n	8005626 <__sflush_r+0xf2>
 8005594:	4a29      	ldr	r2, [pc, #164]	; (800563c <__sflush_r+0x108>)
 8005596:	40ca      	lsrs	r2, r1
 8005598:	07d6      	lsls	r6, r2, #31
 800559a:	d544      	bpl.n	8005626 <__sflush_r+0xf2>
 800559c:	2200      	movs	r2, #0
 800559e:	6062      	str	r2, [r4, #4]
 80055a0:	6922      	ldr	r2, [r4, #16]
 80055a2:	04d9      	lsls	r1, r3, #19
 80055a4:	6022      	str	r2, [r4, #0]
 80055a6:	d504      	bpl.n	80055b2 <__sflush_r+0x7e>
 80055a8:	1c42      	adds	r2, r0, #1
 80055aa:	d101      	bne.n	80055b0 <__sflush_r+0x7c>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b903      	cbnz	r3, 80055b2 <__sflush_r+0x7e>
 80055b0:	6560      	str	r0, [r4, #84]	; 0x54
 80055b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b4:	602f      	str	r7, [r5, #0]
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d0c9      	beq.n	800554e <__sflush_r+0x1a>
 80055ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055be:	4299      	cmp	r1, r3
 80055c0:	d002      	beq.n	80055c8 <__sflush_r+0x94>
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f994 	bl	80058f0 <_free_r>
 80055c8:	2000      	movs	r0, #0
 80055ca:	6360      	str	r0, [r4, #52]	; 0x34
 80055cc:	e7c0      	b.n	8005550 <__sflush_r+0x1c>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b0      	blx	r6
 80055d4:	1c41      	adds	r1, r0, #1
 80055d6:	d1c8      	bne.n	800556a <__sflush_r+0x36>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0c5      	beq.n	800556a <__sflush_r+0x36>
 80055de:	2b1d      	cmp	r3, #29
 80055e0:	d001      	beq.n	80055e6 <__sflush_r+0xb2>
 80055e2:	2b16      	cmp	r3, #22
 80055e4:	d101      	bne.n	80055ea <__sflush_r+0xb6>
 80055e6:	602f      	str	r7, [r5, #0]
 80055e8:	e7b1      	b.n	800554e <__sflush_r+0x1a>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f0:	81a3      	strh	r3, [r4, #12]
 80055f2:	e7ad      	b.n	8005550 <__sflush_r+0x1c>
 80055f4:	690f      	ldr	r7, [r1, #16]
 80055f6:	2f00      	cmp	r7, #0
 80055f8:	d0a9      	beq.n	800554e <__sflush_r+0x1a>
 80055fa:	0793      	lsls	r3, r2, #30
 80055fc:	bf18      	it	ne
 80055fe:	2300      	movne	r3, #0
 8005600:	680e      	ldr	r6, [r1, #0]
 8005602:	bf08      	it	eq
 8005604:	694b      	ldreq	r3, [r1, #20]
 8005606:	eba6 0807 	sub.w	r8, r6, r7
 800560a:	600f      	str	r7, [r1, #0]
 800560c:	608b      	str	r3, [r1, #8]
 800560e:	f1b8 0f00 	cmp.w	r8, #0
 8005612:	dd9c      	ble.n	800554e <__sflush_r+0x1a>
 8005614:	4643      	mov	r3, r8
 8005616:	463a      	mov	r2, r7
 8005618:	6a21      	ldr	r1, [r4, #32]
 800561a:	4628      	mov	r0, r5
 800561c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800561e:	47b0      	blx	r6
 8005620:	2800      	cmp	r0, #0
 8005622:	dc06      	bgt.n	8005632 <__sflush_r+0xfe>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	e78e      	b.n	8005550 <__sflush_r+0x1c>
 8005632:	4407      	add	r7, r0
 8005634:	eba8 0800 	sub.w	r8, r8, r0
 8005638:	e7e9      	b.n	800560e <__sflush_r+0xda>
 800563a:	bf00      	nop
 800563c:	20400001 	.word	0x20400001

08005640 <_fflush_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	690b      	ldr	r3, [r1, #16]
 8005644:	4605      	mov	r5, r0
 8005646:	460c      	mov	r4, r1
 8005648:	b1db      	cbz	r3, 8005682 <_fflush_r+0x42>
 800564a:	b118      	cbz	r0, 8005654 <_fflush_r+0x14>
 800564c:	6983      	ldr	r3, [r0, #24]
 800564e:	b90b      	cbnz	r3, 8005654 <_fflush_r+0x14>
 8005650:	f000 f860 	bl	8005714 <__sinit>
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <_fflush_r+0x48>)
 8005656:	429c      	cmp	r4, r3
 8005658:	d109      	bne.n	800566e <_fflush_r+0x2e>
 800565a:	686c      	ldr	r4, [r5, #4]
 800565c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005660:	b17b      	cbz	r3, 8005682 <_fflush_r+0x42>
 8005662:	4621      	mov	r1, r4
 8005664:	4628      	mov	r0, r5
 8005666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566a:	f7ff bf63 	b.w	8005534 <__sflush_r>
 800566e:	4b07      	ldr	r3, [pc, #28]	; (800568c <_fflush_r+0x4c>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d101      	bne.n	8005678 <_fflush_r+0x38>
 8005674:	68ac      	ldr	r4, [r5, #8]
 8005676:	e7f1      	b.n	800565c <_fflush_r+0x1c>
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <_fflush_r+0x50>)
 800567a:	429c      	cmp	r4, r3
 800567c:	bf08      	it	eq
 800567e:	68ec      	ldreq	r4, [r5, #12]
 8005680:	e7ec      	b.n	800565c <_fflush_r+0x1c>
 8005682:	2000      	movs	r0, #0
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	08006518 	.word	0x08006518
 800568c:	08006538 	.word	0x08006538
 8005690:	080064f8 	.word	0x080064f8

08005694 <std>:
 8005694:	2300      	movs	r3, #0
 8005696:	b510      	push	{r4, lr}
 8005698:	4604      	mov	r4, r0
 800569a:	e9c0 3300 	strd	r3, r3, [r0]
 800569e:	6083      	str	r3, [r0, #8]
 80056a0:	8181      	strh	r1, [r0, #12]
 80056a2:	6643      	str	r3, [r0, #100]	; 0x64
 80056a4:	81c2      	strh	r2, [r0, #14]
 80056a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056aa:	6183      	str	r3, [r0, #24]
 80056ac:	4619      	mov	r1, r3
 80056ae:	2208      	movs	r2, #8
 80056b0:	305c      	adds	r0, #92	; 0x5c
 80056b2:	f7ff fdfb 	bl	80052ac <memset>
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <std+0x38>)
 80056b8:	6224      	str	r4, [r4, #32]
 80056ba:	6263      	str	r3, [r4, #36]	; 0x24
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <std+0x3c>)
 80056be:	62a3      	str	r3, [r4, #40]	; 0x28
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <std+0x40>)
 80056c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <std+0x44>)
 80056c6:	6323      	str	r3, [r4, #48]	; 0x30
 80056c8:	bd10      	pop	{r4, pc}
 80056ca:	bf00      	nop
 80056cc:	08005fe9 	.word	0x08005fe9
 80056d0:	0800600b 	.word	0x0800600b
 80056d4:	08006043 	.word	0x08006043
 80056d8:	08006067 	.word	0x08006067

080056dc <_cleanup_r>:
 80056dc:	4901      	ldr	r1, [pc, #4]	; (80056e4 <_cleanup_r+0x8>)
 80056de:	f000 b885 	b.w	80057ec <_fwalk_reent>
 80056e2:	bf00      	nop
 80056e4:	08005641 	.word	0x08005641

080056e8 <__sfmoreglue>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	2568      	movs	r5, #104	; 0x68
 80056ec:	1e4a      	subs	r2, r1, #1
 80056ee:	4355      	muls	r5, r2
 80056f0:	460e      	mov	r6, r1
 80056f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056f6:	f000 f947 	bl	8005988 <_malloc_r>
 80056fa:	4604      	mov	r4, r0
 80056fc:	b140      	cbz	r0, 8005710 <__sfmoreglue+0x28>
 80056fe:	2100      	movs	r1, #0
 8005700:	e9c0 1600 	strd	r1, r6, [r0]
 8005704:	300c      	adds	r0, #12
 8005706:	60a0      	str	r0, [r4, #8]
 8005708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800570c:	f7ff fdce 	bl	80052ac <memset>
 8005710:	4620      	mov	r0, r4
 8005712:	bd70      	pop	{r4, r5, r6, pc}

08005714 <__sinit>:
 8005714:	6983      	ldr	r3, [r0, #24]
 8005716:	b510      	push	{r4, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	bb33      	cbnz	r3, 800576a <__sinit+0x56>
 800571c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005720:	6503      	str	r3, [r0, #80]	; 0x50
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <__sinit+0x58>)
 8005724:	4a12      	ldr	r2, [pc, #72]	; (8005770 <__sinit+0x5c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6282      	str	r2, [r0, #40]	; 0x28
 800572a:	4298      	cmp	r0, r3
 800572c:	bf04      	itt	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	6183      	streq	r3, [r0, #24]
 8005732:	f000 f81f 	bl	8005774 <__sfp>
 8005736:	6060      	str	r0, [r4, #4]
 8005738:	4620      	mov	r0, r4
 800573a:	f000 f81b 	bl	8005774 <__sfp>
 800573e:	60a0      	str	r0, [r4, #8]
 8005740:	4620      	mov	r0, r4
 8005742:	f000 f817 	bl	8005774 <__sfp>
 8005746:	2200      	movs	r2, #0
 8005748:	60e0      	str	r0, [r4, #12]
 800574a:	2104      	movs	r1, #4
 800574c:	6860      	ldr	r0, [r4, #4]
 800574e:	f7ff ffa1 	bl	8005694 <std>
 8005752:	2201      	movs	r2, #1
 8005754:	2109      	movs	r1, #9
 8005756:	68a0      	ldr	r0, [r4, #8]
 8005758:	f7ff ff9c 	bl	8005694 <std>
 800575c:	2202      	movs	r2, #2
 800575e:	2112      	movs	r1, #18
 8005760:	68e0      	ldr	r0, [r4, #12]
 8005762:	f7ff ff97 	bl	8005694 <std>
 8005766:	2301      	movs	r3, #1
 8005768:	61a3      	str	r3, [r4, #24]
 800576a:	bd10      	pop	{r4, pc}
 800576c:	080064f4 	.word	0x080064f4
 8005770:	080056dd 	.word	0x080056dd

08005774 <__sfp>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <__sfp+0x70>)
 8005778:	4607      	mov	r7, r0
 800577a:	681e      	ldr	r6, [r3, #0]
 800577c:	69b3      	ldr	r3, [r6, #24]
 800577e:	b913      	cbnz	r3, 8005786 <__sfp+0x12>
 8005780:	4630      	mov	r0, r6
 8005782:	f7ff ffc7 	bl	8005714 <__sinit>
 8005786:	3648      	adds	r6, #72	; 0x48
 8005788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800578c:	3b01      	subs	r3, #1
 800578e:	d503      	bpl.n	8005798 <__sfp+0x24>
 8005790:	6833      	ldr	r3, [r6, #0]
 8005792:	b133      	cbz	r3, 80057a2 <__sfp+0x2e>
 8005794:	6836      	ldr	r6, [r6, #0]
 8005796:	e7f7      	b.n	8005788 <__sfp+0x14>
 8005798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800579c:	b16d      	cbz	r5, 80057ba <__sfp+0x46>
 800579e:	3468      	adds	r4, #104	; 0x68
 80057a0:	e7f4      	b.n	800578c <__sfp+0x18>
 80057a2:	2104      	movs	r1, #4
 80057a4:	4638      	mov	r0, r7
 80057a6:	f7ff ff9f 	bl	80056e8 <__sfmoreglue>
 80057aa:	6030      	str	r0, [r6, #0]
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d1f1      	bne.n	8005794 <__sfp+0x20>
 80057b0:	230c      	movs	r3, #12
 80057b2:	4604      	mov	r4, r0
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4620      	mov	r0, r4
 80057b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <__sfp+0x74>)
 80057bc:	6665      	str	r5, [r4, #100]	; 0x64
 80057be:	e9c4 5500 	strd	r5, r5, [r4]
 80057c2:	60a5      	str	r5, [r4, #8]
 80057c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057cc:	2208      	movs	r2, #8
 80057ce:	4629      	mov	r1, r5
 80057d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057d4:	f7ff fd6a 	bl	80052ac <memset>
 80057d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057e0:	e7e9      	b.n	80057b6 <__sfp+0x42>
 80057e2:	bf00      	nop
 80057e4:	080064f4 	.word	0x080064f4
 80057e8:	ffff0001 	.word	0xffff0001

080057ec <_fwalk_reent>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	4680      	mov	r8, r0
 80057f2:	4689      	mov	r9, r1
 80057f4:	2600      	movs	r6, #0
 80057f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057fa:	b914      	cbnz	r4, 8005802 <_fwalk_reent+0x16>
 80057fc:	4630      	mov	r0, r6
 80057fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005802:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005806:	3f01      	subs	r7, #1
 8005808:	d501      	bpl.n	800580e <_fwalk_reent+0x22>
 800580a:	6824      	ldr	r4, [r4, #0]
 800580c:	e7f5      	b.n	80057fa <_fwalk_reent+0xe>
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d907      	bls.n	8005824 <_fwalk_reent+0x38>
 8005814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005818:	3301      	adds	r3, #1
 800581a:	d003      	beq.n	8005824 <_fwalk_reent+0x38>
 800581c:	4629      	mov	r1, r5
 800581e:	4640      	mov	r0, r8
 8005820:	47c8      	blx	r9
 8005822:	4306      	orrs	r6, r0
 8005824:	3568      	adds	r5, #104	; 0x68
 8005826:	e7ee      	b.n	8005806 <_fwalk_reent+0x1a>

08005828 <__swhatbuf_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	b096      	sub	sp, #88	; 0x58
 8005832:	2900      	cmp	r1, #0
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	da07      	bge.n	800584a <__swhatbuf_r+0x22>
 800583a:	2300      	movs	r3, #0
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	89b3      	ldrh	r3, [r6, #12]
 8005840:	061a      	lsls	r2, r3, #24
 8005842:	d410      	bmi.n	8005866 <__swhatbuf_r+0x3e>
 8005844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005848:	e00e      	b.n	8005868 <__swhatbuf_r+0x40>
 800584a:	466a      	mov	r2, sp
 800584c:	f000 fc32 	bl	80060b4 <_fstat_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	dbf2      	blt.n	800583a <__swhatbuf_r+0x12>
 8005854:	9a01      	ldr	r2, [sp, #4]
 8005856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800585a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800585e:	425a      	negs	r2, r3
 8005860:	415a      	adcs	r2, r3
 8005862:	602a      	str	r2, [r5, #0]
 8005864:	e7ee      	b.n	8005844 <__swhatbuf_r+0x1c>
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	2000      	movs	r0, #0
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	b016      	add	sp, #88	; 0x58
 800586e:	bd70      	pop	{r4, r5, r6, pc}

08005870 <__smakebuf_r>:
 8005870:	898b      	ldrh	r3, [r1, #12]
 8005872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005874:	079d      	lsls	r5, r3, #30
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	d507      	bpl.n	800588c <__smakebuf_r+0x1c>
 800587c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2301      	movs	r3, #1
 8005886:	6163      	str	r3, [r4, #20]
 8005888:	b002      	add	sp, #8
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	ab01      	add	r3, sp, #4
 800588e:	466a      	mov	r2, sp
 8005890:	f7ff ffca 	bl	8005828 <__swhatbuf_r>
 8005894:	9900      	ldr	r1, [sp, #0]
 8005896:	4605      	mov	r5, r0
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f875 	bl	8005988 <_malloc_r>
 800589e:	b948      	cbnz	r0, 80058b4 <__smakebuf_r+0x44>
 80058a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d4ef      	bmi.n	8005888 <__smakebuf_r+0x18>
 80058a8:	f023 0303 	bic.w	r3, r3, #3
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7e3      	b.n	800587c <__smakebuf_r+0xc>
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <__smakebuf_r+0x7c>)
 80058b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	6020      	str	r0, [r4, #0]
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	6120      	str	r0, [r4, #16]
 80058c6:	6163      	str	r3, [r4, #20]
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	b15b      	cbz	r3, 80058e4 <__smakebuf_r+0x74>
 80058cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 fc01 	bl	80060d8 <_isatty_r>
 80058d6:	b128      	cbz	r0, 80058e4 <__smakebuf_r+0x74>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	431d      	orrs	r5, r3
 80058e8:	81a5      	strh	r5, [r4, #12]
 80058ea:	e7cd      	b.n	8005888 <__smakebuf_r+0x18>
 80058ec:	080056dd 	.word	0x080056dd

080058f0 <_free_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4605      	mov	r5, r0
 80058f4:	2900      	cmp	r1, #0
 80058f6:	d043      	beq.n	8005980 <_free_r+0x90>
 80058f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058fc:	1f0c      	subs	r4, r1, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfb8      	it	lt
 8005902:	18e4      	addlt	r4, r4, r3
 8005904:	f000 fc18 	bl	8006138 <__malloc_lock>
 8005908:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <_free_r+0x94>)
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	4610      	mov	r0, r2
 800590e:	b933      	cbnz	r3, 800591e <_free_r+0x2e>
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	6014      	str	r4, [r2, #0]
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591a:	f000 bc0e 	b.w	800613a <__malloc_unlock>
 800591e:	42a3      	cmp	r3, r4
 8005920:	d90b      	bls.n	800593a <_free_r+0x4a>
 8005922:	6821      	ldr	r1, [r4, #0]
 8005924:	1862      	adds	r2, r4, r1
 8005926:	4293      	cmp	r3, r2
 8005928:	bf01      	itttt	eq
 800592a:	681a      	ldreq	r2, [r3, #0]
 800592c:	685b      	ldreq	r3, [r3, #4]
 800592e:	1852      	addeq	r2, r2, r1
 8005930:	6022      	streq	r2, [r4, #0]
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	6004      	str	r4, [r0, #0]
 8005936:	e7ed      	b.n	8005914 <_free_r+0x24>
 8005938:	4613      	mov	r3, r2
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	b10a      	cbz	r2, 8005942 <_free_r+0x52>
 800593e:	42a2      	cmp	r2, r4
 8005940:	d9fa      	bls.n	8005938 <_free_r+0x48>
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	1858      	adds	r0, r3, r1
 8005946:	42a0      	cmp	r0, r4
 8005948:	d10b      	bne.n	8005962 <_free_r+0x72>
 800594a:	6820      	ldr	r0, [r4, #0]
 800594c:	4401      	add	r1, r0
 800594e:	1858      	adds	r0, r3, r1
 8005950:	4282      	cmp	r2, r0
 8005952:	6019      	str	r1, [r3, #0]
 8005954:	d1de      	bne.n	8005914 <_free_r+0x24>
 8005956:	6810      	ldr	r0, [r2, #0]
 8005958:	6852      	ldr	r2, [r2, #4]
 800595a:	4401      	add	r1, r0
 800595c:	6019      	str	r1, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	e7d8      	b.n	8005914 <_free_r+0x24>
 8005962:	d902      	bls.n	800596a <_free_r+0x7a>
 8005964:	230c      	movs	r3, #12
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	e7d4      	b.n	8005914 <_free_r+0x24>
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	1821      	adds	r1, r4, r0
 800596e:	428a      	cmp	r2, r1
 8005970:	bf01      	itttt	eq
 8005972:	6811      	ldreq	r1, [r2, #0]
 8005974:	6852      	ldreq	r2, [r2, #4]
 8005976:	1809      	addeq	r1, r1, r0
 8005978:	6021      	streq	r1, [r4, #0]
 800597a:	6062      	str	r2, [r4, #4]
 800597c:	605c      	str	r4, [r3, #4]
 800597e:	e7c9      	b.n	8005914 <_free_r+0x24>
 8005980:	bd38      	pop	{r3, r4, r5, pc}
 8005982:	bf00      	nop
 8005984:	20000164 	.word	0x20000164

08005988 <_malloc_r>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	1ccd      	adds	r5, r1, #3
 800598c:	f025 0503 	bic.w	r5, r5, #3
 8005990:	3508      	adds	r5, #8
 8005992:	2d0c      	cmp	r5, #12
 8005994:	bf38      	it	cc
 8005996:	250c      	movcc	r5, #12
 8005998:	2d00      	cmp	r5, #0
 800599a:	4606      	mov	r6, r0
 800599c:	db01      	blt.n	80059a2 <_malloc_r+0x1a>
 800599e:	42a9      	cmp	r1, r5
 80059a0:	d903      	bls.n	80059aa <_malloc_r+0x22>
 80059a2:	230c      	movs	r3, #12
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	2000      	movs	r0, #0
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	f000 fbc5 	bl	8006138 <__malloc_lock>
 80059ae:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <_malloc_r+0xac>)
 80059b0:	6814      	ldr	r4, [r2, #0]
 80059b2:	4621      	mov	r1, r4
 80059b4:	b991      	cbnz	r1, 80059dc <_malloc_r+0x54>
 80059b6:	4c20      	ldr	r4, [pc, #128]	; (8005a38 <_malloc_r+0xb0>)
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	b91b      	cbnz	r3, 80059c4 <_malloc_r+0x3c>
 80059bc:	4630      	mov	r0, r6
 80059be:	f000 fb03 	bl	8005fc8 <_sbrk_r>
 80059c2:	6020      	str	r0, [r4, #0]
 80059c4:	4629      	mov	r1, r5
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 fafe 	bl	8005fc8 <_sbrk_r>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d124      	bne.n	8005a1a <_malloc_r+0x92>
 80059d0:	230c      	movs	r3, #12
 80059d2:	4630      	mov	r0, r6
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	f000 fbb0 	bl	800613a <__malloc_unlock>
 80059da:	e7e4      	b.n	80059a6 <_malloc_r+0x1e>
 80059dc:	680b      	ldr	r3, [r1, #0]
 80059de:	1b5b      	subs	r3, r3, r5
 80059e0:	d418      	bmi.n	8005a14 <_malloc_r+0x8c>
 80059e2:	2b0b      	cmp	r3, #11
 80059e4:	d90f      	bls.n	8005a06 <_malloc_r+0x7e>
 80059e6:	600b      	str	r3, [r1, #0]
 80059e8:	18cc      	adds	r4, r1, r3
 80059ea:	50cd      	str	r5, [r1, r3]
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 fba4 	bl	800613a <__malloc_unlock>
 80059f2:	f104 000b 	add.w	r0, r4, #11
 80059f6:	1d23      	adds	r3, r4, #4
 80059f8:	f020 0007 	bic.w	r0, r0, #7
 80059fc:	1ac3      	subs	r3, r0, r3
 80059fe:	d0d3      	beq.n	80059a8 <_malloc_r+0x20>
 8005a00:	425a      	negs	r2, r3
 8005a02:	50e2      	str	r2, [r4, r3]
 8005a04:	e7d0      	b.n	80059a8 <_malloc_r+0x20>
 8005a06:	684b      	ldr	r3, [r1, #4]
 8005a08:	428c      	cmp	r4, r1
 8005a0a:	bf16      	itet	ne
 8005a0c:	6063      	strne	r3, [r4, #4]
 8005a0e:	6013      	streq	r3, [r2, #0]
 8005a10:	460c      	movne	r4, r1
 8005a12:	e7eb      	b.n	80059ec <_malloc_r+0x64>
 8005a14:	460c      	mov	r4, r1
 8005a16:	6849      	ldr	r1, [r1, #4]
 8005a18:	e7cc      	b.n	80059b4 <_malloc_r+0x2c>
 8005a1a:	1cc4      	adds	r4, r0, #3
 8005a1c:	f024 0403 	bic.w	r4, r4, #3
 8005a20:	42a0      	cmp	r0, r4
 8005a22:	d005      	beq.n	8005a30 <_malloc_r+0xa8>
 8005a24:	1a21      	subs	r1, r4, r0
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 face 	bl	8005fc8 <_sbrk_r>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d0cf      	beq.n	80059d0 <_malloc_r+0x48>
 8005a30:	6025      	str	r5, [r4, #0]
 8005a32:	e7db      	b.n	80059ec <_malloc_r+0x64>
 8005a34:	20000164 	.word	0x20000164
 8005a38:	20000168 	.word	0x20000168

08005a3c <__sfputc_r>:
 8005a3c:	6893      	ldr	r3, [r2, #8]
 8005a3e:	b410      	push	{r4}
 8005a40:	3b01      	subs	r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	6093      	str	r3, [r2, #8]
 8005a46:	da07      	bge.n	8005a58 <__sfputc_r+0x1c>
 8005a48:	6994      	ldr	r4, [r2, #24]
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	db01      	blt.n	8005a52 <__sfputc_r+0x16>
 8005a4e:	290a      	cmp	r1, #10
 8005a50:	d102      	bne.n	8005a58 <__sfputc_r+0x1c>
 8005a52:	bc10      	pop	{r4}
 8005a54:	f7ff bcae 	b.w	80053b4 <__swbuf_r>
 8005a58:	6813      	ldr	r3, [r2, #0]
 8005a5a:	1c58      	adds	r0, r3, #1
 8005a5c:	6010      	str	r0, [r2, #0]
 8005a5e:	7019      	strb	r1, [r3, #0]
 8005a60:	4608      	mov	r0, r1
 8005a62:	bc10      	pop	{r4}
 8005a64:	4770      	bx	lr

08005a66 <__sfputs_r>:
 8005a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a68:	4606      	mov	r6, r0
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	18d5      	adds	r5, r2, r3
 8005a70:	42ac      	cmp	r4, r5
 8005a72:	d101      	bne.n	8005a78 <__sfputs_r+0x12>
 8005a74:	2000      	movs	r0, #0
 8005a76:	e007      	b.n	8005a88 <__sfputs_r+0x22>
 8005a78:	463a      	mov	r2, r7
 8005a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ffdc 	bl	8005a3c <__sfputc_r>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d1f3      	bne.n	8005a70 <__sfputs_r+0xa>
 8005a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a8c <_vfiprintf_r>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	460c      	mov	r4, r1
 8005a92:	b09d      	sub	sp, #116	; 0x74
 8005a94:	4617      	mov	r7, r2
 8005a96:	461d      	mov	r5, r3
 8005a98:	4606      	mov	r6, r0
 8005a9a:	b118      	cbz	r0, 8005aa4 <_vfiprintf_r+0x18>
 8005a9c:	6983      	ldr	r3, [r0, #24]
 8005a9e:	b90b      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x18>
 8005aa0:	f7ff fe38 	bl	8005714 <__sinit>
 8005aa4:	4b7c      	ldr	r3, [pc, #496]	; (8005c98 <_vfiprintf_r+0x20c>)
 8005aa6:	429c      	cmp	r4, r3
 8005aa8:	d158      	bne.n	8005b5c <_vfiprintf_r+0xd0>
 8005aaa:	6874      	ldr	r4, [r6, #4]
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	0718      	lsls	r0, r3, #28
 8005ab0:	d55e      	bpl.n	8005b70 <_vfiprintf_r+0xe4>
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d05b      	beq.n	8005b70 <_vfiprintf_r+0xe4>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9309      	str	r3, [sp, #36]	; 0x24
 8005abc:	2320      	movs	r3, #32
 8005abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ac2:	2330      	movs	r3, #48	; 0x30
 8005ac4:	f04f 0b01 	mov.w	fp, #1
 8005ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005acc:	9503      	str	r5, [sp, #12]
 8005ace:	46b8      	mov	r8, r7
 8005ad0:	4645      	mov	r5, r8
 8005ad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ad6:	b10b      	cbz	r3, 8005adc <_vfiprintf_r+0x50>
 8005ad8:	2b25      	cmp	r3, #37	; 0x25
 8005ada:	d154      	bne.n	8005b86 <_vfiprintf_r+0xfa>
 8005adc:	ebb8 0a07 	subs.w	sl, r8, r7
 8005ae0:	d00b      	beq.n	8005afa <_vfiprintf_r+0x6e>
 8005ae2:	4653      	mov	r3, sl
 8005ae4:	463a      	mov	r2, r7
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7ff ffbc 	bl	8005a66 <__sfputs_r>
 8005aee:	3001      	adds	r0, #1
 8005af0:	f000 80c2 	beq.w	8005c78 <_vfiprintf_r+0x1ec>
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	4453      	add	r3, sl
 8005af8:	9309      	str	r3, [sp, #36]	; 0x24
 8005afa:	f898 3000 	ldrb.w	r3, [r8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80ba 	beq.w	8005c78 <_vfiprintf_r+0x1ec>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	9307      	str	r3, [sp, #28]
 8005b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b16:	931a      	str	r3, [sp, #104]	; 0x68
 8005b18:	46a8      	mov	r8, r5
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005b20:	485e      	ldr	r0, [pc, #376]	; (8005c9c <_vfiprintf_r+0x210>)
 8005b22:	f000 fafb 	bl	800611c <memchr>
 8005b26:	9b04      	ldr	r3, [sp, #16]
 8005b28:	bb78      	cbnz	r0, 8005b8a <_vfiprintf_r+0xfe>
 8005b2a:	06d9      	lsls	r1, r3, #27
 8005b2c:	bf44      	itt	mi
 8005b2e:	2220      	movmi	r2, #32
 8005b30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b34:	071a      	lsls	r2, r3, #28
 8005b36:	bf44      	itt	mi
 8005b38:	222b      	movmi	r2, #43	; 0x2b
 8005b3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b3e:	782a      	ldrb	r2, [r5, #0]
 8005b40:	2a2a      	cmp	r2, #42	; 0x2a
 8005b42:	d02a      	beq.n	8005b9a <_vfiprintf_r+0x10e>
 8005b44:	46a8      	mov	r8, r5
 8005b46:	2000      	movs	r0, #0
 8005b48:	250a      	movs	r5, #10
 8005b4a:	9a07      	ldr	r2, [sp, #28]
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b52:	3b30      	subs	r3, #48	; 0x30
 8005b54:	2b09      	cmp	r3, #9
 8005b56:	d969      	bls.n	8005c2c <_vfiprintf_r+0x1a0>
 8005b58:	b360      	cbz	r0, 8005bb4 <_vfiprintf_r+0x128>
 8005b5a:	e024      	b.n	8005ba6 <_vfiprintf_r+0x11a>
 8005b5c:	4b50      	ldr	r3, [pc, #320]	; (8005ca0 <_vfiprintf_r+0x214>)
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	d101      	bne.n	8005b66 <_vfiprintf_r+0xda>
 8005b62:	68b4      	ldr	r4, [r6, #8]
 8005b64:	e7a2      	b.n	8005aac <_vfiprintf_r+0x20>
 8005b66:	4b4f      	ldr	r3, [pc, #316]	; (8005ca4 <_vfiprintf_r+0x218>)
 8005b68:	429c      	cmp	r4, r3
 8005b6a:	bf08      	it	eq
 8005b6c:	68f4      	ldreq	r4, [r6, #12]
 8005b6e:	e79d      	b.n	8005aac <_vfiprintf_r+0x20>
 8005b70:	4621      	mov	r1, r4
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7ff fc70 	bl	8005458 <__swsetup_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d09d      	beq.n	8005ab8 <_vfiprintf_r+0x2c>
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	b01d      	add	sp, #116	; 0x74
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	46a8      	mov	r8, r5
 8005b88:	e7a2      	b.n	8005ad0 <_vfiprintf_r+0x44>
 8005b8a:	4a44      	ldr	r2, [pc, #272]	; (8005c9c <_vfiprintf_r+0x210>)
 8005b8c:	4645      	mov	r5, r8
 8005b8e:	1a80      	subs	r0, r0, r2
 8005b90:	fa0b f000 	lsl.w	r0, fp, r0
 8005b94:	4318      	orrs	r0, r3
 8005b96:	9004      	str	r0, [sp, #16]
 8005b98:	e7be      	b.n	8005b18 <_vfiprintf_r+0x8c>
 8005b9a:	9a03      	ldr	r2, [sp, #12]
 8005b9c:	1d11      	adds	r1, r2, #4
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	9103      	str	r1, [sp, #12]
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	db01      	blt.n	8005baa <_vfiprintf_r+0x11e>
 8005ba6:	9207      	str	r2, [sp, #28]
 8005ba8:	e004      	b.n	8005bb4 <_vfiprintf_r+0x128>
 8005baa:	4252      	negs	r2, r2
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	9207      	str	r2, [sp, #28]
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	f898 3000 	ldrb.w	r3, [r8]
 8005bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bba:	d10e      	bne.n	8005bda <_vfiprintf_r+0x14e>
 8005bbc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc2:	d138      	bne.n	8005c36 <_vfiprintf_r+0x1aa>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	f108 0802 	add.w	r8, r8, #2
 8005bca:	1d1a      	adds	r2, r3, #4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	9203      	str	r2, [sp, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bfb8      	it	lt
 8005bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	4d33      	ldr	r5, [pc, #204]	; (8005ca8 <_vfiprintf_r+0x21c>)
 8005bdc:	2203      	movs	r2, #3
 8005bde:	f898 1000 	ldrb.w	r1, [r8]
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 fa9a 	bl	800611c <memchr>
 8005be8:	b140      	cbz	r0, 8005bfc <_vfiprintf_r+0x170>
 8005bea:	2340      	movs	r3, #64	; 0x40
 8005bec:	1b40      	subs	r0, r0, r5
 8005bee:	fa03 f000 	lsl.w	r0, r3, r0
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	f108 0801 	add.w	r8, r8, #1
 8005bf8:	4303      	orrs	r3, r0
 8005bfa:	9304      	str	r3, [sp, #16]
 8005bfc:	f898 1000 	ldrb.w	r1, [r8]
 8005c00:	2206      	movs	r2, #6
 8005c02:	482a      	ldr	r0, [pc, #168]	; (8005cac <_vfiprintf_r+0x220>)
 8005c04:	f108 0701 	add.w	r7, r8, #1
 8005c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c0c:	f000 fa86 	bl	800611c <memchr>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d037      	beq.n	8005c84 <_vfiprintf_r+0x1f8>
 8005c14:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <_vfiprintf_r+0x224>)
 8005c16:	bb1b      	cbnz	r3, 8005c60 <_vfiprintf_r+0x1d4>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	3307      	adds	r3, #7
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	3308      	adds	r3, #8
 8005c22:	9303      	str	r3, [sp, #12]
 8005c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c26:	444b      	add	r3, r9
 8005c28:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2a:	e750      	b.n	8005ace <_vfiprintf_r+0x42>
 8005c2c:	fb05 3202 	mla	r2, r5, r2, r3
 8005c30:	2001      	movs	r0, #1
 8005c32:	4688      	mov	r8, r1
 8005c34:	e78a      	b.n	8005b4c <_vfiprintf_r+0xc0>
 8005c36:	2300      	movs	r3, #0
 8005c38:	250a      	movs	r5, #10
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f108 0801 	add.w	r8, r8, #1
 8005c40:	9305      	str	r3, [sp, #20]
 8005c42:	4640      	mov	r0, r8
 8005c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c48:	3a30      	subs	r2, #48	; 0x30
 8005c4a:	2a09      	cmp	r2, #9
 8005c4c:	d903      	bls.n	8005c56 <_vfiprintf_r+0x1ca>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0c3      	beq.n	8005bda <_vfiprintf_r+0x14e>
 8005c52:	9105      	str	r1, [sp, #20]
 8005c54:	e7c1      	b.n	8005bda <_vfiprintf_r+0x14e>
 8005c56:	fb05 2101 	mla	r1, r5, r1, r2
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	e7f0      	b.n	8005c42 <_vfiprintf_r+0x1b6>
 8005c60:	ab03      	add	r3, sp, #12
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	4622      	mov	r2, r4
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <_vfiprintf_r+0x228>)
 8005c68:	a904      	add	r1, sp, #16
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f3af 8000 	nop.w
 8005c70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c74:	4681      	mov	r9, r0
 8005c76:	d1d5      	bne.n	8005c24 <_vfiprintf_r+0x198>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	065b      	lsls	r3, r3, #25
 8005c7c:	f53f af7e 	bmi.w	8005b7c <_vfiprintf_r+0xf0>
 8005c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c82:	e77d      	b.n	8005b80 <_vfiprintf_r+0xf4>
 8005c84:	ab03      	add	r3, sp, #12
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <_vfiprintf_r+0x228>)
 8005c8c:	a904      	add	r1, sp, #16
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 f888 	bl	8005da4 <_printf_i>
 8005c94:	e7ec      	b.n	8005c70 <_vfiprintf_r+0x1e4>
 8005c96:	bf00      	nop
 8005c98:	08006518 	.word	0x08006518
 8005c9c:	08006558 	.word	0x08006558
 8005ca0:	08006538 	.word	0x08006538
 8005ca4:	080064f8 	.word	0x080064f8
 8005ca8:	0800655e 	.word	0x0800655e
 8005cac:	08006562 	.word	0x08006562
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	08005a67 	.word	0x08005a67

08005cb8 <_printf_common>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	461f      	mov	r7, r3
 8005cc0:	688a      	ldr	r2, [r1, #8]
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	bfb8      	it	lt
 8005cca:	4613      	movlt	r3, r2
 8005ccc:	f8c9 3000 	str.w	r3, [r9]
 8005cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cda:	b112      	cbz	r2, 8005ce2 <_printf_common+0x2a>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c9 3000 	str.w	r3, [r9]
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	0699      	lsls	r1, r3, #26
 8005ce6:	bf42      	ittt	mi
 8005ce8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cec:	3302      	addmi	r3, #2
 8005cee:	f8c9 3000 	strmi.w	r3, [r9]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d107      	bne.n	8005d0a <_printf_common+0x52>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	f8d9 2000 	ldr.w	r2, [r9]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	42ab      	cmp	r3, r5
 8005d08:	dc29      	bgt.n	8005d5e <_printf_common+0xa6>
 8005d0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	3300      	adds	r3, #0
 8005d12:	bf18      	it	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	0692      	lsls	r2, r2, #26
 8005d18:	d42e      	bmi.n	8005d78 <_printf_common+0xc0>
 8005d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4630      	mov	r0, r6
 8005d22:	47c0      	blx	r8
 8005d24:	3001      	adds	r0, #1
 8005d26:	d021      	beq.n	8005d6c <_printf_common+0xb4>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	68e5      	ldr	r5, [r4, #12]
 8005d2c:	f003 0306 	and.w	r3, r3, #6
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	bf18      	it	ne
 8005d34:	2500      	movne	r5, #0
 8005d36:	f8d9 2000 	ldr.w	r2, [r9]
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	bf08      	it	eq
 8005d40:	1aad      	subeq	r5, r5, r2
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	bf08      	it	eq
 8005d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	bfc4      	itt	gt
 8005d50:	1a9b      	subgt	r3, r3, r2
 8005d52:	18ed      	addgt	r5, r5, r3
 8005d54:	341a      	adds	r4, #26
 8005d56:	454d      	cmp	r5, r9
 8005d58:	d11a      	bne.n	8005d90 <_printf_common+0xd8>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e008      	b.n	8005d70 <_printf_common+0xb8>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	4639      	mov	r1, r7
 8005d64:	4630      	mov	r0, r6
 8005d66:	47c0      	blx	r8
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d103      	bne.n	8005d74 <_printf_common+0xbc>
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	3501      	adds	r5, #1
 8005d76:	e7c2      	b.n	8005cfe <_printf_common+0x46>
 8005d78:	2030      	movs	r0, #48	; 0x30
 8005d7a:	18e1      	adds	r1, r4, r3
 8005d7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d86:	4422      	add	r2, r4
 8005d88:	3302      	adds	r3, #2
 8005d8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d8e:	e7c4      	b.n	8005d1a <_printf_common+0x62>
 8005d90:	2301      	movs	r3, #1
 8005d92:	4622      	mov	r2, r4
 8005d94:	4639      	mov	r1, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	47c0      	blx	r8
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d0e6      	beq.n	8005d6c <_printf_common+0xb4>
 8005d9e:	f109 0901 	add.w	r9, r9, #1
 8005da2:	e7d8      	b.n	8005d56 <_printf_common+0x9e>

08005da4 <_printf_i>:
 8005da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005da8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005dac:	460c      	mov	r4, r1
 8005dae:	7e09      	ldrb	r1, [r1, #24]
 8005db0:	b085      	sub	sp, #20
 8005db2:	296e      	cmp	r1, #110	; 0x6e
 8005db4:	4617      	mov	r7, r2
 8005db6:	4606      	mov	r6, r0
 8005db8:	4698      	mov	r8, r3
 8005dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dbc:	f000 80b3 	beq.w	8005f26 <_printf_i+0x182>
 8005dc0:	d822      	bhi.n	8005e08 <_printf_i+0x64>
 8005dc2:	2963      	cmp	r1, #99	; 0x63
 8005dc4:	d036      	beq.n	8005e34 <_printf_i+0x90>
 8005dc6:	d80a      	bhi.n	8005dde <_printf_i+0x3a>
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	f000 80b9 	beq.w	8005f40 <_printf_i+0x19c>
 8005dce:	2958      	cmp	r1, #88	; 0x58
 8005dd0:	f000 8083 	beq.w	8005eda <_printf_i+0x136>
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ddc:	e032      	b.n	8005e44 <_printf_i+0xa0>
 8005dde:	2964      	cmp	r1, #100	; 0x64
 8005de0:	d001      	beq.n	8005de6 <_printf_i+0x42>
 8005de2:	2969      	cmp	r1, #105	; 0x69
 8005de4:	d1f6      	bne.n	8005dd4 <_printf_i+0x30>
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	0605      	lsls	r5, r0, #24
 8005dec:	f103 0104 	add.w	r1, r3, #4
 8005df0:	d52a      	bpl.n	8005e48 <_printf_i+0xa4>
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da03      	bge.n	8005e02 <_printf_i+0x5e>
 8005dfa:	222d      	movs	r2, #45	; 0x2d
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e02:	486f      	ldr	r0, [pc, #444]	; (8005fc0 <_printf_i+0x21c>)
 8005e04:	220a      	movs	r2, #10
 8005e06:	e039      	b.n	8005e7c <_printf_i+0xd8>
 8005e08:	2973      	cmp	r1, #115	; 0x73
 8005e0a:	f000 809d 	beq.w	8005f48 <_printf_i+0x1a4>
 8005e0e:	d808      	bhi.n	8005e22 <_printf_i+0x7e>
 8005e10:	296f      	cmp	r1, #111	; 0x6f
 8005e12:	d020      	beq.n	8005e56 <_printf_i+0xb2>
 8005e14:	2970      	cmp	r1, #112	; 0x70
 8005e16:	d1dd      	bne.n	8005dd4 <_printf_i+0x30>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	f043 0320 	orr.w	r3, r3, #32
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	e003      	b.n	8005e2a <_printf_i+0x86>
 8005e22:	2975      	cmp	r1, #117	; 0x75
 8005e24:	d017      	beq.n	8005e56 <_printf_i+0xb2>
 8005e26:	2978      	cmp	r1, #120	; 0x78
 8005e28:	d1d4      	bne.n	8005dd4 <_printf_i+0x30>
 8005e2a:	2378      	movs	r3, #120	; 0x78
 8005e2c:	4865      	ldr	r0, [pc, #404]	; (8005fc4 <_printf_i+0x220>)
 8005e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e32:	e055      	b.n	8005ee0 <_printf_i+0x13c>
 8005e34:	6813      	ldr	r3, [r2, #0]
 8005e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e3a:	1d19      	adds	r1, r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6011      	str	r1, [r2, #0]
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e08c      	b.n	8005f62 <_printf_i+0x1be>
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e4e:	6011      	str	r1, [r2, #0]
 8005e50:	bf18      	it	ne
 8005e52:	b21b      	sxthne	r3, r3
 8005e54:	e7cf      	b.n	8005df6 <_printf_i+0x52>
 8005e56:	6813      	ldr	r3, [r2, #0]
 8005e58:	6825      	ldr	r5, [r4, #0]
 8005e5a:	1d18      	adds	r0, r3, #4
 8005e5c:	6010      	str	r0, [r2, #0]
 8005e5e:	0628      	lsls	r0, r5, #24
 8005e60:	d501      	bpl.n	8005e66 <_printf_i+0xc2>
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	e002      	b.n	8005e6c <_printf_i+0xc8>
 8005e66:	0668      	lsls	r0, r5, #25
 8005e68:	d5fb      	bpl.n	8005e62 <_printf_i+0xbe>
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	296f      	cmp	r1, #111	; 0x6f
 8005e6e:	bf14      	ite	ne
 8005e70:	220a      	movne	r2, #10
 8005e72:	2208      	moveq	r2, #8
 8005e74:	4852      	ldr	r0, [pc, #328]	; (8005fc0 <_printf_i+0x21c>)
 8005e76:	2100      	movs	r1, #0
 8005e78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e7c:	6865      	ldr	r5, [r4, #4]
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	60a5      	str	r5, [r4, #8]
 8005e82:	f2c0 8095 	blt.w	8005fb0 <_printf_i+0x20c>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	f021 0104 	bic.w	r1, r1, #4
 8005e8c:	6021      	str	r1, [r4, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d13d      	bne.n	8005f0e <_printf_i+0x16a>
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	f040 808e 	bne.w	8005fb4 <_printf_i+0x210>
 8005e98:	4665      	mov	r5, ip
 8005e9a:	2a08      	cmp	r2, #8
 8005e9c:	d10b      	bne.n	8005eb6 <_printf_i+0x112>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	07db      	lsls	r3, r3, #31
 8005ea2:	d508      	bpl.n	8005eb6 <_printf_i+0x112>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	6862      	ldr	r2, [r4, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bfde      	ittt	le
 8005eac:	2330      	movle	r3, #48	; 0x30
 8005eae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eb6:	ebac 0305 	sub.w	r3, ip, r5
 8005eba:	6123      	str	r3, [r4, #16]
 8005ebc:	f8cd 8000 	str.w	r8, [sp]
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	aa03      	add	r2, sp, #12
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff fef6 	bl	8005cb8 <_printf_common>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d14d      	bne.n	8005f6c <_printf_i+0x1c8>
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	b005      	add	sp, #20
 8005ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eda:	4839      	ldr	r0, [pc, #228]	; (8005fc0 <_printf_i+0x21c>)
 8005edc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ee0:	6813      	ldr	r3, [r2, #0]
 8005ee2:	6821      	ldr	r1, [r4, #0]
 8005ee4:	1d1d      	adds	r5, r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6015      	str	r5, [r2, #0]
 8005eea:	060a      	lsls	r2, r1, #24
 8005eec:	d50b      	bpl.n	8005f06 <_printf_i+0x162>
 8005eee:	07ca      	lsls	r2, r1, #31
 8005ef0:	bf44      	itt	mi
 8005ef2:	f041 0120 	orrmi.w	r1, r1, #32
 8005ef6:	6021      	strmi	r1, [r4, #0]
 8005ef8:	b91b      	cbnz	r3, 8005f02 <_printf_i+0x15e>
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	f022 0220 	bic.w	r2, r2, #32
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	2210      	movs	r2, #16
 8005f04:	e7b7      	b.n	8005e76 <_printf_i+0xd2>
 8005f06:	064d      	lsls	r5, r1, #25
 8005f08:	bf48      	it	mi
 8005f0a:	b29b      	uxthmi	r3, r3
 8005f0c:	e7ef      	b.n	8005eee <_printf_i+0x14a>
 8005f0e:	4665      	mov	r5, ip
 8005f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f14:	fb02 3311 	mls	r3, r2, r1, r3
 8005f18:	5cc3      	ldrb	r3, [r0, r3]
 8005f1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f1e:	460b      	mov	r3, r1
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d1f5      	bne.n	8005f10 <_printf_i+0x16c>
 8005f24:	e7b9      	b.n	8005e9a <_printf_i+0xf6>
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1d18      	adds	r0, r3, #4
 8005f2c:	6961      	ldr	r1, [r4, #20]
 8005f2e:	6010      	str	r0, [r2, #0]
 8005f30:	0628      	lsls	r0, r5, #24
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	d501      	bpl.n	8005f3a <_printf_i+0x196>
 8005f36:	6019      	str	r1, [r3, #0]
 8005f38:	e002      	b.n	8005f40 <_printf_i+0x19c>
 8005f3a:	066a      	lsls	r2, r5, #25
 8005f3c:	d5fb      	bpl.n	8005f36 <_printf_i+0x192>
 8005f3e:	8019      	strh	r1, [r3, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	4665      	mov	r5, ip
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	e7b9      	b.n	8005ebc <_printf_i+0x118>
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	1d19      	adds	r1, r3, #4
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	681d      	ldr	r5, [r3, #0]
 8005f50:	6862      	ldr	r2, [r4, #4]
 8005f52:	2100      	movs	r1, #0
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 f8e1 	bl	800611c <memchr>
 8005f5a:	b108      	cbz	r0, 8005f60 <_printf_i+0x1bc>
 8005f5c:	1b40      	subs	r0, r0, r5
 8005f5e:	6060      	str	r0, [r4, #4]
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	2300      	movs	r3, #0
 8005f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f6a:	e7a7      	b.n	8005ebc <_printf_i+0x118>
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	462a      	mov	r2, r5
 8005f70:	4639      	mov	r1, r7
 8005f72:	4630      	mov	r0, r6
 8005f74:	47c0      	blx	r8
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0aa      	beq.n	8005ed0 <_printf_i+0x12c>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	079b      	lsls	r3, r3, #30
 8005f7e:	d413      	bmi.n	8005fa8 <_printf_i+0x204>
 8005f80:	68e0      	ldr	r0, [r4, #12]
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	4298      	cmp	r0, r3
 8005f86:	bfb8      	it	lt
 8005f88:	4618      	movlt	r0, r3
 8005f8a:	e7a3      	b.n	8005ed4 <_printf_i+0x130>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	464a      	mov	r2, r9
 8005f90:	4639      	mov	r1, r7
 8005f92:	4630      	mov	r0, r6
 8005f94:	47c0      	blx	r8
 8005f96:	3001      	adds	r0, #1
 8005f98:	d09a      	beq.n	8005ed0 <_printf_i+0x12c>
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	68e3      	ldr	r3, [r4, #12]
 8005f9e:	9a03      	ldr	r2, [sp, #12]
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	42ab      	cmp	r3, r5
 8005fa4:	dcf2      	bgt.n	8005f8c <_printf_i+0x1e8>
 8005fa6:	e7eb      	b.n	8005f80 <_printf_i+0x1dc>
 8005fa8:	2500      	movs	r5, #0
 8005faa:	f104 0919 	add.w	r9, r4, #25
 8005fae:	e7f5      	b.n	8005f9c <_printf_i+0x1f8>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ac      	bne.n	8005f0e <_printf_i+0x16a>
 8005fb4:	7803      	ldrb	r3, [r0, #0]
 8005fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fbe:	e76c      	b.n	8005e9a <_printf_i+0xf6>
 8005fc0:	08006569 	.word	0x08006569
 8005fc4:	0800657a 	.word	0x0800657a

08005fc8 <_sbrk_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4c05      	ldr	r4, [pc, #20]	; (8005fe4 <_sbrk_r+0x1c>)
 8005fce:	4605      	mov	r5, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	f7fc fdb0 	bl	8002b38 <_sbrk>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_sbrk_r+0x1a>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_sbrk_r+0x1a>
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20000a0c 	.word	0x20000a0c

08005fe8 <__sread>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	460c      	mov	r4, r1
 8005fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff0:	f000 f8a4 	bl	800613c <_read_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	bfab      	itete	ge
 8005ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8005ffc:	181b      	addge	r3, r3, r0
 8005ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006002:	bfac      	ite	ge
 8006004:	6563      	strge	r3, [r4, #84]	; 0x54
 8006006:	81a3      	strhlt	r3, [r4, #12]
 8006008:	bd10      	pop	{r4, pc}

0800600a <__swrite>:
 800600a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600e:	461f      	mov	r7, r3
 8006010:	898b      	ldrh	r3, [r1, #12]
 8006012:	4605      	mov	r5, r0
 8006014:	05db      	lsls	r3, r3, #23
 8006016:	460c      	mov	r4, r1
 8006018:	4616      	mov	r6, r2
 800601a:	d505      	bpl.n	8006028 <__swrite+0x1e>
 800601c:	2302      	movs	r3, #2
 800601e:	2200      	movs	r2, #0
 8006020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006024:	f000 f868 	bl	80060f8 <_lseek_r>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	4632      	mov	r2, r6
 800602c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006036:	463b      	mov	r3, r7
 8006038:	4628      	mov	r0, r5
 800603a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	f000 b817 	b.w	8006070 <_write_r>

08006042 <__sseek>:
 8006042:	b510      	push	{r4, lr}
 8006044:	460c      	mov	r4, r1
 8006046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604a:	f000 f855 	bl	80060f8 <_lseek_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	bf15      	itete	ne
 8006054:	6560      	strne	r0, [r4, #84]	; 0x54
 8006056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800605a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800605e:	81a3      	strheq	r3, [r4, #12]
 8006060:	bf18      	it	ne
 8006062:	81a3      	strhne	r3, [r4, #12]
 8006064:	bd10      	pop	{r4, pc}

08006066 <__sclose>:
 8006066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606a:	f000 b813 	b.w	8006094 <_close_r>
	...

08006070 <_write_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	2200      	movs	r2, #0
 800607a:	4c05      	ldr	r4, [pc, #20]	; (8006090 <_write_r+0x20>)
 800607c:	6022      	str	r2, [r4, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7fc f86c 	bl	800215c <_write>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_write_r+0x1e>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	b103      	cbz	r3, 800608e <_write_r+0x1e>
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000a0c 	.word	0x20000a0c

08006094 <_close_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	2300      	movs	r3, #0
 8006098:	4c05      	ldr	r4, [pc, #20]	; (80060b0 <_close_r+0x1c>)
 800609a:	4605      	mov	r5, r0
 800609c:	4608      	mov	r0, r1
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	f7fc fd19 	bl	8002ad6 <_close>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_close_r+0x1a>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_close_r+0x1a>
 80060ac:	602b      	str	r3, [r5, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000a0c 	.word	0x20000a0c

080060b4 <_fstat_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	2300      	movs	r3, #0
 80060b8:	4c06      	ldr	r4, [pc, #24]	; (80060d4 <_fstat_r+0x20>)
 80060ba:	4605      	mov	r5, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	f7fc fd13 	bl	8002aec <_fstat>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	d102      	bne.n	80060d0 <_fstat_r+0x1c>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	b103      	cbz	r3, 80060d0 <_fstat_r+0x1c>
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	bf00      	nop
 80060d4:	20000a0c 	.word	0x20000a0c

080060d8 <_isatty_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	2300      	movs	r3, #0
 80060dc:	4c05      	ldr	r4, [pc, #20]	; (80060f4 <_isatty_r+0x1c>)
 80060de:	4605      	mov	r5, r0
 80060e0:	4608      	mov	r0, r1
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	f7fc fd11 	bl	8002b0a <_isatty>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_isatty_r+0x1a>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_isatty_r+0x1a>
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	20000a0c 	.word	0x20000a0c

080060f8 <_lseek_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4605      	mov	r5, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	2200      	movs	r2, #0
 8006102:	4c05      	ldr	r4, [pc, #20]	; (8006118 <_lseek_r+0x20>)
 8006104:	6022      	str	r2, [r4, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	f7fc fd09 	bl	8002b1e <_lseek>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_lseek_r+0x1e>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	b103      	cbz	r3, 8006116 <_lseek_r+0x1e>
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	20000a0c 	.word	0x20000a0c

0800611c <memchr>:
 800611c:	b510      	push	{r4, lr}
 800611e:	b2c9      	uxtb	r1, r1
 8006120:	4402      	add	r2, r0
 8006122:	4290      	cmp	r0, r2
 8006124:	4603      	mov	r3, r0
 8006126:	d101      	bne.n	800612c <memchr+0x10>
 8006128:	2300      	movs	r3, #0
 800612a:	e003      	b.n	8006134 <memchr+0x18>
 800612c:	781c      	ldrb	r4, [r3, #0]
 800612e:	3001      	adds	r0, #1
 8006130:	428c      	cmp	r4, r1
 8006132:	d1f6      	bne.n	8006122 <memchr+0x6>
 8006134:	4618      	mov	r0, r3
 8006136:	bd10      	pop	{r4, pc}

08006138 <__malloc_lock>:
 8006138:	4770      	bx	lr

0800613a <__malloc_unlock>:
 800613a:	4770      	bx	lr

0800613c <_read_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4605      	mov	r5, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	2200      	movs	r2, #0
 8006146:	4c05      	ldr	r4, [pc, #20]	; (800615c <_read_r+0x20>)
 8006148:	6022      	str	r2, [r4, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f7fc fca6 	bl	8002a9c <_read>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_read_r+0x1e>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	b103      	cbz	r3, 800615a <_read_r+0x1e>
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	20000a0c 	.word	0x20000a0c

08006160 <_init>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr

0800616c <_fini>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr
